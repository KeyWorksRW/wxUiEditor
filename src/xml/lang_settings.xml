inline const char* language_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="C++ Settings" type="interface">
		<property name="base_file" type="file"
			help="The filename of the base class." />
		<property name="generate_translation_unit" type="bool"
			help="If checked, both a source file (translation unit) and a header file are generated. If not checked, all code is generated in the header file, and no source file is created.">
			1</property>
		<property name="source_preamble" type="code_edit"
			help="This preamble is added in addition to any src_preamble specified for the entire project. It will be placed unchanged at the top of the generated base src file after any (optional) precompiled header file." />
		<property name="local_src_includes" type="include_files"
			help="Lists one or more local header files to include in the generated header file." />
		<property name="system_src_includes" type="include_files"
			help="Lists one or more system header files to include in the generated header file." />
		<property name="header_preamble" type="code_edit"
			help="This preamble is placed unchanged in the generated header file after all wx/ include files. It is commonly used to add forward class names needed by methods and members you add to the Derived Class Settings." />
		<property name="local_hdr_includes" type="include_files"
			help="Lists one or more local header files to include in the generated header file." />
		<property name="system_hdr_includes" type="include_files"
			help="Lists one or more system header files to include in the generated header file." />
		<property name="generate_ids" type="bool"
			help="If checked, any non-wxWidgets ids will be created as an enumerated list unless you specically assign the value of the id (e.g., myid=100).">
			1</property>
		<property name="initial_enum_string" type="string"
			help="The first id in a generated enum will be set to this value.">
			wxID_HIGHEST + 1</property>
		<property name="generate_const_values" type="bool"
			help="If checked, each form's header file will have const values declared for some of the possible parameters. E.g., const int form_id = your_id. You can use this when creating multiple instances of a form with different construction parameters.">
			0</property>
		<property name="class_decoration" type="string"
			help="This specifies the keyword or macro to add to the class declaration (such as __declspec(dllexport) )." />
	</gen>

	<gen class="C++ Derived Class Settings" type="interface">
		<property name="use_derived_class" type="bool"
			help="Check this if you will be creating a derived class. If not checked, you will need to create a source file implementing any event handlers.">
			1</property>
		<property name="derived_class_name" type="string"
			help="The name of the derived class. Ignored if use_derived_class is unchecked." />
		<property name="derived_file" type="file"
			help="The filename of the derived class. You can leave this empty if you have already generated the file. Ignored if use_derived_class is unchecked." />
		<property name="additional_inheritance" type="stringlist_escapes"
			help="Additional classes to inherit from (these can be your own classes if you specified their header file in base_hdr_includes in the C++ Settings section above)." />
		<property name="class_methods" type="stringlist_escapes"
			help="Additional class methods to add (useful if you are *not* using a derived class." />
		<property name="class_members" type="stringlist_escapes"
			help="Additional class variable members to add (useful if you are *not* using a derived class." />
		<property name="inserted_hdr_code" type="code_edit"
			help="Specify code to insert into the header file at the end of the public: section. You may add protected: and private: sections as needed for additional methods and member variables." />
		<property name="private_members" type="bool"
			help="Check this to make all protected: members private:. This can only be done if you are NOT creating a derived class (use_derived_class is unchecked)." />
	</gen>

	<gen class="wxPython Settings" type="interface">
		<property name="python_file" type="file"
			help="The filename to use if generating code for wxPython." />
		<property name="insert_python_code" type="code_edit"
			help="Specify the code to insert into the python file after the generated import statements. This is usually used to import addtional modules, but can be any valid python code for use before the class definition." />
		<!-- <property name="python_variable_args" type="bool"
			help="If checked, the form
		parameters will be set to (*args, **kwargs) instead of listing all the parameters and their
		default values.">1</property> -->
		<property name="python_inherit_name" type="string"
			help="The name to use for an inherited class. If specified, the Inherit tab in the Python panel will include a sample for creating an inherited class." />
	</gen>

	<gen class="wxPython Frame Settings" type="interface">
		<property name="python_file" type="file"
			help="The filename to use if generating code for wxPython." />
		<property name="import_all_dialogs" type="bool"
			help="If checked, every wxDialog or wxWizard in this project that has a python_file specified for it will be imported into this module.">
			0</property>
		<property name="insert_python_code" type="code_edit"
			help="Specify the code to insert into the python file after the generated import statements. This is usually used to import addtional modules, but can be any valid python code for use before the class definition." />
		<property name="python_inherit_name" type="string"
			help="The name to use for an inherited class. If specified, the Inherit tab in the Python panel will include a sample for creating an inherited class." />
	</gen>

	<gen class="XRC Settings" type="interface">
		<property name="xrc_file" type="file"
			help="The filename to use if generating XRC (wxPython can override this with its own file name)." />
		<property name="xrc_no_whitespace" type="bool"
			help="If checked, no leading whitespace will be used. This makes the file smaller, but less readable.">
			0</property>
	</gen>
</GeneratorDefinitions>)===";
