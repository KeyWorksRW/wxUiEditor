////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include "pch.h"

#include <wx/ribbon/page.h>
#include <wx/ribbon/panel.h>

#include "ribbon_ids.h"
#include "gen_enums.h"     // Enumerations for generators

using namespace GenEnum;

#include "ribbonpanel_base.h"

#include "../xpm/book_page.xpm"
#include "../xpm/calendar.xpm"
#include "../xpm/colourPickerIcon.xpm"
#include "../xpm/dataview_ctrl.xpm"
#include "../xpm/dataviewlist_column.xpm"
#include "../xpm/datepicker.xpm"
#include "../xpm/dirPicker.xpm"
#include "../xpm/doc_mdi_parent_frame.xpm"
#include "../xpm/filePicker.xpm"
#include "../xpm/flex_grid_sizer.xpm"
#include "../xpm/fontPicker.xpm"
#include "../xpm/gauge.xpm"
#include "../xpm/genericdir_ctrl.xpm"
#include "../xpm/grid.xpm"
#include "../xpm/grid_bag_sizer.xpm"
#include "../xpm/grid_sizer.xpm"
#include "../xpm/htmlwin.xpm"
#include "../xpm/hyperlink_ctrl.xpm"
#include "../xpm/infobar.xpm"
#include "../xpm/menu.xpm"
#include "../xpm/menuitem.xpm"
#include "../xpm/propgriditem.xpm"
#include "../xpm/propgridpage.xpm"
#include "../xpm/radio_box.xpm"
#include "../xpm/ribbon_bar.xpm"
#include "../xpm/ribbon_button.xpm"
#include "../xpm/ribbon_buttonbar.xpm"
#include "../xpm/ribbon_gallery_item.xpm"
#include "../xpm/ribbon_page.xpm"
#include "../xpm/ribbon_panel.xpm"
#include "../xpm/richtextctrl.xpm"
#include "../xpm/scintilla.xpm"
#include "../xpm/search.xpm"
#include "../xpm/separator.xpm"
#include "../xpm/sizer.xpm"
#include "../xpm/sizer_horizontal.xpm"
#include "../xpm/slider.xpm"
#include "../xpm/spacer.xpm"
#include "../xpm/spin_ctrl.xpm"
#include "../xpm/static_bitmap.xpm"
#include "../xpm/static_line.xpm"
#include "../xpm/statusbar.xpm"
#include "../xpm/stddialogbuttonsizer.xpm"
#include "../xpm/submenu.xpm"
#include "../xpm/text_sizer.xpm"
#include "../xpm/timepicker.xpm"
#include "../xpm/tool.xpm"
#include "../xpm/toolseparator.xpm"
#include "../xpm/tree_ctrl.xpm"
#include "../xpm/treelistctrl.xpm"
#include "../xpm/treelistctrlcolumn.xpm"
#include "../xpm/wrap_sizer.xpm"
#include "../xpm/wxActivityIndicator.xpm"
#include "../xpm/wxBannerWindow.xpm"
#include "../xpm/wxButton.xpm"
#include "../xpm/wxCheckBox.xpm"
#include "../xpm/wxChoicebook.xpm"
#include "../xpm/wxCollapsiblePane.xpm"
#include "../xpm/wxComboBox.xpm"
#include "../xpm/wxDialog.xpm"
#include "../xpm/wxFileCtrl.xpm"
#include "../xpm/wxFrame.xpm"
#include "../xpm/wxListBox.xpm"
#include "../xpm/wxListbook.xpm"
#include "../xpm/wxMenuBar.xpm"
#include "../xpm/wxNotebook.xpm"
#include "../xpm/wxPanel.xpm"
#include "../xpm/wxPopupTransientWindow.xpm"
#include "../xpm/wxPropertyGrid.xpm"
#include "../xpm/wxPropertyGridManager.xpm"
#include "../xpm/wxRadioButton.xpm"
#include "../xpm/wxScrolledWindow.xpm"
#include "../xpm/wxSimplebook.xpm"
#include "../xpm/wxSplitterWindow.xpm"
#include "../xpm/wxStaticBoxSizer.xpm"
#include "../xpm/wxStaticText.xpm"
#include "../xpm/wxTextCtrl.xpm"
#include "../xpm/wxToolBar.xpm"
#include "../xpm/wxToolbook.xpm"
#include "../xpm/wxTreebook.xpm"
#include "../xpm/wxWizard.xpm"
#include "../xpm/wxWizardPageSimple.xpm"

RibbonPanelBase::RibbonPanelBase(wxWindow* parent, wxWindowID id,
		const wxPoint& pos, const wxSize& size, long style) :
	wxPanel(parent, id, pos, size, style)
{
    parent_sizer = new wxBoxSizer(wxVERTICAL);

    m_rbnBar = new wxRibbonBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxRIBBON_BAR_SHOW_PAGE_LABELS);
    m_rbnBar->SetArtProvider(new wxRibbonMSWArtProvider);
    parent_sizer->Add(m_rbnBar, wxSizerFlags().Expand().Border(wxALL));

    auto page_forms = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Forms"));

    auto panel_form_windows = new wxRibbonPanel(page_forms, wxID_ANY, wxString::FromUTF8("Windows"));

    auto forms_bar_windows = new wxRibbonToolBar(panel_form_windows, wxID_ANY);
    {
        forms_bar_windows->AddTool(gen_wxDialog, wxImage(wxDialog_xpm), wxString::FromUTF8("wxDialog"), wxRIBBON_BUTTON_NORMAL);
        forms_bar_windows->AddTool(gen_PanelForm, wxImage(wxPanel_xpm), wxString::FromUTF8("wxPanel"), wxRIBBON_BUTTON_NORMAL);
        forms_bar_windows->AddTool(gen_wxFrame, wxImage(wxFrame_xpm), wxString::FromUTF8("wxFrame"), wxRIBBON_BUTTON_NORMAL);
        forms_bar_windows->AddTool(NewPopupWin, wxImage(wxPopupTransientWindow_xpm), wxString::FromUTF8("wxPopupTransientWindow"), wxRIBBON_BUTTON_NORMAL);
    }
    forms_bar_windows->Realize();

    auto panel_wizard = new wxRibbonPanel(page_forms, wxID_ANY, wxString::FromUTF8("Wizard"),

    wxImage(wxWizard_xpm));

    auto forms_bar_wizard = new wxRibbonToolBar(panel_wizard, wxID_ANY);
    {
        forms_bar_wizard->AddTool(gen_wxWizard, wxImage(wxWizard_xpm), wxString::FromUTF8("wxWizard"), wxRIBBON_BUTTON_NORMAL);
        forms_bar_wizard->AddTool(gen_wxWizardPageSimple, wxImage(wxWizardPageSimple_xpm), wxString::FromUTF8("wxWizardPageSimple"), wxRIBBON_BUTTON_NORMAL);
    }
    forms_bar_wizard->Realize();

    auto panel_bars = new wxRibbonPanel(page_forms, wxID_ANY, wxString::FromUTF8("Bars"));

    auto forms_bar_bars = new wxRibbonToolBar(panel_bars, wxID_ANY);
    {
        forms_bar_bars->AddTool(gen_MenuBar, wxImage(wxMenuBar_xpm), wxString::FromUTF8("wxMenuBar"), wxRIBBON_BUTTON_NORMAL);
        forms_bar_bars->AddTool(gen_ToolBar, wxImage(wxToolBar_xpm), wxString::FromUTF8("wxToolBar"), wxRIBBON_BUTTON_NORMAL);
    }
    forms_bar_bars->Realize();

    auto pg_sizer = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Sizers"));

    auto panel_basic = new wxRibbonPanel(pg_sizer, wxID_ANY, wxString::FromUTF8("Basic"));

    auto sizer_bar_basic = new wxRibbonToolBar(panel_basic, wxID_ANY);
    {
        sizer_bar_basic->AddTool(gen_wxBoxSizer, wxImage(sizer_horizontal_xpm), wxString::FromUTF8("Horizontal wxBoxSizer"), wxRIBBON_BUTTON_NORMAL);
        sizer_bar_basic->AddTool(gen_VerticalBoxSizer, wxImage(sizer_xpm), wxString::FromUTF8("Vertical wxBoxSizer"), wxRIBBON_BUTTON_NORMAL);
        sizer_bar_basic->AddTool(NewStaticSizer, wxImage(wxStaticBoxSizer_xpm), wxString::FromUTF8("wxStaticBoxSizer"), wxRIBBON_BUTTON_DROPDOWN);
        sizer_bar_basic->AddTool(gen_wxWrapSizer, wxImage(wrap_sizer_xpm), wxString::FromUTF8("wxWrapSizer"), wxRIBBON_BUTTON_NORMAL);
    }
    sizer_bar_basic->Realize();

    auto sizer_panel_grids = new wxRibbonPanel(pg_sizer, wxID_ANY, wxString::FromUTF8("Grids"));

    auto sizer_bar_grids = new wxRibbonToolBar(sizer_panel_grids, wxID_ANY);
    {
        sizer_bar_grids->AddTool(gen_wxGridSizer, wxImage(grid_sizer_xpm), wxString::FromUTF8("wxGridSizer"), wxRIBBON_BUTTON_NORMAL);
        sizer_bar_grids->AddTool(gen_wxFlexGridSizer, wxImage(flex_grid_sizer_xpm), wxString::FromUTF8("wxFlexGridSizer"), wxRIBBON_BUTTON_NORMAL);
        sizer_bar_grids->AddTool(gen_wxGridBagSizer, wxImage(grid_bag_sizer_xpm), wxString::FromUTF8("wxGridBagSizer"), wxRIBBON_BUTTON_NORMAL);
    }
    sizer_bar_grids->Realize();

    auto sizer_panel_other = new wxRibbonPanel(pg_sizer, wxID_ANY, wxString::FromUTF8("Other"));

    auto sizer_bar_other = new wxRibbonToolBar(sizer_panel_other, wxID_ANY);
    {
        sizer_bar_other->AddTool(gen_wxStdDialogButtonSizer, wxImage(stddialogbuttonsizer_xpm), wxString::FromUTF8("wxStdDialogButtonSizer"), wxRIBBON_BUTTON_NORMAL);
        sizer_bar_other->AddTool(gen_TextSizer, wxImage(text_sizer_xpm), wxString::FromUTF8("wxTextSizerWrapper"), wxRIBBON_BUTTON_NORMAL);
        sizer_bar_other->AddTool(gen_spacer, wxImage(spacer_xpm), wxString::FromUTF8("spacer"), wxRIBBON_BUTTON_NORMAL);
    }
    sizer_bar_other->Realize();

    auto pg_common = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Common"));

    auto panel_common_controls = new wxRibbonPanel(pg_common, wxID_ANY, wxString::FromUTF8("Controls"),
    wxNullBitmap, wxDefaultPosition, wxDefaultSize,
    wxRIBBON_PANEL_STRETCH|wxRIBBON_PANEL_FLEXIBLE);

    auto common_bar_controls = new wxRibbonToolBar(panel_common_controls, wxID_ANY);
    {
        common_bar_controls->AddTool(gen_wxStaticText, wxImage(wxStaticText_xpm), wxString::FromUTF8("wxStaticText"), wxRIBBON_BUTTON_NORMAL);
        common_bar_controls->AddTool(gen_wxTextCtrl, wxImage(wxTextCtrl_xpm), wxString::FromUTF8("wxTextCtrl"), wxRIBBON_BUTTON_NORMAL);
        common_bar_controls->AddTool(NewCheckbox, wxImage(wxCheckBox_xpm), wxString::FromUTF8("Check Boxes"), wxRIBBON_BUTTON_DROPDOWN);
        common_bar_controls->AddTool(gen_wxRadioButton, wxImage(wxRadioButton_xpm), wxString::FromUTF8("wxRadioButton"), wxRIBBON_BUTTON_NORMAL);
        common_bar_controls->AddTool(NewButton, wxImage(wxButton_xpm), wxString::FromUTF8("Buttons"), wxRIBBON_BUTTON_DROPDOWN);
        common_bar_controls->AddTool(NewSpin, wxImage(spin_ctrl_xpm), wxString::FromUTF8("Spin controls"), wxRIBBON_BUTTON_DROPDOWN);
    }
    common_bar_controls->Realize();

    auto panel_choices = new wxRibbonPanel(pg_common, wxID_ANY, wxString::FromUTF8("Choices"),
    wxNullBitmap, wxDefaultPosition, wxDefaultSize,
    wxRIBBON_PANEL_STRETCH|wxRIBBON_PANEL_FLEXIBLE);

    auto common_bar_choices = new wxRibbonToolBar(panel_choices, wxID_ANY);
    {
        common_bar_choices->AddTool(NewCombobox, wxImage(wxComboBox_xpm), wxString::FromUTF8("Combos & Choice"), wxRIBBON_BUTTON_DROPDOWN);
        common_bar_choices->AddTool(NewListbox, wxImage(wxListBox_xpm), wxString::FromUTF8("Lists"), wxRIBBON_BUTTON_DROPDOWN);
        common_bar_choices->AddTool(gen_wxRadioBox, wxImage(radio_box_xpm), wxString::FromUTF8("wxRadioBox"), wxRIBBON_BUTTON_NORMAL);
    }
    common_bar_choices->Realize();

    auto panel_pickkers = new wxRibbonPanel(pg_common, wxID_ANY, wxString::FromUTF8("Pickers"),
    wxNullBitmap, wxDefaultPosition, wxDefaultSize,
    wxRIBBON_PANEL_STRETCH|wxRIBBON_PANEL_FLEXIBLE);

    auto common_bar_pickers = new wxRibbonToolBar(panel_pickkers, wxID_ANY);
    {
        common_bar_pickers->AddTool(gen_wxFilePickerCtrl, wxImage(filePicker_xpm), wxString::FromUTF8("wxFilePickerCtrl"), wxRIBBON_BUTTON_NORMAL);
        common_bar_pickers->AddTool(gen_wxDirPickerCtrl, wxImage(dirPicker_xpm), wxString::FromUTF8("wxDirPickerCtrl"), wxRIBBON_BUTTON_NORMAL);
        common_bar_pickers->AddTool(gen_wxFontPickerCtrl, wxImage(fontPicker_xpm), wxString::FromUTF8("wxFontPickerCtrl"), wxRIBBON_BUTTON_NORMAL);
        common_bar_pickers->AddTool(gen_wxColourPickerCtrl, wxImage(colourPickerIcon_xpm), wxString::FromUTF8("wxColourPickerCtrl"), wxRIBBON_BUTTON_NORMAL);
        common_bar_pickers->AddTool(gen_wxDatePickerCtrl, wxImage(datepicker_xpm), wxString::FromUTF8("wxDatePickerCtrl"), wxRIBBON_BUTTON_NORMAL);
        common_bar_pickers->AddTool(gen_wxTimePickerCtrl, wxImage(timepicker_xpm), wxString::FromUTF8("wxTimePickerCtrl"), wxRIBBON_BUTTON_NORMAL);
    }
    common_bar_pickers->Realize();

    auto panel_other = new wxRibbonPanel(pg_common, wxID_ANY, wxString::FromUTF8("Other"),
    wxNullBitmap, wxDefaultPosition, wxDefaultSize,
    wxRIBBON_PANEL_STRETCH|wxRIBBON_PANEL_FLEXIBLE);

    auto common_bar_other = new wxRibbonToolBar(panel_other, wxID_ANY);
    {
        common_bar_other->AddTool(gen_wxStaticBitmap, wxImage(static_bitmap_xpm), wxString::FromUTF8("wxStaticBitmap"), wxRIBBON_BUTTON_NORMAL);
        common_bar_other->AddTool(gen_wxStaticLine, wxImage(static_line_xpm), wxString::FromUTF8("wxStaticLine"), wxRIBBON_BUTTON_NORMAL);
        common_bar_other->AddTool(gen_wxSlider, wxImage(slider_xpm), wxString::FromUTF8("wxSlider"), wxRIBBON_BUTTON_NORMAL);
        common_bar_other->AddTool(gen_wxGauge, wxImage(gauge_xpm), wxString::FromUTF8("wxGauge"), wxRIBBON_BUTTON_NORMAL);
    }
    common_bar_other->Realize();

    auto page_containers = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Containers"));

    auto panel_windows = new wxRibbonPanel(page_containers, wxID_ANY, wxString::FromUTF8("Windows"));

    auto container_bar_windows = new wxRibbonToolBar(panel_windows, wxID_ANY);
    {
        container_bar_windows->AddTool(gen_wxPanel, wxImage(wxPanel_xpm), wxString::FromUTF8("wxPanel"), wxRIBBON_BUTTON_NORMAL);
        container_bar_windows->AddTool(gen_wxSplitterWindow, wxImage(wxSplitterWindow_xpm), wxString::FromUTF8("wxSplitterWindow"), wxRIBBON_BUTTON_NORMAL);
        container_bar_windows->AddTool(gen_wxScrolledWindow, wxImage(wxScrolledWindow_xpm), wxString::FromUTF8("wxScrolledWindow"), wxRIBBON_BUTTON_NORMAL);
        container_bar_windows->AddTool(gen_wxCollapsiblePane, wxImage(wxCollapsiblePane_xpm), wxString::FromUTF8("wxCollapsiblePane"), wxRIBBON_BUTTON_NORMAL);
    }
    container_bar_windows->Realize();

    auto panel_books = new wxRibbonPanel(page_containers, wxID_ANY, wxString::FromUTF8("Books"));

    auto container_bar_books = new wxRibbonToolBar(panel_books, wxID_ANY);
    {
        container_bar_books->AddTool(gen_wxChoicebook, wxImage(wxChoicebook_xpm), wxString::FromUTF8("wxChoicebook"), wxRIBBON_BUTTON_NORMAL);
        container_bar_books->AddTool(gen_wxListbook, wxImage(wxListbook_xpm), wxString::FromUTF8("wxListbook"), wxRIBBON_BUTTON_NORMAL);
        container_bar_books->AddTool(gen_wxNotebook, wxImage(wxNotebook_xpm), wxString::FromUTF8("wxNotebook"), wxRIBBON_BUTTON_NORMAL);
        container_bar_books->AddTool(gen_wxSimplebook, wxImage(wxSimplebook_xpm), wxString::FromUTF8("wxSimplebook"), wxRIBBON_BUTTON_NORMAL);
        container_bar_books->AddTool(gen_wxToolbook, wxImage(wxToolbook_xpm), wxString::FromUTF8("wxToolbook"), wxRIBBON_BUTTON_NORMAL);
        container_bar_books->AddTool(gen_wxTreebook, wxImage(wxTreebook_xpm), wxString::FromUTF8("wxTreebook"), wxRIBBON_BUTTON_NORMAL);
    }
    container_bar_books->Realize();

    auto panel_page = new wxRibbonPanel(page_containers, wxID_ANY, wxString::FromUTF8("Page"));

    auto container_bar_page = new wxRibbonToolBar(panel_page, wxID_ANY);
    {
        container_bar_page->AddTool(gen_BookPage, wxImage(book_page_xpm), wxString::FromUTF8("Book Page"), wxRIBBON_BUTTON_NORMAL);
    }
    container_bar_page->Realize();

    auto page_data = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Data"));

    auto panel_properties = new wxRibbonPanel(page_data, wxID_ANY, wxString::FromUTF8("Properties"));

    auto data_bar_properties = new wxRibbonToolBar(panel_properties, wxID_ANY);
    {
        data_bar_properties->AddTool(gen_wxPropertyGrid, wxImage(wxPropertyGrid_xpm), wxString::FromUTF8("wxPropertyGrid"), wxRIBBON_BUTTON_NORMAL);
        data_bar_properties->AddTool(gen_wxPropertyGridManager, wxImage(wxPropertyGridManager_xpm), wxString::FromUTF8("wxPropertyGridManager"), wxRIBBON_BUTTON_NORMAL);
        data_bar_properties->AddTool(gen_propGridPage, wxImage(propgridpage_xpm), wxString::FromUTF8("wxPropertyGrid Page"), wxRIBBON_BUTTON_NORMAL);
        data_bar_properties->AddTool(gen_propGridItem, wxImage(propgriditem_xpm), wxString::FromUTF8("wxPropertyGrid Item"), wxRIBBON_BUTTON_NORMAL);
    }
    data_bar_properties->Realize();

    auto panel_data_trees = new wxRibbonPanel(page_data, wxID_ANY, wxString::FromUTF8("Trees"));

    auto data_bar_trees = new wxRibbonToolBar(panel_data_trees, wxID_ANY);
    {
        data_bar_trees->AddTool(gen_wxTreeCtrl, wxImage(tree_ctrl_xpm), wxString::FromUTF8("wxTreeCtrl"), wxRIBBON_BUTTON_NORMAL);
        data_bar_trees->AddTool(gen_wxTreeListCtrl, wxImage(treelistctrl_xpm), wxString::FromUTF8("wxTreeListCtrl"), wxRIBBON_BUTTON_NORMAL);
        data_bar_trees->AddTool(gen_TreeListCtrlColumn, wxImage(treelistctrlcolumn_xpm), wxString::FromUTF8("wxTreeListCtrl Column"), wxRIBBON_BUTTON_NORMAL);
    }
    data_bar_trees->Realize();

    auto panel_trees = new wxRibbonPanel(page_data, wxID_ANY, wxString::FromUTF8("DataView"));

    auto data_bar_dataview = new wxRibbonToolBar(panel_trees, wxID_ANY);
    {
        data_bar_dataview->AddTool(NewDataCtrl, wxImage(dataview_ctrl_xpm), wxString::FromUTF8("Data Control"), wxRIBBON_BUTTON_DROPDOWN);
        data_bar_dataview->AddTool(gen_dataViewColumn, wxImage(dataviewlist_column_xpm), wxString::FromUTF8("DataView Column"), wxRIBBON_BUTTON_NORMAL);
        data_bar_dataview->AddTool(gen_dataViewListColumn, wxImage(doc_mdi_parent_frame_xpm), wxString::FromUTF8("DataViewList Column"), wxRIBBON_BUTTON_NORMAL);
    }
    data_bar_dataview->Realize();

    auto page_bars = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Bars"));

    auto panel_bars_menu = new wxRibbonPanel(page_bars, wxID_ANY, wxString::FromUTF8("Menu"));

    auto bars_bar_menu = new wxRibbonToolBar(panel_bars_menu, wxID_ANY);
    {
        bars_bar_menu->AddTool(gen_wxMenuBar, wxImage(wxMenuBar_xpm), wxString::FromUTF8("wxMenuBar"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_menu->AddTool(gen_wxMenu, wxImage(menu_xpm), wxString::FromUTF8("wxMenu"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_menu->AddTool(gen_submenu, wxImage(submenu_xpm), wxString::FromUTF8("submenu"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_menu->AddTool(gen_wxMenuItem, wxImage(menuitem_xpm), wxString::FromUTF8("wxMenuItem"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_menu->AddTool(gen_separator, wxImage(separator_xpm), wxString::FromUTF8("separator"), wxRIBBON_BUTTON_NORMAL);
    }
    bars_bar_menu->Realize();

    auto panel_bars_tool = new wxRibbonPanel(page_bars, wxID_ANY, wxString::FromUTF8("Tool"));

    auto bars_bar_tool = new wxRibbonToolBar(panel_bars_tool, wxID_ANY);
    {
        bars_bar_tool->AddTool(gen_wxToolBar, wxImage(wxToolBar_xpm), wxString::FromUTF8("wxToolBar"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_tool->AddTool(gen_tool, wxImage(tool_xpm), wxString::FromUTF8("Tool"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_tool->AddTool(gen_toolSeparator, wxImage(toolseparator_xpm), wxString::FromUTF8("Tool Separator"), wxRIBBON_BUTTON_NORMAL);
    }
    bars_bar_tool->Realize();

    auto panel_bars_ribbon = new wxRibbonPanel(page_bars, wxID_ANY, wxString::FromUTF8("Ribbon"));

    auto bars_bar_ribbon = new wxRibbonToolBar(panel_bars_ribbon, wxID_ANY);
    {
        bars_bar_ribbon->AddTool(gen_wxRibbonBar, wxImage(ribbon_bar_xpm), wxString::FromUTF8("wxRibbonBar"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_ribbon->AddTool(gen_wxRibbonPage, wxImage(ribbon_page_xpm), wxString::FromUTF8("wxRibbonPage"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_ribbon->AddTool(gen_wxRibbonPanel, wxImage(ribbon_panel_xpm), wxString::FromUTF8("wxRibbonPanel"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_ribbon->AddTool(NewRibbonType, wxImage(ribbon_buttonbar_xpm), wxString::FromUTF8("Ribbon Bar Type"), wxRIBBON_BUTTON_DROPDOWN);
        bars_bar_ribbon->AddTool(gen_ribbonButton, wxImage(ribbon_button_xpm), wxString::FromUTF8("Ribbon Button"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_ribbon->AddTool(gen_ribbonGalleryItem, wxImage(ribbon_gallery_item_xpm), wxString::FromUTF8("Ribbon Gallery Item"), wxRIBBON_BUTTON_NORMAL);
    }
    bars_bar_ribbon->Realize();

    auto panel_bars_rother = new wxRibbonPanel(page_bars, wxID_ANY, wxString::FromUTF8("Other"));

    auto bars_bar_other = new wxRibbonToolBar(panel_bars_rother, wxID_ANY);
    {
        bars_bar_other->AddTool(gen_wxStatusBar, wxImage(statusbar_xpm), wxString::FromUTF8("wxStatusBar"), wxRIBBON_BUTTON_NORMAL);
        bars_bar_other->AddTool(gen_wxInfoBar, wxImage(infobar_xpm), wxString::FromUTF8("wxInfoBar"), wxRIBBON_BUTTON_NORMAL);
    }
    bars_bar_other->Realize();

    auto pg_other = new wxRibbonPage(m_rbnBar, wxID_ANY, wxString::FromUTF8("Other"));

    auto panel_editors = new wxRibbonPanel(pg_other, wxID_ANY, wxString::FromUTF8("Editors"));

    auto other_bar_editors = new wxRibbonToolBar(panel_editors, wxID_ANY);
    {
        other_bar_editors->AddTool(gen_wxRichTextCtrl, wxImage(richtextctrl_xpm), wxString::FromUTF8("wxRichTextCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_editors->AddTool(gen_wxStyledTextCtrl, wxImage(scintilla_xpm), wxString::FromUTF8("wxStyledTextCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_editors->AddTool(gen_wxGrid, wxImage(grid_xpm), wxString::FromUTF8("wxGrid"), wxRIBBON_BUTTON_NORMAL);
    }
    other_bar_editors->Realize();

    auto panel_controls = new wxRibbonPanel(pg_other, wxID_ANY, wxString::FromUTF8("Controls"));

    auto other_bar_ctrls = new wxRibbonToolBar(panel_controls, wxID_ANY);
    {
        other_bar_ctrls->AddTool(gen_wxHyperlinkCtrl, wxImage(hyperlink_ctrl_xpm), wxString::FromUTF8("wxHyperlinkCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_ctrls->AddTool(gen_wxSearchCtrl, wxImage(search_xpm), wxString::FromUTF8("wxSearchCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_ctrls->AddTool(gen_wxCalendarCtrl, wxImage(calendar_xpm), wxString::FromUTF8("wxCalendarCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_ctrls->AddTool(gen_wxFileCtrl, wxImage(wxFileCtrl_xpm), wxString::FromUTF8("wxFileCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_ctrls->AddTool(gen_wxGenericDirCtrl, wxImage(genericdir_ctrl_xpm), wxString::FromUTF8("wxGenericDirCtrl"), wxRIBBON_BUTTON_NORMAL);
        other_bar_ctrls->AddTool(gen_wxActivityIndicator, wxImage(wxActivityIndicator_xpm), wxString::FromUTF8("wxActivityIndicator"), wxRIBBON_BUTTON_NORMAL);
        other_bar_ctrls->AddTool(gen_wxBannerWindow, wxImage(wxBannerWindow_xpm), wxString::FromUTF8("wxBannerWindow"), wxRIBBON_BUTTON_NORMAL);
    }
    other_bar_ctrls->Realize();

    auto panel_html = new wxRibbonPanel(pg_other, wxID_ANY, wxString::FromUTF8("HTML"));

    auto other_bar_html = new wxRibbonToolBar(panel_html, wxID_ANY);
    {
        other_bar_html->AddTool(gen_wxHtmlWindow, wxImage(htmlwin_xpm), wxString::FromUTF8("wxHtmlWindow"), wxRIBBON_BUTTON_NORMAL);
    }
    other_bar_html->Realize();
    m_rbnBar->Realize();

    SetSizerAndFit(parent_sizer);

    // Event handlers
    forms_bar_windows->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    forms_bar_wizard->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    forms_bar_bars->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    sizer_bar_basic->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    sizer_bar_basic->Bind(wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, &RibbonPanelBase::OnDropDown, this);
    sizer_bar_grids->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    sizer_bar_other->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    common_bar_controls->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    common_bar_controls->Bind(wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, &RibbonPanelBase::OnDropDown, this);
    common_bar_choices->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    common_bar_choices->Bind(wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, &RibbonPanelBase::OnDropDown, this);
    common_bar_pickers->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    common_bar_other->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    container_bar_windows->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    container_bar_books->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    container_bar_page->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    data_bar_properties->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    data_bar_trees->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    data_bar_dataview->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    data_bar_dataview->Bind(wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, &RibbonPanelBase::OnDropDown, this);
    bars_bar_menu->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    bars_bar_tool->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    bars_bar_ribbon->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    bars_bar_ribbon->Bind(wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED, &RibbonPanelBase::OnDropDown, this);
    bars_bar_other->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    other_bar_editors->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    other_bar_ctrls->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
    other_bar_html->Bind(wxEVT_RIBBONTOOLBAR_CLICKED, &RibbonPanelBase::OnToolClick, this);
}
