/////////////////////////////////////////////////////////////////////////////
// Purpose:   Generate Python code files
// Author:    Ralph Walden
// Copyright: Copyright (c) 2022-2025 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "pch.h"
#include <wx/artprov.h>

#include <set>
#include <thread>

#include "gen_python.h"

#include "base_generator.h"   // BaseGenerator -- Base widget generator class
#include "code.h"             // Code -- Helper class for generating code
#include "file_codewriter.h"  // FileCodeWriter -- Classs to write code to disk
#include "gen_common.h"       // Common component functions
#include "gen_timer.h"        // TimerGenerator class
#include "image_gen.h"        // Functions for generating embedded images
#include "image_handler.h"    // ImageHandler class
#include "node.h"             // Node class
#include "project_handler.h"  // ProjectHandler class
#include "tt_view_vector.h"   // tt_view_vector -- Read/Write line-oriented strings/files
#include "utils.h"            // Miscellaneous utilities
#include "write_code.h"       // Write code to Scintilla or file

#include "../customprops/eventhandler_dlg.h"  // EventHandlerDlg static functions

using namespace code;
using namespace GenEnum;

// clang-format off

inline constexpr const auto txt_PoundCmtBlock =
R"===(###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

)===";

// clang-format on

extern std::string_view python_perl_ruby_end_cmt_line;  // "# ************* End of generated code"

const char* python_triple_quote = "\"\"\"";

static void GatherImportModules(std::set<std::string>& imports, Node* node)
{
    if (auto* gen = node->get_Generator(); gen)
    {
        gen->GetPythonImports(node, imports);
    }
    for (auto& child: node->get_ChildNodePtrs())
    {
        GatherImportModules(imports, child.get());
    }
}

PythonCodeGenerator::PythonCodeGenerator(Node* form_node) :
    BaseCodeGenerator(GEN_LANG_PYTHON, form_node)
{
}

void PythonCodeGenerator::GenerateClass(PANEL_PAGE panel_type)
{
    Code code(m_form_node, GEN_LANG_PYTHON);

    m_embedded_images.clear();
    SetImagesForm();
    std::set<std::string> img_include_set;
    m_baseFullPath = MakePythonPath(m_form_node);

    std::thread thrd_get_events(&PythonCodeGenerator::CollectEventHandlers, this, m_form_node,
                                std::ref(m_events));
    std::thread thrd_collect_img_headers(&PythonCodeGenerator::CollectImageHeaders, this,
                                         m_form_node, std::ref(img_include_set));

    // If the code files are being written to disk, then UpdateEmbedNodes() has already been called.
    if (panel_type != NOT_PANEL)
    {
        ProjectImages.UpdateEmbedNodes();
    }

    std::vector<Node*> forms;
    Project.CollectForms(forms);

    m_panel_type = panel_type;

    m_header->Clear();
    m_source->Clear();
    m_source->SetLastLineBlank();

    if (m_panel_type == NOT_PANEL)
    {
        m_source->writeLine(txt_PoundCmtBlock);
        // Python style guidelines want a module document string
        m_source->writeLine("\"\"\"" + m_form_node->as_string(prop_class_name) +
                            " class generated by wxUiEditor.\"\"\"");
        m_source->writeLine();
    }

    if (Project.HasValue(prop_python_project_preamble))
    {
        WritePropSourceCode(Project.get_ProjectNode(), prop_python_project_preamble);
    }

    if (!m_form_node->is_Gen(gen_Images))
        m_source->writeLine("import wx\n");

    if (m_form_node->is_Gen(gen_Images))
    {
        thrd_get_events.join();
        try
        {
            thrd_collect_img_headers.join();
        }
        catch (const std::system_error& err)
        {
#if defined(_DEBUG)
            MSG_ERROR(err.what());
#else
            wxMessageDialog dlg_error(nullptr, wxString::FromUTF8(err.what()),
                                      "Internal Thread Error", wxICON_ERROR | wxOK);
            dlg_error.ShowModal();
#endif  // _DEBUG
        }

        GenerateImagesForm();
        return;
    }

    m_header->writeLine(tt_string("# Sample inherited class from ")
                        << m_form_node->as_string(prop_class_name));
    m_header->writeLine();
    m_header->writeLine("import wx");

    std::set<std::string> imports;
    GatherImportModules(imports, m_form_node);

    for (const auto& import: imports)
    {
        m_source->writeLine(import);
        m_header->writeLine(import);
    }

    if (m_form_node->HasValue(prop_python_import_list))
    {
        tt_string_vector list;
        list.SetString(m_form_node->as_string(prop_python_import_list));
        for (auto& iter: list)
        {
            if (!iter.starts_with("import "))
            {
                iter.remove_extension();
                m_source->writeLine(tt_string("import ") << iter);
            }
            else
            {
                m_source->writeLine(iter);
            }
        }
        if (list.size())
        {
            m_source->writeLine();
        }
    }

    m_set_enum_ids.clear();
    m_set_const_ids.clear();
    BaseCodeGenerator::CollectIDs(m_form_node, m_set_enum_ids, m_set_const_ids);
    // set to highest wx
    auto id_value = 1;
    for (auto& iter: m_set_enum_ids)
    {
        if (!iter.starts_with("self."))
        {
            m_source->writeLine(tt_string() << iter << " = wx.ID_HIGHEST + " << id_value++);
        }
    }
    for (auto& iter: m_set_const_ids)
    {
        if (!iter.starts_with("self."))
        {
            if (tt::contains(iter, " wx"))
            {
                tt_string id = iter;
                id.Replace(" wx", " wx.", true, tt::CASE::exact);
                m_source->writeLine(id);
            }
            else
            {
                m_source->writeLine(iter);
            }
        }
    }

    try
    {
        thrd_collect_img_headers.join();
    }
    catch (const std::system_error& err)
    {
#if defined(_DEBUG)
        MSG_ERROR(err.what());
#else
        wxMessageDialog dlg_error(nullptr, wxString::FromUTF8(err.what()), "Internal Thread Error",
                                  wxICON_ERROR | wxOK);
        dlg_error.ShowModal();
#endif  // _DEBUG
    }

    if (m_embedded_images.size())
    {
        WriteImageImportStatements(code);
    }

    m_source->writeLine();
    m_header->writeLine();
    m_header->writeLine(tt_string("import ") << m_form_node->as_string(prop_python_file) << "\n");
    m_header->writeLine();

    if (m_form_node->HasValue(prop_python_insert))
    {
        tt_string convert(m_form_node->as_string(prop_python_insert));
        convert.Replace("@@", "\n", tt::REPLACE::all);
        tt_string_vector lines(convert, '\n', tt::TRIM::right);
        for (auto& line: lines)
        {
            m_source->doWrite(line);
            m_source->doWrite("\n");
        }
        m_source->doWrite("\n");
    }

    tt_string inherit_name = m_form_node->as_string(prop_python_inherit_name);
    if (inherit_name.empty())
    {
        inherit_name += "inherit_" + m_form_node->as_string(prop_class_name);
    }
    if (inherit_name.size())
    {
        tt_string inherit("class ");
        inherit << inherit_name << "(";
        inherit << m_form_node->as_string(prop_python_file) << "."
                << m_form_node->as_string(prop_class_name) << "):";

        m_header->writeLine(inherit);
        m_header->Indent();
        m_header->writeLine("def __init__(self, parent):");
        m_header->writeLine("super().__init__(parent)");
        m_header->Unindent();
        m_header->writeLine();
    }

    auto generator = m_form_node->get_NodeDeclaration()->get_Generator();
    code.clear();
    if (generator->ConstructionCode(code))
    {
        m_source->writeLine(code);
        m_source->writeLine();
        m_source->Indent();
        m_source->Indent();

        id_value = 1;
        for (auto& iter: m_set_enum_ids)
        {
            if (iter.starts_with("self."))
            {
                m_source->writeLine(tt_string() << iter << " = wx.ID_HIGHEST + " << id_value++);
            }
        }
        if (id_value > 1)
        {
            // If at least one id was set, add a blank line
            m_source->writeLine();
        }
    }

    code.clear();
    if (generator->SettingsCode(code))
    {
        if (code.size())
        {
            m_source->writeLine(code);
            m_source->writeLine();
        }
    }

    if (m_form_node->get_PropPtr(prop_window_extra_style))
    {
        code.clear();
        code.GenWindowSettings();
        if (code.size())
        {
            m_source->writeLine(code);
        }
    }

    m_source->SetLastLineBlank();
    for (const auto& child: m_form_node->get_ChildNodePtrs())
    {
        if (child->is_Gen(gen_wxContextMenuEvent))
            continue;
        GenConstruction(child.get());
    }

    code.clear();
    if (generator->AfterChildrenCode(code))
    {
        if (code.size())
        {
            m_source->writeLine();
            m_source->writeLine(code);
        }
    }

    // TODO: [Randalphwa - 12-04-2022] Python supports persistence, though it's not as easy as it is
    // in C++. See
    // https://docs.wxpython.org/wx.lib.agw.persist.html?highlight=persist#module-wx.lib.agw.persist

    // Timer code must be created before the events, otherwise the timer variable won't exist
    // when the event is created.

    code.clear();
    if (TimerGenerator::StartIfChildTimer(m_form_node, code))
    {
        m_source->writeLine(code);
        m_source->writeLine();
    }

    // Delay calling join() for as long as possible to increase the chance that the thread will
    // have already completed.
    thrd_get_events.join();
    if (m_events.size())
    {
        m_source->writeLine();
        m_source->writeLine("# Bind Event handlers");
        GenSrcEventBinding(m_form_node, m_events);
        m_source->ResetIndent();
        m_source->writeLine();
        m_source->Indent();
        GenUnhandledEvents(m_events);
    }

    if (m_form_node->is_Gen(gen_wxWizard))
    {
        code.clear();
        code.Eol().Str("# Add the following below the comment block to add a simple");
        code.Eol().Str("# Run() function to launch the wizard").Eol().Str(python_triple_quote);
        code.Eol().Str("def Run(self):");
        code.Tab().Str("return self.RunWizard(self.GetPageAreaSizer().GetItem(0).GetWindow())");
        code.Eol().Str(python_triple_quote).Eol().Eol();
        m_source->writeLine(code);
    }

    // Make certain indentation is reset after all construction code is written
    m_source->ResetIndent();
    m_header->ResetIndent();

    std::sort(m_embedded_images.begin(), m_embedded_images.end(),
              [](const EmbeddedImage* a, const EmbeddedImage* b)
              {
                  return (a->base_image().array_name.compare(b->base_image().array_name) < 0);
              });
}

void PythonCodeGenerator::GenerateImagesForm()
{
    if (m_embedded_images.empty() || !m_form_node->get_ChildCount())
    {
        return;
    }

    m_source->writeLine();
    m_source->writeLine("from wx.lib.embeddedimage import PyEmbeddedImage");

    Code code(m_form_node, GEN_LANG_PYTHON);

    for (auto iter_array: m_embedded_images)
    {
        if (iter_array->get_Form() != m_form_node)
            continue;

        if (iter_array->base_image().filename.size())
        {
            code.Eol().Str("# ").Str(iter_array->base_image().filename);
        }
        code.Eol().Str(iter_array->base_image().array_name);
        if (iter_array->base_image().type == wxBITMAP_TYPE_SVG)
        {
            code.Str(" = (");
        }
        else
        {
            code.Str(" = PyEmbeddedImage(");
        }

        m_source->writeLine(code);
        code.clear();
        auto encoded =
            base64_encode(iter_array->base_image().array_data.get(),
                          iter_array->base_image().array_size & 0xFFFFFFFF, GEN_LANG_PYTHON);
        if (encoded.size())
        {
            encoded.back() += ")";
            m_source->writeLine(encoded);
        }
    }

    m_source->writeLine();
}

void PythonCodeGenerator::WriteImageImportStatements(Code& code)
{
    ASSERT_MSG(m_embedded_images.size(),
               "CheckMimeBase64Requirement() should only be called if there are embedded images");
    if (m_embedded_images.empty())
    {
        return;
    }
    m_source->writeLine();

    // First see if we need to import the gen_Images List
    bool images_file_imported = false;
    bool svg_import_libs = false;
    for (auto& iter: m_embedded_images)
    {
        if (iter->get_Form() == m_ImagesForm)
        {
            if (!images_file_imported)
            {
                tt_string import_name = iter->get_Form()->as_string(prop_python_file).filename();
                import_name.remove_extension();
                code.Str("import ").Str(import_name);
                m_source->writeLine(code);
                code.clear();
                images_file_imported = true;
            }
            if (iter->base_image().type == wxBITMAP_TYPE_SVG)
            {
                m_source->writeLine("import zlib");
                m_source->writeLine("import base64");
                svg_import_libs = true;
            }
        }
        else if (!svg_import_libs)
        {
            if (iter->base_image().type == wxBITMAP_TYPE_SVG)
            {
                m_source->writeLine("import zlib");
                m_source->writeLine("import base64");
                svg_import_libs = true;
            }
        }
    }

    // Now write any embedded images that are declared in a different form
    bool blank_line_seen = false;
    for (auto& iter: m_embedded_images)
    {
        if (iter->get_Form() != m_ImagesForm && iter->get_Form() != m_form_node)
        {
            if (!blank_line_seen)
            {
                m_source->writeLine();
                blank_line_seen = true;
            }
            if (iter->get_Form()->as_string(prop_python_file).filename().empty())
            {
                code.AddComment(tt_string("No filename specified for ")
                                    << iter->get_Form()->get_FormName() << " which contains "
                                    << iter->base_image().array_name,
                                true);
                code += "# ";
            }
            code.Str("from ")
                .Str(iter->get_Form()->as_string(prop_python_file).filename())
                .Str(" import ");
            code.Str(iter->base_image().array_name);
            m_source->writeLine(code);
            code.clear();
        }
    }

    // Now write any embedded images that aren't declared in the gen_Images List
    for (auto& iter: m_embedded_images)
    {
        // Only write the images that aren't declared in any gen_Images List. Note that
        // this *WILL* result in duplicate images being written to different forms.
        if (iter->get_Form() == m_form_node)
        {
            // This will be true if an image was declared in a different form
            if (blank_line_seen)
            {
                m_source->writeLine();
            }
            m_source->writeLine("from wx.lib.embeddedimage import PyEmbeddedImage");
            WriteImageConstruction(code);
            break;
        }
    }
}

void PythonCodeGenerator::GenUnhandledEvents(EventVector& events)
{
    ASSERT_MSG(events.size(), "GenUnhandledEvents() shouldn't be called if there are no events");
    if (events.empty())
    {
        return;
    }

    // Multiple events can be bound to the same function, so use a set to make sure we only generate
    // each function once.
    std::unordered_set<std::string> code_lines;

    Code code(m_form_node, GEN_LANG_PYTHON);
    auto sort_event_handlers = [](NodeEvent* a, NodeEvent* b)
    {
        return (EventHandlerDlg::GetPythonValue(a->get_value()) <
                EventHandlerDlg::GetPythonValue(b->get_value()));
    };

    // Sort events by function name
    std::sort(events.begin(), events.end(), sort_event_handlers);

    bool inherited_class = m_form_node->HasValue(prop_python_inherit_name);
    if (!inherited_class)
    {
        m_header->Indent();
    }
    else
    {
        m_header->Unindent();
        m_header->writeLine();
    }

    bool found_user_handlers = false;
    if (m_panel_type == NOT_PANEL)
    {
        tt_view_vector org_file;
        auto [path, has_base_file] = Project.GetOutputPath(m_form_node, GEN_LANG_PYTHON);

        if (has_base_file && path.extension().empty())
        {
            path += ".py";
        }

        // If the user has defined any event handlers, add them to the code_lines set so we
        // don't generate them again.
        if (has_base_file && org_file.ReadFile(path))
        {
            size_t line_index;
            for (line_index = 0; line_index < org_file.size(); ++line_index)
            {
                if (org_file[line_index].is_sameprefix(python_perl_ruby_end_cmt_line))
                {
                    break;
                }
            }
            for (++line_index; line_index < org_file.size(); ++line_index)
            {
                auto def = org_file[line_index].view_nonspace();
                if (org_file[line_index].view_nonspace().starts_with("def "))
                {
                    code_lines.emplace(def);
                    found_user_handlers = true;
                }
            }
        }
    }

    bool is_all_events_implemented = true;
    if (found_user_handlers)
    {
        for (auto& event: events)
        {
            auto python_handler = EventHandlerDlg::GetPythonValue(event->get_value());
            // Ignore lambda's
            if (python_handler.starts_with("[python:lambda]"))
                continue;

            tt_string set_code;
            // If the user doesn't use the `event` parameter, they may use '_' instead to indicate
            // an unused parameter.
            set_code << "def " << python_handler << "(self, _):";
            if (code_lines.find(set_code) != code_lines.end())
                continue;
            set_code << "def " << python_handler << "(self, event):";
            if (code_lines.find(set_code) != code_lines.end())
                continue;

            // At least one event wasn't implemented, so stop looking for more
            is_all_events_implemented = false;

            code.Str("# Unimplemented Event handler functions\n# Copy any listed and paste them "
                     "below the comment block, or "
                     "to your inherited class.");
            code.Eol().Str(python_triple_quote).Eol();
            break;
        }
        if (is_all_events_implemented)
        {
            // If the user has defined all the event handlers, then we don't need to output anything
            // else.
            return;
        }
    }
    else
    {
        // The user hasn't defined their own event handlers in this module
        is_all_events_implemented = false;

        code.Str("# Event handler functions\n# Add these below the comment block, or to your "
                 "inherited class.");
        code.Eol().Str(python_triple_quote).Eol();
    }
    m_source->writeLine(code);

    code.clear();
    if (!is_all_events_implemented)
    {
        for (auto& event: events)
        {
            auto python_handler = EventHandlerDlg::GetPythonValue(event->get_value());
            // Ignore lambda's
            if (python_handler.empty() || python_handler.starts_with("[python:lambda]"))
                continue;

            tt_string set_code;
            // If the user doesn't use the `event` parameter, they may use '_' instead to indicate
            // an unused parameter.
            set_code << "def " << python_handler << "(self, _):";
            if (code_lines.find(set_code) != code_lines.end())
                continue;
            set_code.Replace("_)", "event)");
            if (code_lines.find(set_code) != code_lines.end())
                continue;
            code_lines.emplace(set_code);

            code.Str(set_code).Eol();
#if defined(_DEBUG)
            auto& dbg_event_name = event->get_name();
            wxUnusedVar(dbg_event_name);
#endif  // _DEBUG
            if (event->get_name() == "CloseButtonClicked")
            {
                code.Tab().Str("self.EndModal(wx.ID_CLOSE)").Eol().Eol();
            }
            else if (event->get_name() == "YesButtonClicked")
            {
                code.Tab().Str("self.EndModal(wx.ID_YES)").Eol().Eol();
            }
            else if (event->get_name() == "NoButtonClicked")
            {
                code.Tab().Str("self.EndModal(wx.ID_NO)").Eol().Eol();
            }
            else
            {
                code.Tab().Str("event.Skip()").Eol().Eol();
            }
        }
    }

    if (found_user_handlers && !is_all_events_implemented)
    {
        m_header->writeLine("# Unimplemented Event handler functions");
    }
    else
    {
        m_header->writeLine("# Event handler functions");
    }
    m_header->writeLine(code);

    if (!inherited_class)
    {
        m_header->Unindent();
    }

    if (!is_all_events_implemented)
    {
        code.Eol(eol_if_needed).Str(python_triple_quote).Eol().Eol();
        m_source->writeLine(code);
    }
}

bool PythonBitmapList(Code& code, GenEnum::PropName prop)
{
    auto& description = code.node()->as_string(prop);
    ASSERT_MSG(description.size(), "PythonBitmapList called with empty description");
    tt_view_vector parts(description, BMP_PROP_SEPARATOR, tt::TRIM::both);

    if (parts[IndexImage].empty() || parts[IndexType].contains("Art") ||
        parts[IndexType].contains("SVG"))
    {
        return false;
    }

    auto bundle = ProjectImages.GetPropertyImageBundle(description);

    if (!bundle || bundle->lst_filenames.size() < 3)
    {
        return false;
    }

    bool is_xpm = (parts[IndexType].is_sameas("XPM"));
    auto path = MakePythonPath(code.node());

    code += "bitmaps = [ ";
    bool needs_comma = false;
    for (auto& iter: bundle->lst_filenames)
    {
        if (needs_comma)
        {
            code.UpdateBreakAt();
            code.Comma(false).Eol().Tab(3);
        }

        bool is_embed_success = false;
        if (parts[IndexType].starts_with("Embed"))
        {
            if (auto embed = ProjectImages.GetEmbeddedImage(iter); embed)
            {
                code.AddPythonImageName(embed);
                code += ".Bitmap";
                needs_comma = true;
                is_embed_success = true;
            }
        }

        if (!is_embed_success)
        {
            tt_string name(iter);
            name.make_absolute();
            name.make_relative(path);
            name.backslashestoforward();

            code.Str("wx.Bitmap(").QuotedString(name);
            if (is_xpm)
                code.Comma().Str("wx.BITMAP_TYPE_XPM");
            code += ")";
            needs_comma = true;
        }
    }
    code += " ]\n";
    code.UpdateBreakAt();

    return true;
}

struct BTN_BMP_TYPES
{
    GenEnum::PropName prop_name;
    const char* function_name;
};

inline const BTN_BMP_TYPES btn_bmp_types[] = {
    { prop_bitmap, "SetBitmap" },
    { prop_disabled_bmp, "SetBitmapDisabled" },
    { prop_pressed_bmp, "SetBitmapPressed" },
    { prop_focus_bmp, "SetBitmapFocus" },
    { prop_current, "SetBitmapCurrent" },
};

void PythonBtnBimapCode(Code& code, bool is_single)
{
    for (auto& iter: btn_bmp_types)
    {
        code.Eol(eol_if_needed);
        if (code.HasValue(iter.prop_name))
        {
            code.Eol(eol_if_needed);
            if (PythonBitmapList(code, iter.prop_name))
            {
                code.Eol(eol_if_needed).NodeName().Function(iter.function_name) << '(';
                code += "wx.BitmapBundle.FromBitmaps(bitmaps)";
            }
            else
            {
                code.Eol(eol_if_needed).NodeName().Function(iter.function_name) << '(';
                code.Bundle(iter.prop_name);
            }
            code.EndFunction();
        }
        if (is_single)
        {
            // Means the caller only wants prop_bitmap
            break;
        }
    }
}

tt_string MakePythonPath(Node* node)
{
    auto [path, has_base_file] = Project.GetOutputPath(node->get_Form(), GEN_LANG_PYTHON);

    if (path.empty())
        path = "./";
    else if (has_base_file)
        path.remove_filename();
    return path;
}
