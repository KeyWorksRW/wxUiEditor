inline const char* project_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="CMake" type="interface">
		<property name="generate_cmake" type="bool"
			help="If checked, this will auto-generate a .cmake file whenever the Generate Base Code command is chosen.">0</property>
		<property name="cmake_file" type="file"
			help="The filename of the cmake file to create. By default, this will be created in the same directory as the project file.">wxui_code.cmake</property>
		<property name="cmake_varname" type="string"
			help="The variable name to set in the .cmake file. This will contain paths to every generated class.">wxue_generated_code</property>
	</gen>

	<gen class="Code" type="interface">
		<property name="base_directory" type="path"
			help="The generated base class output directory. If a form's base_file contains only a filename (without a path), the files will be generated in this directory. Leave blank to generate the in the same directory as the project file." />
		<property name="derived_directory" type="path"
			help="The generated derived class output directory. Leave blank to generate them in the same directory as the project file." />
		<property name="python_directory" type="path"
			help="The directory to generate python files in. Leave blank to generate them in the same directory as the project file." />
		<property name="lua_directory" type="path"
			help="The directory to generate lua files in. Leave blank to generate them in the same directory as the project file." />
		<property name="php_directory" type="path"
			help="The directory to generate php files in. Leave blank to generate them in the same directory as the project file." />
		<property name="xrc_directory" type="path"
			help="The directory to generate xrc files in. Leave blank to generate them in the same directory as the project file." />
		<property name="source_ext" type="option" help="Specifies the file extension to use when creating C++ source files.">
			<option name=".cpp" />
			<option name=".cc" />
			<option name=".cxx" />
			.cpp
		</property>
		<property name="header_ext" type="option" help="Specifies the file extension to use when creating C++ header files.">
			<option name=".h" />
			<option name=".hh" />
			<option name=".hpp" />
			<option name=".hxx" />
			.h
		</property>
		<property name="wxWidgets_version" type="option" help="If you specify a control or property that requires a wxWidgets version later than this number, then the code will be generated within a conditional block.">
			<option name="3.1" />
			<option name="3.2.0" />
			3.1
		</property>
	</gen>

	<gen class="XRC" type="interface">
		<property name="combine_all_forms" type="bool"
			help="If checked, Export XRC (File menu) will create a single XRC file containing all forms.">1</property>
		<property name="combined_xrc_file" type="file"
			help="This filename will be used to write all XRC content to unless you unchecked the combine_all_forms property above." />
		<property name="xrc_art_directory" type="path"
			help="The directory containing the images your XRC file will load." />
	</gen>

	<gen class="Project" type="project" image="project">
		<inherits class="CMake" />
		<inherits class="Code" />
		<inherits class="XRC" />
		<property name="local_pch_file" type="file"
			help="The filename of a local precompiled header file. The file will be included in quotes." />
		<property name="src_preamble" type="code_edit"
			help="Code to generate at the top of the source file after the inclusion of any local precompiled header file. This can include header files, comments, macros, etc." />
		<property name="art_directory" type="path"
			help="The directory containing your images (png, ico, xpm, etc.)." />
		<property name="internationalize" type="bool"
			help="Wrap strings in a _() macro which expands into a call to wxGetTranslation().">0</property>
		<property name="help_provider" type="option"
			help="The class of help provider to use for context-sensitive help.">
			<option name="none"
				help="No support for context-sensitive help." />
			<option name="wxSimpleHelpProvider"
				help="Use wxSimpleHelpProvider to provide context-sensitive help." />
			<option name="wxHelpControllerHelpProvider"
				help="Use wxHelpControllerHelpProvider to provide context-sensitive help." />
			none
		</property>
		<property name="name_space" type="string"
			help="Namespace to enclose class declarations in. Separate nested namespaces with a double colon (e.g. company::app::subname)" />
	</gen>
</GeneratorDefinitions>)===";
