inline const char* trees_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="wxTreeCtrl" image="tree_ctrl" type="widget">
		<inherits class="wxTreeCtrlBase" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_treeCtrl</property>
		<property name="style" type="bitlist">
			<option name="wxTR_EDIT_LABELS"
				help="Use this style if you wish the user to be able to edit labels in the tree control." />
			<option name="wxTR_NO_BUTTONS"
				help="For convenience to document that no buttons are to be drawn." />
			<option name="wxTR_HAS_BUTTONS"
				help="Use this style to show + and - buttons to the left of parent items." />
			<option name="wxTR_TWIST_BUTTONS"
				help="Selects alternative style of +/- buttons and shows rotating (&quot;twisting&quot;) arrows instead. Currently this style is only implemented under Microsoft Windows Vista and later Windows versions and is ignored under the other platforms. Notice that under Vista this style results in the same appearance as used by the tree control in Explorer and other built-in programs and so using it may be preferable to the default style." />
			<option name="wxTR_NO_LINES"
				help="Use this style to hide vertical level connectors." />
			<option name="wxTR_FULL_ROW_HIGHLIGHT"
				help="Use this style to have the background colour and the selection highlight extend over the entire horizontal row of the tree control window. (This flag is ignored under Windows unless you specify wxTR_NO_LINES as well.)" />
			<option name="wxTR_LINES_AT_ROOT"
				help="Use this style to show lines between root nodes. Only applicable if wxTR_HIDE_ROOT is set and wxTR_NO_LINES is not set." />
			<option name="wxTR_HIDE_ROOT"
				help="Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes." />
			<option name="wxTR_ROW_LINES"
				help="Use this style to draw a contrasting border between displayed rows." />
			<option name="wxTR_HAS_VARIABLE_ROW_HEIGHT"
				help="Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset. Generic only." />
			<option name="wxTR_SINGLE"
				help="For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default." />
			<option name="wxTR_MULTIPLE"
				help="Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected." />
			<option name="wxTR_DEFAULT_STYLE"
				help="The set of flags that are closest to the defaults for the native control for a particular toolkit." />
			wxTR_DEFAULT_STYLE
		</property>
		<event name="wxEVT_TREE_GET_INFO" class="wxTreeEvent"
			help="Request information from the application." />
		<event name="wxEVT_TREE_SET_INFO" class="wxTreeEvent"
			help="Information is being supplied." />
		<event name="wxEVT_TREE_ITEM_GETTOOLTIP" class="wxTreeEvent"
			help="The opportunity to set the item tooltip is being given to the application (call wxTreeEvent::SetToolTip). Windows only." />
		<event name="wxEVT_TREE_STATE_IMAGE_CLICK" class="wxTreeEvent"
			help="The state image has been clicked. Windows only." />
	</gen>

	<gen class="wxTreeListCtrl" image="treelistctrl" type="treelistctrl">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_treeListCtrl</property>
		<property name="style" type="bitlist">
			<option name="wxTL_SINGLE"
				help="Single selection, this is the default." />
			<option name="wxTL_MULTIPLE"
				help="Allow multiple selection." />
			<option name="wxTL_CHECKBOX"
				help="Show the usual, 2 state, checkboxes for the items in the first column." />
			<option name="wxTL_3STATE"
				help="Show the checkboxes that can possibly be set by the program, but not the user, to a third, undetermined, state, for the items in the first column. Implies wxTL_CHECKBOX." />
			<option name="wxTR_TWIST_BUTTONS"
				help="Selects alternative style of +/- buttons and shows rotating (&quot;twisting&quot;) arrows instead. Currently this style is only implemented under Microsoft Windows Vista and later Windows versions and is ignored under the other platforms. Notice that under Vista this style results in the same appearance as used by the tree control in Explorer and other built-in programs and so using it may be preferable to the default style." />
			<option name="wxTL_USER_3STATE"
				help="Same as wxTL_3STATE but the user can also set the checkboxes to the undetermined state. Implies wxTL_3STATE." />
			<option name="wxTL_DEFAULT_STYLE"
				help="Style used by the control by default, just wxTL_SINGLE currently." />
			wxTL_DEFAULT_STYLE
		</property>
		<event name="wxEVT_TREELIST_SELECTION_CHANGED" class="wxTreeListEvent"
			help="In the single selection case the item indicated by the event has been selected and previously selected item, if any, was deselected. In multiple selection case, the selection of this item has just changed (it may have been either selected or deselected) but notice that the selection of other items could have changed as well, use wxTreeListCtrl::GetSelections() to retrieve the new selection if necessary." />
		<event name="wxEVT_TREELIST_ITEM_EXPANDING" class="wxTreeListEvent"
			help="This event is sent before the expansion occurs and can be vetoed to prevent it from happening." />
		<event name="wxEVT_TREELIST_ITEM_EXPANDED" class="wxTreeListEvent"
			help="This event is sent after the expansion occurs and can't be vetoed." />
		<event name="wxEVT_TREELIST_ITEM_CHECKED" class="wxTreeListEvent"
			help="You can use wxTreeListCtrl::GetCheckedState() to retrieve the new item state and wxTreeListEvent::GetOldCheckedState() to get the previous one." />
		<event name="wxEVT_TREELIST_ITEM_ACTIVATED" class="wxTreeListEvent"
			help="Generated when the user double clicks the item or activating it from the keyboard." />
		<event name="wxEVT_TREELIST_ITEM_CONTEXT_MENU" class="wxTreeListEvent"
			help="" />
		<event name="wxEVT_TREELIST_COLUMN_SORTED" class="wxTreeListEvent"
			help="The event doesn't carry the sort direction, use GetSortColumn() method if you need to know it." />
	</gen>

	<gen class="TreeListCtrlColumn" image="treelistctrlcolumn" type="treelistctrlcolumn">
		<property name="label" type="string_escapes"
			help="The column label.">Column</property>
		<property name="width" type="int"
			help="The width of the column in pixels or the special -2 value indicating that the column should adjust to its contents. Notice that the first column is special and will be always resized to fill all the space not taken by the other columns, i.e. the width specified here is ignored for it.">-2</property>
		<property name="alignment" type="option"
			help="Alignment of both the column header and its items.">
			<option name="wxALIGN_LEFT"
				help="Align the item to the left." />
			<option name="wxALIGN_RIGHT"
				help="Align the item to the right." />
			<option name="wxALIGN_CENTER"
				help="Align the item to the center." />
			wxALIGN_LEFT
		</property>
		<property name="flags" type="bitlist">
			<option name="wxCOL_RESIZABLE"
				help="Column can be resized (included in default flags)." />
			<option name="wxCOL_SORTABLE"
				help="Column can be clicked to toggle the sort order by its contents." />
			<option name="wxCOL_REORDERABLE"
				help="Column can be dragged to change its order (included in default). Currently, this is only implemented in GTK and ignored on other platforms." />
			<option name="wxCOL_HIDDEN"
				help="Column is not shown at all." />
			wxCOL_RESIZABLE
		</property>
	</gen>
</GeneratorDefinitions>)===";
