inline const char* interface_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<!--
	Each interface class can be added to a generator by using <inherits class="name" />. The class name
	will be used as a Category name.
	-->

	<gen class="Window Events" type="interface">
		<category name="Focus Events">
			<event name="wxEVT_KILL_FOCUS" class="wxFocusEvent" />
			<event name="wxEVT_SET_FOCUS" class="wxFocusEvent" />
		</category>
		<category name="General Events">
			<event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent" />
			<event name="wxEVT_ERASE_BACKGROUND" class="wxEraseEvent" />
			<event name="wxEVT_HELP" class="wxHelpEvent" />
			<event name="wxEVT_PAINT" class="wxPaintEvent" />
			<event name="wxEVT_SIZE" class="wxSizeEvent" />
			<event name="wxEVT_UPDATE_UI" class="wxUpdateUIEvent" />
		</category>
		<category name="Keyboard Events">
			<event name="wxEVT_CHAR" class="wxKeyEvent" />
			<event name="wxEVT_CHAR_HOOK" class="wxKeyEvent"
				help="Unlike all the other key events, this event is propagated upwards the window hierarchy which allows intercepting it in the parent window of the focused window to which it is sent initially (if there is no focused window, this event is sent to the wxApp global object). It is also generated before any other key events and so gives the parent window an opportunity to modify the keyboard handling of its children, e.g. it is used internally by wxWidgets in some ports to intercept pressing Esc key in any child of a dialog to close the dialog itself when it's pressed. By default, if this event is handled, i.e. the handler doesn't call wxEvent::Skip(), neither wxEVT_KEY_DOWN nor wxEVT_CHAR events will be generated (although wxEVT_KEY_UP still will be), i.e. it replaces the normal key events. However by calling the special DoAllowNextEvent() method you can handle wxEVT_CHAR_HOOK and still allow normal events generation. This is something that is rarely useful but can be required if you need to prevent a parent wxEVT_CHAR_HOOK handler from running without suppressing the normal key events. Finally notice that this event is not generated when the mouse is captured as it is considered that the window which has the capture should receive all the keyboard events too without allowing its parent wxTopLevelWindow to interfere with their processing." />
			<event name="wxEVT_KEY_DOWN" class="wxKeyEvent"
				help="Generated when any key has been pressed. If this event is handled and not skipped, wxEVT_CHAR will not be generated at all for this key press (but wxEVT_KEY_UP will be)." />
			<event name="wxEVT_KEY_UP" class="wxKeyEvent"
				help="Generated when any key has been released." />
		</category>
		<category name="Mouse Events">
			<event name="wxEVT_ENTER_WINDOW" class="wxMouseEvent" />
			<event name="wxEVT_LEAVE_WINDOW" class="wxMouseEvent" />
			<event name="wxEVT_LEFT_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_LEFT_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_LEFT_UP" class="wxMouseEvent" />
			<event name="wxEVT_MIDDLE_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_MIDDLE_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_MIDDLE_UP" class="wxMouseEvent" />
			<event name="wxEVT_RIGHT_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_RIGHT_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_RIGHT_UP" class="wxMouseEvent" />
			<event name="wxEVT_AUX1_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_AUX1_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_AUX1_UP" class="wxMouseEvent" />
			<event name="wxEVT_AUX2_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_AUX2_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_AUX2_UP" class="wxMouseEvent" />
			<event name="wxEVT_MOTION" class="wxMouseEvent" />
			<event name="wxEVT_MOUSEWHEEL" class="wxMouseEvent" />
		</category>
	</gen>

	<gen class="wxTreeCtrlBase" type="interface">
		<event name="wxEVT_TREE_BEGIN_DRAG" class="wxTreeEvent"
			help="Generated when beginning to drag with the left mouse button." />
		<event name="wxEVT_TREE_BEGIN_RDRAG" class="wxTreeEvent"
			help="Generated when beginning to drag with the right mouse button." />
		<event name="wxEVT_TREE_END_DRAG" class="wxTreeEvent"
			help="Generated when ending dragging with the left or right mouse button." />
		<event name="wxEVT_TREE_BEGIN_LABEL_EDIT" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_END_LABEL_EDIT" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_DELETE_ITEM" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_ACTIVATED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_COLLAPSED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_COLLAPSING" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_ITEM_EXPANDED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_EXPANDING" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_ITEM_RIGHT_CLICK" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_MIDDLE_CLICK" class="wxTreeEvent" />
		<event name="wxEVT_TREE_SEL_CHANGED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_SEL_CHANGING" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_KEY_DOWN" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_MENU" class="wxTreeEvent"
			help="Generated when the context menu for the selected item has been requested, either by a right click or by using the menu key." />
	</gen>

	<gen class="Bitmaps" type="interface">
		<property name="bitmap" type="image"
			help="This is the bitmap shown in the default state. It will also be used for all other bitmaps if they are not explicitly set." />
		<property name="disabled_bmp" type="image"
			help="Bitmap shown when the button is disabled." />
		<property name="pressed_bmp" type="image"
			help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)." />
		<property name="focus_bmp" type="image"
			help="Bitmap shown when the button has keyboard focus but is not pressed." />
		<property name="current" type="image"
			help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for the hover state as well. This makes it possible to set just the focus bitmap to get reasonably good behaviour on all platforms." />
		<property name="position" type="option">
			<option name="" />
			<option name="wxLEFT"
				help="Positions the bitmap at the left" />
			<option name="wxRIGHT"
				help="Positions the bitmap at the right" />
			<option name="wxTOP"
				help="Positions the bitmap at the top" />
			<option name="wxBOTTOM"
				help="Positions the bitmap at the bottom" />
		</property>
		<property name="margins" type="wxSize"
			help="The margins between the bitmap and the text of the button. This is currently only implemented under MSW. If it is not specified, a default margin is used around the bitmap." />
	</gen>

	<!-- wxCommandLink needs a special version because position and margins are not used. -->
	<gen class="Command Bitmaps" type="interface">
		<property name="bitmap" type="image"
			help="This is the bitmap shown in the default state. It will also be used for all other bitmaps if they are not explicitly set." />
		<property name="disabled_bmp" type="image"
			help="Bitmap shown when the button is disabled." />
		<property name="pressed_bmp" type="image"
			help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)." />
		<property name="focus_bmp" type="image"
			help="Bitmap shown when the button has keyboard focus but is not pressed." />
		<property name="current" type="image"
			help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for the hover state as well. This makes it possible to set just the focus bitmap to get reasonably good behaviour on all platforms." />
		<!-- This should work, but fails on Windows 10
		<property name="position" type="option">
			<option name="" />
			<option name="wxLEFT"
				help="Positions the bitmap at the left" />
			<option name="wxRIGHT"
				help="Positions the bitmap at the right" />
			<option name="wxTOP"
				help="Positions the bitmap at the top" />
			<option name="wxBOTTOM"
				help="Positions the bitmap at the bottom" />
		</property>
 		-->
		<!-- This should work, but fails on Windows 10
		<property name="margins" type="wxSize"
			help="The margins between the bitmap and the text of the button. This is currently only implemented under MSW. If it is not specified, a default margin is used around the bitmap." />
 		-->
	</gen>

	<gen class="Dialog Window Settings" type="interface">
		<property name="id" type="id"
			help="An identifier for the dialog.">wxID_ANY</property>
		<property name="pos" type="wxPoint"
			help="Sets the dialog position. The default is (-1, -1) which indicates that wxWidgets should generate a default position for the dialog." />
		<property name="size" type="wxSize"
			help="Sets the dialog size. The default is (-1, -1) which indicates that wxWidgets should generate a default size for the dialog, large enough to display all visible elements." />
		<property name="minimum_size" type="wxSize"
			help="Sets the minimum size of the dialog. The default is (-1, -1) which indicates wxWidgets should calculate a minimum size large enough to display all visible elements." />
		<property name="maximum_size" type="wxSize"
			help="Sets the maximum size of the dialog." />
		<property name="background_colour" type="wxColour"
			help="Sets the background colour of the dialog. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list." />
		<property name="window_name" type="string_escapes"
			help="Used to associate a name with the window, allowing the application user to set Motif resource values for individual dialog boxes." />
		<property name="derived_class" type="string"
			help="If you have derived a class from wxDialog and you want to use your derived class, then specify that class name here. You will need to add the header file for your class to the base_hdr_includes property. Note that your base class must specify a constructor with no parameters to match a wxDialog() constructor." />
	</gen>

</GeneratorDefinitions>)===";
