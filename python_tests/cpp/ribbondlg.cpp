///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/colour.h>
#include <wx/ribbon/buttonbar.h>
#include <wx/ribbon/gallery.h>
#include <wx/ribbon/page.h>
#include <wx/ribbon/panel.h>
#include <wx/settings.h>
#include <wx/sizer.h>

#include "ribbondlg.h"

#include "../art/english.xpm"

#include <wx/mstream.h>  // memory stream classes

// Convert a data array into a wxImage
inline wxImage wxueImage(const unsigned char* data, size_t size_data)
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

bool RibbonDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;
    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    auto* parent_sizer = new wxBoxSizer(wxVERTICAL);

    m_rbnBar = new wxRibbonBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,
        wxRIBBON_BAR_SHOW_PAGE_LABELS|wxRIBBON_BAR_SHOW_PAGE_ICONS|wxRIBBON_BAR_FLOW_HORIZONTAL);

    m_rbnBar->SetArtProvider(new wxRibbonAUIArtProvider);
    parent_sizer->Add(m_rbnBar, wxSizerFlags().Expand().Border(wxALL));

    auto* rbnPage = new wxRibbonPage(m_rbnBar, wxID_ANY, "First");
    m_rbnBar->SetActivePage(rbnPage);

    auto* rbnPanel = new wxRibbonPanel(rbnPage, wxID_ANY, "English", wxImage(english_xpm));

    auto* first_parent_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    m_staticText = new wxStaticText(rbnPanel, wxID_ANY, "This is a sentence in English.");
    m_staticText->Wrap(200);
    box_sizer->Add(m_staticText, wxSizerFlags().Border(wxALL));

    m_btn = new wxButton(rbnPanel, wxID_ANY, "Switch");
    box_sizer->Add(m_btn, wxSizerFlags().Center().Border(wxALL));

    first_parent_sizer->Add(box_sizer, wxSizerFlags(1).Expand().Border(wxALL));
    rbnPanel->SetSizerAndFit(first_parent_sizer);

    auto* rbnPanel_2 = new wxRibbonPanel(rbnPage, wxID_ANY, "French", wxueImage(wxue_img::french_png, sizeof(
        wxue_img::french_png)));
    rbnPanel_2->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));

    auto* first_parent_sizer_2 = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_2 = new wxBoxSizer(wxVERTICAL);

    m_staticText_2 = new wxStaticText(rbnPanel_2, wxID_ANY, wxString::FromUTF8("Ceci est une phrase en français."));
    m_staticText_2->Wrap(200);
    box_sizer_2->Add(m_staticText_2, wxSizerFlags().Border(wxALL));

    m_btn_2 = new wxButton(rbnPanel_2, wxID_ANY, "Switch");
    box_sizer_2->Add(m_btn_2, wxSizerFlags().Center().Border(wxALL));

    first_parent_sizer_2->Add(box_sizer_2, wxSizerFlags(1).Expand().Border(wxALL));
    rbnPanel_2->SetSizerAndFit(first_parent_sizer_2);

    auto* ribbonPage2 = new wxRibbonPage(m_rbnBar, wxID_ANY, "Second");

    auto* ribbonPanel2 = new wxRibbonPanel(ribbonPage2, wxID_ANY, "Button Panel");

    auto* rbnBtnBar = new wxRibbonButtonBar(ribbonPanel2, wxID_ANY);
    {
        rbnBtnBar->AddButton(wxID_ANY, "Forward", wxArtProvider::GetBitmap(wxART_GO_FORWARD, wxART_OTHER), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
        rbnBtnBar->AddButton(wxID_ANY, "Backward", wxueImage(wxue_img::left_png, sizeof(wxue_img::left_png)), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
    }
    rbnBtnBar->Realize();

    auto* ribbonPage_2 = new wxRibbonPage(m_rbnBar, wxID_ANY, "Third");

    auto* ribbonPanel_2 = new wxRibbonPanel(ribbonPage_2, wxID_ANY, "Tool Panel");

    auto* rbnToolBar = new wxRibbonToolBar(ribbonPanel_2, wxID_ANY);
    {
        rbnToolBar->AddTool(wxID_FILE1, wxArtProvider::GetBitmap(wxART_GOTO_FIRST, wxART_TOOLBAR), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
        rbnToolBar->AddTool(wxID_FILE9, wxArtProvider::GetBitmap(wxART_GOTO_LAST, wxART_TOOLBAR), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
    }
    rbnToolBar->Realize();

    auto* ribbonPage_3 = new wxRibbonPage(m_rbnBar, wxID_ANY, "Fourth");

    auto* rbnPanel_3 = new wxRibbonPanel(ribbonPage_3, wxID_ANY, "Gallery Panel");

    auto* rbnGallery = new wxRibbonGallery(rbnPanel_3, wxID_ANY);
    {
        rbnGallery->Append(wxueImage(wxue_img::toggle_button_png, sizeof(wxue_img::toggle_button_png)), wxID_ANY);
    }
    rbnGallery->Realize();

    auto* box_sizer_3 = new wxBoxSizer(wxVERTICAL);

    m_scintilla = new wxStyledTextCtrl(this);
    {
        m_scintilla->SetLexer(wxSTC_LEX_CPP);
        m_scintilla->SetEOLMode(wxSTC_EOL_LF);
        // Sets text margin scaled appropriately for the current DPI on Windows,
        // 5 on wxGTK or wxOSX
        m_scintilla->SetMarginLeft(wxSizerFlags::GetDefaultBorder());
        m_scintilla->SetMarginRight(wxSizerFlags::GetDefaultBorder());
        m_scintilla->SetMarginWidth(1, 0); // Remove default margin
        m_scintilla->SetBackSpaceUnIndents(true);
    }
    box_sizer_3->Add(m_scintilla, wxSizerFlags().Expand().Border(wxALL));

    parent_sizer->Add(box_sizer_3, wxSizerFlags().Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    parent_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(parent_sizer);
    Centre(wxBOTH);

    // Event handlers
    m_btn->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            m_scintilla->ClearAll();  m_scintilla->AddTextRaw("This is a sentence in English.");
        } );
    m_btn_2->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            m_scintilla->ClearAll();  m_scintilla->AddTextRaw("Ceci est une phrase en français.");
        } );

    return true;
}

namespace wxue_img
{

    const unsigned char french_png[252] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,19,0,0,0,15,8,2,0,0,0,137,38,99,123,0,0,0,3,115,66,73,
        84,8,8,8,219,225,79,224,0,0,0,9,112,72,89,115,0,0,10,240,0,0,10,240,1,66,172,52,152,0,0,0,159,73,68,65,84,
        40,207,99,252,252,249,235,239,63,255,254,253,251,207,0,3,108,108,204,44,204,140,12,72,224,255,159,223,255,
        127,255,128,115,25,153,152,25,89,88,89,222,190,251,113,231,254,231,175,223,126,51,252,103,96,96,100,96,96,
        96,208,213,18,18,21,102,135,155,196,200,192,240,247,237,243,95,215,142,48,48,48,48,252,255,207,192,200,200,
        204,205,199,170,168,207,114,255,225,151,101,171,238,62,127,249,13,110,100,126,166,22,63,191,8,178,157,63,239,
        94,252,60,175,28,206,101,17,87,16,136,168,102,98,32,23,140,234,28,213,9,77,149,15,30,190,37,156,110,223,60,
        193,76,183,140,100,231,21,0,198,75,81,253,220,87,197,4,0,0,0,0,73,69,78,68,174,66,96,130
    };

    const unsigned char left_png[158] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,24,0,0,0,24,8,6,0,0,0,224,119,61,248,0,0,0,9,112,72,89,
        115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,80,73,68,65,84,72,199,237,208,193,13,128,48,12,4,193,77,68,73,
        169,201,69,165,38,247,116,60,16,52,128,19,9,116,247,218,151,37,15,252,103,145,34,82,165,13,244,109,15,8,36,
        80,245,221,190,148,218,68,38,50,145,137,76,84,180,227,142,22,121,197,28,60,47,206,209,94,245,86,162,207,238,
        4,125,50,96,158,11,39,216,122,0,0,0,0,73,69,78,68,174,66,96,130
    };

    const unsigned char toggle_button_png[277] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,22,0,0,0,22,8,6,0,0,0,196,180,108,59,0,0,0,9,112,72,89,
        115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,199,73,68,65,84,56,203,99,96,24,5,163,0,29,48,158,191,249,230,
        191,97,212,90,170,26,122,126,89,48,3,35,131,241,204,255,167,119,164,81,213,96,83,143,89,12,76,12,12,12,12,
        127,254,99,199,166,162,140,12,166,162,140,40,124,116,121,116,61,172,76,16,195,89,24,24,24,24,56,153,49,109,
        53,16,102,100,184,240,246,63,6,219,82,12,193,198,166,23,198,199,105,48,186,56,140,125,243,195,127,6,117,1,
        70,134,155,31,254,99,53,152,139,5,201,96,24,7,29,32,139,195,216,184,104,24,32,24,20,184,92,204,201,204,192,
        240,230,251,127,6,17,78,70,172,46,102,65,54,152,3,139,139,191,252,254,207,192,195,202,8,103,195,0,76,45,76,
        158,3,135,111,89,24,24,24,24,216,152,176,75,254,250,251,159,36,62,93,50,200,40,24,5,152,0,0,191,144,85,198,
        46,125,47,182,0,0,0,0,73,69,78,68,174,66,96,130
    };

}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Multiple Tests dialog
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"  // MainFrame -- Main window

void MainFrame::OnRibbonDialog(wxCommandEvent& WXUNUSED(event))
{
    RibbonDlg dlg(this);
    dlg.ShowModal();
}
