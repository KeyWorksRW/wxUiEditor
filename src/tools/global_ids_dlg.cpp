///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/sizer.h>
#include <wx/statbox.h>
#include <wx/stattext.h>

#include "global_ids_dlg.h"

bool GlobalCustomIDS::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_12 = new wxBoxSizer(wxHORIZONTAL);

    auto* box_sizer_13 = new wxBoxSizer(wxVERTICAL);

    auto* staticText = new wxStaticText(this, wxID_ANY, "&Project and Folder Selections");
    box_sizer_13->Add(staticText, wxSizerFlags().Border(wxALL));

    m_lb_folders = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxLB_MULTIPLE);
    m_lb_folders->SetMinSize(FromDIP(wxSize(-1, 200)));
    box_sizer_13->Add(m_lb_folders, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_9 = new wxBoxSizer(wxHORIZONTAL);

    auto* btn = new wxButton(this, wxID_ANY, "All");
    box_sizer_9->Add(btn, wxSizerFlags().Border(wxALL));

    auto* btn_2 = new wxButton(this, wxID_ANY, "None");
    box_sizer_9->Add(btn_2, wxSizerFlags().Border(wxALL));

    box_sizer_13->Add(box_sizer_9, wxSizerFlags().Center().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    box_sizer_12->Add(box_sizer_13, wxSizerFlags(1).Expand().Border(wxALL));

    auto* box_sizer_14 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_2 = new wxStaticText(this, wxID_ANY, "&Form Selections");
    box_sizer_14->Add(staticText_2, wxSizerFlags().Border(wxALL));

    m_lb_forms = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxLB_MULTIPLE|wxLB_SORT);
    m_lb_forms->SetMinSize(FromDIP(wxSize(-1, 200)));
    box_sizer_14->Add(m_lb_forms, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_10 = new wxBoxSizer(wxHORIZONTAL);

    auto* btn_3 = new wxButton(this, wxID_ANY, "All");
    box_sizer_10->Add(btn_3, wxSizerFlags().Border(wxALL));

    auto* btn_4 = new wxButton(this, wxID_ANY, "None");
    box_sizer_10->Add(btn_4, wxSizerFlags().Border(wxALL));

    box_sizer_14->Add(box_sizer_10,
    wxSizerFlags().Center().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    box_sizer_12->Add(box_sizer_14, wxSizerFlags(1).Expand().Border(wxALL));

    dlg_sizer->Add(box_sizer_12, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    auto* static_box_2 = new wxStaticBoxSizer(wxVERTICAL, this, "Custom ID Modifications");

    auto* box_sizer_6 = new wxBoxSizer(wxHORIZONTAL);

    auto* box_sizer_4 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_4 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "&Remove Old Prefix");
    box_sizer_4->Add(staticText_4, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_text_old_prefix = new wxTextCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition,
        wxDefaultSize, wxTE_PROCESS_ENTER);
    box_sizer_4->Add(m_text_old_prefix, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_6 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "&Add New Prefix");
    box_sizer_4->Add(staticText_6, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_combo_prefixes = new wxComboBox(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        0, nullptr, wxCB_DROPDOWN|wxCB_SORT|wxTE_PROCESS_ENTER);
    box_sizer_4->Add(m_combo_prefixes, wxSizerFlags().Expand().Border(wxALL));

    box_sizer_6->Add(box_sizer_4, wxSizerFlags(1).Expand().Border(wxALL));

    auto* box_sizer_5 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_5 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Remove &Old Suffix");
    box_sizer_5->Add(staticText_5, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_text_old_suffix = new wxTextCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition,
        wxDefaultSize, wxTE_PROCESS_ENTER);
    box_sizer_5->Add(m_text_old_suffix, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_7 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Add &New Suffix");
    box_sizer_5->Add(staticText_7, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_combo_suffixes = new wxComboBox(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        0, nullptr, wxCB_DROPDOWN|wxCB_SORT|wxTE_PROCESS_ENTER);
    box_sizer_5->Add(m_combo_suffixes, wxSizerFlags().Expand().Border(wxALL));

    box_sizer_6->Add(box_sizer_5, wxSizerFlags(1).Border(wxALL));

    static_box_2->Add(box_sizer_6, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);

    auto* box_sizer_11 = new wxBoxSizer(wxVERTICAL);

    auto* btn_5 = new wxButton(static_box_2->GetStaticBox(), wxID_ANY, "&Update Preview");
    box_sizer_11->Add(btn_5, wxSizerFlags().Center().Border(wxALL));

    box_sizer_3->Add(box_sizer_11, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    m_btn_commit = new wxButton(static_box_2->GetStaticBox(), wxID_ANY, "&Commit Change");
    box_sizer->Add(m_btn_commit, wxSizerFlags().Border(wxALL));

    box_sizer_3->Add(box_sizer, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    static_box_2->Add(box_sizer_3, wxSizerFlags().Center().Border(wxALL));

    box_sizer_2->Add(static_box_2, wxSizerFlags(1).Expand().Border(wxALL));

    dlg_sizer->Add(box_sizer_2, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto* static_box = new wxStaticBoxSizer(wxVERTICAL, this, "Preview the Changes to Make");

    m_grid = new wxGrid(static_box->GetStaticBox(), wxID_ANY);
    {
        m_grid->CreateGrid(10, 2);
        m_grid->EnableEditing(false);
        m_grid->EnableDragGridSize(false);
        m_grid->SetMargins(0, 0);
        m_grid->SetDefaultCellFitMode(wxGridFitMode::Ellipsize());
        m_grid->SetSelectionMode(wxGrid::wxGridSelectNone);
        m_grid->SetDefaultCellAlignment(wxALIGN_LEFT, wxALIGN_TOP);
        m_grid->SetDefaultColSize(250);
        m_grid->SetColLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
        m_grid->SetColLabelSize(wxGRID_AUTOSIZE);
        m_grid->SetColLabelValue(0, "Original");
        m_grid->SetColLabelValue(1, "Modified");

        m_grid->SetRowLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
        m_grid->HideRowLabels();
    }
    static_box->Add(m_grid, wxSizerFlags(1).Expand().Border(wxALL));

    dlg_sizer->Add(static_box, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto* stdBtn = CreateStdDialogButtonSizer(wxCLOSE|wxNO_DEFAULT);
    stdBtn->GetCancelButton()->SetDefault();
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    m_lb_folders->SetFocus();

    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnClose, this, wxID_CLOSE);
    m_btn_commit->Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnCommit, this);
    btn->Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnSelectAllFolders, this);
    btn_3->Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnSelectAllForms, this);
    btn_2->Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnSelectNoFolders, this);
    btn_4->Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnSelectNoForms, this);
    btn_5->Bind(wxEVT_BUTTON, &GlobalCustomIDS::OnUpdate, this);
    m_combo_prefixes->Bind(wxEVT_COMBOBOX_CLOSEUP, &GlobalCustomIDS::OnUpdate, this);
    m_combo_suffixes->Bind(wxEVT_COMBOBOX_CLOSEUP, &GlobalCustomIDS::OnUpdate, this);
    Bind(wxEVT_INIT_DIALOG, &GlobalCustomIDS::OnInit, this);
    m_lb_folders->Bind(wxEVT_LISTBOX, &GlobalCustomIDS::OnSelectFolders, this);
    m_lb_forms->Bind(wxEVT_LISTBOX, &GlobalCustomIDS::OnSelectForms, this);
    m_combo_prefixes->Bind(wxEVT_TEXT_ENTER, &GlobalCustomIDS::OnUpdate, this);
    m_combo_suffixes->Bind(wxEVT_TEXT_ENTER, &GlobalCustomIDS::OnUpdate, this);
    m_text_old_prefix->Bind(wxEVT_TEXT_ENTER, &GlobalCustomIDS::OnUpdate, this);
    m_text_old_suffix->Bind(wxEVT_TEXT_ENTER, &GlobalCustomIDS::OnUpdate, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////////////////////////////////////////////////////////////////
// Purpose:   Dialog to Globally edit Custom IDs
// Author:    Ralph Walden
// Copyright: Copyright (c) 2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"        // MainFrame -- Main application window
#include "project_handler.h"  // ProjectHandler class
#include "undo_cmds.h"        // Undoable command classes derived from UndoAction

void MainFrame::OnEditCustomIds(wxCommandEvent& WXUNUSED(event))
{
    GlobalCustomIDS dlg(this);
    dlg.ShowModal();
}

void GlobalCustomIDS::OnInit(wxInitDialogEvent& event)
{
    m_lb_folders->Append("Project", Project.getProjectNode());
    for (const auto& iter: Project.getProjectNode()->getChildNodePtrs())
    {
        if (iter->isGen(gen_folder))
        {
            m_lb_folders->Append(iter->as_string(prop_label), iter.get());
        }
        else if (iter->isForm() && iter->hasValue(prop_class_name))
        {
            m_lb_forms->Append(iter->as_string(prop_class_name), iter.get());
        }
    }

    if (Project.getProjectNode()->hasValue(prop_id_prefixes))
    {
        for (auto& iter: Project.getProjectNode()->as_ArrayString(prop_id_prefixes))
        {
            m_combo_prefixes->Append(iter.make_wxString());
        }
    }

    if (Project.getProjectNode()->hasValue(prop_id_suffixes))
    {
        for (auto& iter: Project.getProjectNode()->as_ArrayString(prop_id_suffixes))
        {
            m_combo_suffixes->Append(iter.make_wxString());
        }
    }
    event.Skip();  // transfer all validator data to their windows and update UI
}

void GlobalCustomIDS::OnSelectFolders(wxCommandEvent& WXUNUSED(event))
{
    m_lb_forms->Clear();
    wxArrayInt selections;

    if (auto count = m_lb_folders->GetSelections(selections); count > 0)
    {
        for (auto& iter: selections)
        {
            auto* node = static_cast<Node*>(m_lb_folders->GetClientData(iter));
            if (node)
            {
                for (const auto& form: node->getChildNodePtrs())
                {
                    if (form->isForm() && form->hasValue(prop_class_name))
                    {
                        m_lb_forms->Append(form->as_string(prop_class_name), form.get());
                    }
                    else if (form.get() == Project.getProjectNode())
                    {
                        m_lb_forms->Append("Project", form.get());
                    }
                }
            }
        }
    }
}

const int min_rows = 10;

struct NODE_IDS
{
    tt_string id_portion;
    Node* node;
};

void GlobalCustomIDS::OnSelectForms(wxCommandEvent& WXUNUSED(event))
{
    m_grid->ClearGrid();
    if (m_grid->GetNumberRows() > min_rows)
    {
        m_grid->DeleteRows(min_rows - 1, m_grid->GetNumberRows() - min_rows);
    }

    wxArrayInt selections;
    std::vector<NODE_IDS> ids;

    if (auto count = m_lb_forms->GetSelections(selections); count > 0)
    {
        // Collect all non "wx" IDs into the ids vector
        auto CollectIDs = [&](Node* node, auto&& CollectIDs) -> void
        {
            if (node->hasValue(prop_id) && !node->as_string(prop_id).is_sameprefix("wx"))
            {
                NODE_IDS node_id;
                node_id.id_portion = node->getPropId();
                node_id.node = node;
                ids.push_back(node_id);
            }

            for (const auto& iter: node->getChildNodePtrs())
            {
                CollectIDs(iter.get(), CollectIDs);
            }
        };

        for (auto& iter: selections)
        {
            auto* node = static_cast<Node*>(m_lb_forms->GetClientData(iter));
            CollectIDs(node, CollectIDs);
        }
    }

    // REVIEW: [Randalphwa - 07-10-2023] We could sort the ids vector here, but that could be
    // confusing since that would result in ids from different forms being mixed together
    // looking like they are duplicates.

    if (ids.size())
    {
        if (ids.size() > min_rows)
        {
            m_grid->AppendRows((to_int) ids.size() - min_rows);
        }

        int pos = 0;
        for (auto& iter: ids)
        {
            tt_string modified_id = iter.id_portion;
            if (m_text_old_prefix->GetValue().length())
            {
                auto old_prefix = m_text_old_prefix->GetValue().utf8_string();
                if (modified_id.starts_with(old_prefix))
                {
                    modified_id.erase(0, old_prefix.length());
                }
            }
            if (m_text_old_suffix->GetValue().length())
            {
                auto old_suffix = m_text_old_suffix->GetValue().utf8_string();
                if (modified_id.ends_with(old_suffix))
                {
                    modified_id.erase(modified_id.length() - old_suffix.length());
                }
            }
            if (m_combo_prefixes->GetValue().length())
            {
                modified_id.insert(0, m_combo_prefixes->GetValue().utf8_string());
            }
            if (m_combo_suffixes->GetValue().length())
            {
                modified_id.append(m_combo_suffixes->GetValue().utf8_string());
            }

            if (modified_id != iter.id_portion)
            {
                m_grid->SetCellValue(pos, 1, modified_id);
                m_committed = false;
            }

            m_grid->SetCellValue(pos++, 0, iter.id_portion);
        }
    }
}

void GlobalCustomIDS::OnSelectAllFolders(wxCommandEvent& WXUNUSED(event))
{
    for (unsigned int idx = 0; idx < m_lb_folders->GetCount(); ++idx)
    {
        m_lb_folders->SetSelection(idx, true);
    }
}

void GlobalCustomIDS::OnSelectNoFolders(wxCommandEvent& WXUNUSED(event))
{
    m_lb_folders->DeselectAll();
}

void GlobalCustomIDS::OnSelectAllForms(wxCommandEvent& WXUNUSED(event))
{
    for (unsigned int idx = 0; idx < m_lb_folders->GetCount(); ++idx)
    {
        m_lb_forms->SetSelection(idx, true);
    }
}

void GlobalCustomIDS::OnSelectNoForms(wxCommandEvent& WXUNUSED(event))
{
    m_lb_forms->DeselectAll();
}

void GlobalCustomIDS::OnUpdate(wxCommandEvent& event)
{
    OnSelectForms(event);
}

void GlobalCustomIDS::OnCommit(wxCommandEvent& WXUNUSED(event))
{
    wxArrayInt selections;
    std::vector<NODE_IDS> ids;

    if (auto count = m_lb_forms->GetSelections(selections); count > 0)
    {
        // Collect all non "wx" IDs into the ids vector
        auto CollectIDs = [&](Node* node, auto&& CollectIDs) -> void
        {
            if (node->hasValue(prop_id) && !node->as_string(prop_id).is_sameprefix("wx"))
            {
                NODE_IDS node_id;
                node_id.id_portion = node->getPropId();
                node_id.node = node;
                ids.push_back(node_id);
            }

            for (const auto& iter: node->getChildNodePtrs())
            {
                CollectIDs(iter.get(), CollectIDs);
            }
        };

        for (auto& iter: selections)
        {
            auto* node = static_cast<Node*>(m_lb_forms->GetClientData(iter));
            CollectIDs(node, CollectIDs);
        }
    }

    if (ids.empty())
    {
        wxMessageBox("No IDs to update", "Update IDs", wxOK | wxICON_INFORMATION);
        return;
    }

    auto undo_ids = std::make_shared<ModifyProperties>("Change IDs");

    for (auto& iter: ids)
    {
        tt_string modified_id = iter.id_portion;
        if (m_text_old_prefix->GetValue().length())
        {
            auto old_prefix = m_text_old_prefix->GetValue().utf8_string();
            if (modified_id.starts_with(old_prefix))
            {
                modified_id.erase(0, old_prefix.length());
            }
        }
        if (m_text_old_suffix->GetValue().length())
        {
            auto old_suffix = m_text_old_suffix->GetValue().utf8_string();
            if (modified_id.ends_with(old_suffix))
            {
                modified_id.erase(modified_id.length() - old_suffix.length());
            }
        }
        if (m_combo_prefixes->GetValue().length())
        {
            modified_id.insert(0, m_combo_prefixes->GetValue().utf8_string());
        }
        if (m_combo_suffixes->GetValue().length())
        {
            modified_id.append(m_combo_suffixes->GetValue().utf8_string());
        }

        if (modified_id != iter.id_portion)
        {
            tt_string new_id = iter.node->as_string(prop_id);
            new_id.Replace(iter.id_portion, modified_id);
            undo_ids->addProperty(iter.node->getPropPtr(prop_id), new_id);
        }
    }

    wxGetFrame().PushUndoAction(undo_ids);

    m_text_old_prefix->Clear();
    m_text_old_suffix->Clear();
    m_combo_prefixes->SetValue("");
    m_combo_suffixes->SetValue("");

    m_committed = true;

    wxCommandEvent dummy;
    OnUpdate(dummy);
}

void GlobalCustomIDS::OnClose(wxCommandEvent& event)
{
    if (!m_committed)
    {
        if (wxMessageBox("Commit changes?", "Update IDs", wxYES_NO | wxICON_QUESTION) == wxYES)
        {
            OnCommit(event);
        }
    }
    event.Skip();
}
