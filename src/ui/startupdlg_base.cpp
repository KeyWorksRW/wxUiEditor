////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include <wx/button.h>
#include <wx/icon.h>
#include <wx/statbmp.h>
#include <wx/statline.h>

#include "startupdlg_base.h"

#include <wx/mstream.h>  // Memory stream classes

// Convert a data array into a wxImage
inline wxImage GetImageFromArray(const unsigned char* data, size_t size_data)
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

namespace wxue_img
{
    extern const unsigned char logo16_png[639];
    extern const unsigned char logo64_png[1718];
    extern const unsigned char new_png[930];
    extern const unsigned char pagectrl_png[601];
}

bool StartupDlg::Create(wxWindow *parent, wxWindowID id, const wxString &title,
        const wxPoint&pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    {
        wxIcon icon;
        icon.CopyFromBitmap(GetImageFromArray(wxue_img::logo16_png, sizeof(wxue_img::logo16_png)));
        SetIcon(wxIcon(icon));
        }

    auto dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto box_sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    dlg_sizer->Add(box_sizer_6, wxSizerFlags(1).Expand().Border(wxALL));

    auto bmp_4 = new wxStaticBitmap(this, wxID_ANY, wxBitmap(GetImageFromArray(wxue_img::logo64_png, sizeof(wxue_img::logo64_png))));
    box_sizer_6->Add(bmp_4, wxSizerFlags().Border(wxALL));

    box_sizer_6->AddSpacer(10 + wxSizerFlags::GetDefaultBorder());

    m_staticText = new wxStaticText(this, wxID_ANY, "wxUiEditor 0.9.1");
    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_X_LARGE);
        m_staticText->SetFont(font);
    }
    box_sizer_6->Add(m_staticText, wxSizerFlags(1).Center().Border(wxALL));

    auto box_sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    dlg_sizer->Add(box_sizer_8, wxSizerFlags().Border(wxALL));

    auto box_sizer = new wxBoxSizer(wxVERTICAL);
    box_sizer_8->Add(box_sizer, wxSizerFlags().Border(wxALL));

    auto staticText = new wxStaticText(this, wxID_ANY, "Recent");
    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_X_LARGE);
        font.SetWeight(wxFONTWEIGHT_SEMIBOLD);
        staticText->SetFont(font);
    }
    box_sizer->Add(staticText, wxSizerFlags().Border(wxALL));

    m_staticTextRecentProjects = new wxStaticText(this, wxID_ANY, "Recent projects you have opened will appear here");
    m_staticTextRecentProjects->Wrap(200);
    box_sizer->Add(m_staticTextRecentProjects, wxSizerFlags().Border(wxALL));

    m_recent_flex_grid = new wxFlexGridSizer(2, 0, 0);
    {
        m_recent_flex_grid->AddGrowableCol(1, 1);
        m_recent_flex_grid->SetFlexibleDirection(wxHORIZONTAL);
    }
    box_sizer->Add(m_recent_flex_grid, wxSizerFlags().Border(wxALL));

    auto static_line_2 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_VERTICAL);
    box_sizer_8->Add(static_line_2, wxSizerFlags().Expand().Border(wxALL, 20));

    auto box_sizer_2 = new wxBoxSizer(wxVERTICAL);
    box_sizer_8->Add(box_sizer_2, wxSizerFlags().Border(wxLEFT|wxRIGHT, 15));

    auto staticText_2 = new wxStaticText(this, wxID_ANY, "Start");
    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_X_LARGE);
        font.SetWeight(wxFONTWEIGHT_SEMIBOLD);
        staticText_2->SetFont(font);
    }
    box_sizer_2->Add(staticText_2, wxSizerFlags().Border(wxALL));

    auto box_sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_2->Add(box_sizer_4, wxSizerFlags().Border(wxALL));

    auto bmp_2 = new wxStaticBitmap(this, wxID_ANY, wxBitmap(GetImageFromArray(wxue_img::open_png, sizeof(wxue_img::open_png))));
    box_sizer_4->Add(bmp_2, wxSizerFlags().Border(wxALL));

    auto hyperlink_2 = new wxGenericHyperlinkCtrl(this, wxID_ANY, "Open...", wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxHL_DEFAULT_STYLE);
    hyperlink_2->SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
    hyperlink_2->SetHoverColour(hyperlink_2->GetNormalColour());
    box_sizer_4->Add(hyperlink_2, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_2->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    auto bmp = new wxStaticBitmap(this, wxID_ANY, wxBitmap(GetImageFromArray(wxue_img::pagectrl_png, sizeof(wxue_img::pagectrl_png))));
    box_sizer_3->Add(bmp, wxSizerFlags().Border(wxALL));

    auto hyperlink = new wxGenericHyperlinkCtrl(this, wxID_ANY, "Import...", wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxHL_DEFAULT_STYLE);
    hyperlink->SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
    hyperlink->SetHoverColour(hyperlink->GetNormalColour());
    box_sizer_3->Add(hyperlink, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_2->Add(box_sizer_5, wxSizerFlags().Border(wxALL));

    auto bmp_3 = new wxStaticBitmap(this, wxID_ANY, wxBitmap(GetImageFromArray(wxue_img::new_png, sizeof(wxue_img::new_png))));
    box_sizer_5->Add(bmp_3, wxSizerFlags().Border(wxALL));

    auto hyperlink_3 = new wxGenericHyperlinkCtrl(this, wxID_ANY, "New", wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxHL_DEFAULT_STYLE);
    hyperlink_3->SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
    hyperlink_3->SetHoverColour(hyperlink_3->GetNormalColour());
    box_sizer_5->Add(hyperlink_3, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_7 = new wxBoxSizer(wxVERTICAL);
    dlg_sizer->Add(box_sizer_7, wxSizerFlags().Expand().Border(wxALL));

    auto static_line = new wxStaticLine(this);
    box_sizer_7->Add(static_line, wxSizerFlags().Expand().Border(wxALL));

    auto stdBtn = CreateStdDialogButtonSizer(wxCANCEL|wxNO_DEFAULT);
    stdBtn->GetCancelButton()->SetDefault();
    box_sizer_7->Add(stdBtn, wxSizerFlags(1).Center().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &StartupDlg::OnInit, this);
    hyperlink_2->Bind(wxEVT_HYPERLINK, &StartupDlg::OnOpen, this);
    hyperlink->Bind(wxEVT_HYPERLINK, &StartupDlg::OnImport, this);
    hyperlink_3->Bind(wxEVT_HYPERLINK, &StartupDlg::OnNew, this);

    return true;
}

namespace wxue_img
{

    const unsigned char open_png[447] {
    137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,24,0,0,0,24,8,6,0,0,0,224,119,61,248,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,
    0,154,156,24,0,0,1,113,73,68,65,84,72,199,237,148,189,106,27,65,16,199,127,179,55,247,33,71,198,164,51,88,1,67,42,55,121,3,251,57,66,
    170,212,193,133,11,55,121,11,187,118,233,194,121,131,116,105,82,24,119,233,12,14,216,129,64,32,133,2,18,138,228,251,218,73,161,72,119,
    50,10,78,208,154,64,200,191,185,217,155,217,253,221,204,222,12,252,215,223,150,204,140,215,103,95,172,147,186,185,163,63,172,57,126,
    185,37,193,0,71,111,191,218,227,110,3,240,30,62,220,20,124,27,213,237,48,204,12,17,153,63,219,239,218,246,233,254,19,1,208,217,198,188,
    244,76,242,69,250,78,79,219,33,191,173,193,216,207,237,6,80,25,147,194,7,169,123,94,217,18,64,233,81,23,230,98,243,146,229,0,145,7,4,
    124,207,61,69,43,181,85,84,214,194,243,163,79,246,230,96,91,228,217,225,133,165,170,128,199,19,6,224,16,192,81,84,21,250,116,115,157,
    23,123,61,106,111,65,27,204,9,92,92,245,209,225,45,188,187,172,48,243,97,59,88,132,143,159,115,52,86,165,219,73,169,125,29,56,3,135,
    106,132,38,170,108,116,29,85,109,16,176,74,206,57,18,85,52,75,99,186,29,193,124,196,140,96,173,225,96,11,131,162,89,255,42,166,241,11,
    89,26,163,89,18,243,40,19,156,227,206,81,171,169,40,33,75,126,2,162,72,72,227,176,99,186,246,70,150,196,211,79,62,57,47,108,45,187,47,
    233,63,43,210,96,228,121,181,155,137,78,47,196,24,231,97,255,162,200,73,51,42,70,215,239,41,171,176,141,22,71,194,191,161,31,234,71,
    141,143,221,151,125,31,0,0,0,0,73,69,78,68,174,66,96,130
    };

}
