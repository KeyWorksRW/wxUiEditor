/////////////////////////////////////////////////////////////////////////////
// Purpose:   Generate Perl code files
// Author:    Ralph Walden
// Copyright: Copyright (c) 2024-2025 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include <set>
#include <thread>
#include <unordered_set>

#include <frozen/map.h>

#include "mainframe.h"

#include "base_generator.h"   // BaseGenerator -- Base widget generator class
#include "code.h"             // Code -- Helper class for generating code
#include "file_codewriter.h"  // FileCodeWriter -- Classs to write code to disk
#include "gen_base.h"         // BaseCodeGenerator -- Generate Src and Hdr files for Base Class
#include "gen_common.h"       // Common component functions
#include "gen_results.h"      // Code generation file writing functions
#include "image_gen.h"        // Functions for generating embedded images
#include "image_handler.h"    // ImageHandler class
#include "node.h"             // Node class
#include "project_handler.h"  // ProjectHandler class
#include "utils.h"            // Miscellaneous utilities
#include "write_code.h"       // Write code to Scintilla or file

#include "pugixml.hpp"

using namespace code;
using namespace GenEnum;

// clang-format off

inline constexpr const auto txt_PoundCmtBlock =
R"===(###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

)===";

inline constexpr const auto txt_perl_frame_app =
R"===(# Sample code for displaying your MainFrame window.
# Place this code after the closing comment block in your
# generated file. You can then call 'Perl filename.pl'
# where filename.pl is the name of your generated file.

package main;

my $app = Wx::SimpleApp->new;
my $frame = MainFrame->new(undef, -1, "wxPerl app");
$frame->Show;
$app->MainLoop;
)===";

// clang-format on

// extern constexpr auto map_perl_constants = frozen::make_map<GenEnum::PropName, std::string_view>;

// If the node contains the specified property, then the string contains all
// possible contants that could be used separated by spaces.
constexpr auto map_perl_constants = frozen::make_map<GenEnum::PropName, std::string_view>({

    { prop_bitmap, "wxNullBitmap" },
    { prop_id, "wxID_ANY" },
    { prop_pos, "wxDefaultPosition" },
    { prop_size, "wxDefaultSize" },
    { prop_orientation, "wxBOTH wxHORIZONTAL wxVERTICAL" },

});

bool HasPerlMapConstant(std::string_view value)
{
    for (auto& iter: map_perl_constants)
    {
        if (tt::contains(iter.second, value))
            return true;
    }
    return false;
}

// This *MUST* be written without any indendation
const char* perl_begin_cmt_block = "=pod";

// This *MUST* be written without any indendation
const char* perl_end_cmt_block = "=cut";

void BaseCodeGenerator::GeneratePerlClass(PANEL_PAGE panel_type)
{
    Code code(m_form_node, GEN_LANG_PERL);

    m_embedded_images.clear();
    SetImagesForm();
    std::set<std::string> img_include_set;

    std::thread thrd_get_events(&BaseCodeGenerator::CollectEventHandlers, this, m_form_node, std::ref(m_events));
    std::thread thrd_collect_img_headers(&BaseCodeGenerator::CollectImageHeaders, this, m_form_node,
                                         std::ref(img_include_set));

    // If the code files are being written to disk, then UpdateEmbedNodes() has already been called.
    if (panel_type != NOT_PANEL)
    {
        ProjectImages.UpdateEmbedNodes();
    }

    std::vector<Node*> forms;
    Project.CollectForms(forms);

    m_panel_type = panel_type;

    m_header->Clear();
    m_source->Clear();

    if (m_form_node->isGen(gen_wxFrame))
    {
        code += txt_perl_frame_app;
        if (m_form_node->hasValue(prop_class_name))
        {
            tt_string class_name = m_form_node->as_string(prop_class_name);
            if (class_name.ends_with("Base"))
                class_name.erase(class_name.size() - 4);
            code.Replace("MainFrame", class_name);
        }
        m_header->writeLine(code);
        code.clear();
    }

    m_source->SetLastLineBlank();

#if !defined(_DEBUG)
    if (m_panel_type == NOT_PANEL)
#else
    if (m_panel_type != NOT_PANEL)
    {
        m_source->writeLine(
            "-- The following comment block is only displayed in a _DEBUG build, or when written to a file.\n\n");
    }
#endif  // _DEBUG
    {
        m_source->writeLine(txt_PoundCmtBlock);
    }

    code.Str("use Wx;").Eol();
    code.Str("package ").NodeName();
    if (code.ends_with("Base"))
        code.erase(code.size() - 4);
    code.Str(";").Eol();

    m_source->writeLine(code);
    code.clear();

    if (Project.hasValue(prop_perl_project_preamble))
    {
        WritePropSourceCode(Project.getProjectNode(), prop_perl_project_preamble);
    }

    m_source->writeLine();

    std::set<std::string> use_classes;
    std::set<std::string> use_constants;

    auto GatherImportModules = [&](Node* node, auto&& GatherImportModules) -> void
    {
        if (auto* gen = node->getGenerator(); gen)
        {
            std::set<std::string> imports;
            gen->GetImports(node, imports, GEN_LANG_PERL);
            for (auto& iter: imports)
            {
                if (iter.starts_with("use Wx"))
                    use_constants.emplace(iter);
                else
                    use_classes.emplace(iter);
            }
            for (auto& iter: map_perl_constants)
            {
                if (node->hasProp(iter.first))
                {
                    tt_string constants("use Wx qw(");
                    constants += iter.second;
                    constants += ");";
                    use_constants.emplace(constants);
                }
            }
        }
        for (auto& child: node->getChildNodePtrs())
        {
            std::set<std::string> imports;
            GatherImportModules(child.get(), GatherImportModules);
            for (auto& iter: imports)
            {
                if (iter.starts_with("use "))
                    use_classes.emplace(iter);
                else
                    use_constants.emplace(iter);
            }
            for (auto& iter: map_perl_constants)
            {
                if (child.get()->hasProp(iter.first))
                {
                    tt_string constants("use Wx qw(");
                    constants += iter.second;
                    constants += ");";
                    use_constants.emplace(constants);
                }
            }
        }
    };
    GatherImportModules(m_form_node, GatherImportModules);

    if (use_classes.size())
    {
        m_source->writeLine();
        for (const auto& import: use_classes)
        {
            m_source->writeLine(import);
        }
        m_source->writeLine();
    }
    else
    {
        m_source->writeLine("use Wx qw[:allclasses];");
    }

    if (use_constants.size())
    {
        m_source->writeLine();
        for (const auto& import: use_constants)
        {
            m_source->writeLine(import);
        }
        m_source->writeLine();
    }

    m_source->writeLine();
    m_source->writeLine("use strict;");

    if (m_form_node->isGen(gen_Images))
    {
        thrd_get_events.join();
        thrd_collect_img_headers.join();
        // GeneratePerlImagesForm();
        return;
    }

    m_set_enum_ids.clear();
    m_set_const_ids.clear();
    BaseCodeGenerator::CollectIDs(m_form_node, m_set_enum_ids, m_set_const_ids);

    int id_value = wxID_HIGHEST;
    for (auto& iter: m_set_enum_ids)
    {
        m_source->writeLine(tt_string() << '$' << iter << " = " << id_value++);
    }
    for (auto& iter: m_set_const_ids)
    {
        if (tt::contains(iter, " wx"))
        {
            tt_string id = '$' + iter;
            id.Replace(" wx", " wx.", true, tt::CASE::exact);
            m_source->writeLine(id);
        }
        else
        {
            m_source->writeLine('$' + iter);
        }
    }

    thrd_collect_img_headers.join();
    if (m_embedded_images.size())
    {
        m_source->writeLine();

        // TODO: [Randalphwa - 07-13-2023] Need to figure out how to handle images in wxPerl.
    }

    auto generator = m_form_node->getNodeDeclaration()->getGenerator();
    code.clear();
    if (generator->ConstructionCode(code))
    {
        m_source->writeLine(code);
        m_source->writeLine();
        m_source->Indent();
        m_source->Indent();

        id_value = wxID_HIGHEST;
        for (auto& iter: m_set_enum_ids)
        {
            m_source->writeLine(tt_string() << '@' << iter << id_value++);
        }

        if (id_value > 1)
        {
            // If at least one id was set, add a blank line
            m_source->writeLine();
        }
    }

    code.clear();
    m_source->ResetIndent(1);
    if (generator->SettingsCode(code))
    {
        if (code.size())
        {
            m_source->writeLine(code);
            m_source->writeLine();
        }
    }

    if (m_form_node->getPropPtr(prop_window_extra_style))
    {
        code.clear();
        code.GenWindowSettings();
        if (code.size())
        {
            m_source->writeLine(code);
        }
    }

    m_source->SetLastLineBlank();
    for (const auto& child: m_form_node->getChildNodePtrs())
    {
        if (child->isGen(gen_wxContextMenuEvent))
            continue;
        GenConstruction(child.get());
    }

    code.clear();
    if (generator->AfterChildrenCode(code))
    {
        if (code.size())
        {
            m_source->writeLine();
            m_source->writeLine(code);
        }
    }

    // TODO: [Randalphwa - 07-13-2023] Need to figure out if wxPerl supports persistence

    // Delay calling join() for as long as possible to increase the chance that the thread will
    // have already completed.
    thrd_get_events.join();
    if (m_events.size())
    {
        m_source->writeLine();
        m_source->writeLine("# Event handlers");
        GenSrcEventBinding(m_form_node, m_events);

        m_source->writeLine("\t# end Event handlers\n", indent::none);
        m_source->SetLastLineBlank();

        m_source->ResetIndent();
        m_source->writeLine();
        m_source->Indent();
        GenPerlEventHandlers(m_events);
    }
    else
    {
        m_source->ResetIndent();
    }

    if (m_form_node->isGen(gen_wxWizard))
    {
        code.clear();
        code.Eol().Str("# Add the following below the comment block to add a simple");
        code.Eol().Str("# Run() function to launch the wizard").Eol();
        m_source->writeLine(code);
    }

    // Make certain indentation is reset after all construction code is written
    m_source->ResetIndent();
    m_source->writeLine("\treturn $self;", indent::none);
    m_source->writeLine("}\n\n", indent::none);

    // Only add this when writing to disk. Otherwise, it needs to be added after
    // the comment block, and only if there is no user code after the comment
    // block. This is to ensure that the user can add event handlers that are
    // part of the package.
    if (panel_type != NOT_PANEL)
    {
        m_source->writeLine("1;", indent::none);
    }

    m_header->ResetIndent();

    // TODO: [Randalphwa - 07-13-2023] If we use embedded images, we need to write them out here.
#if 0
    std::sort(m_embedded_images.begin(), m_embedded_images.end(),
              [](const EmbeddedImage* a, const EmbeddedImage* b)
              {
                  return (a->array_name.compare(b->array_name) < 0);
              });
#endif
}
