###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

"""MainTestDialog class generated by wxUiEditor."""

import wx
import wx.adv
import wx.html
import wx.propgrid
import wx.ribbon
import wx.richtext
import wx.stc
TXT_CTRL = wx.ID_HIGHEST + 1
DLG_MAINTEST = wx.ID_HIGHEST + 100
ID_RICHTEXT = 100

import images
from wx.lib.embeddedimage import PyEmbeddedImage

clr_hourglass_gif = PyEmbeddedImage(
    b"R0lGODlhIAAgAPIAAP///8zMzAD//wCZmQAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQJ"
    b"CgAFACwAAAAAIAAgAAADZli63P4wykmrvTjnwbvnhFZwQil8QygSbOuqYiDPNKzJAEDLdobrux6GByAE"
    b"jEjRAnlsCjXMpLIRnT6k1gYvq509YwHgkfurWcvBKdqsXHvVYfFbifJ8KSQT6i55+VlcgYKDhIUSCQAh"
    b"+QQJCgAFACwAAAAAIAAgAAADZ1i63P4wykmrvTjnwbvnhFZwQil8QygSbOuqYiDPNKzJAEDLdobrux6G"
    b"ByDMjEIMMrBMZppM0aMphSCrEB7WUdsucMbo9tetkoPmQG4njqmBZfcaLUV5nBSSCYWXvP4sXoKDhIWG"
    b"EgkAIfkECQoABQAsAAAAACAAIAAAA2pYutz+MMpJq70458G754RWcEIpfEMoEmzrqmIgzzSsyQBAy3aG"
    b"67sehgfkBYQYwnGpRGaaTNED6pQ2pREe9lHbMnDKo7fw62LLYa20HDwHcjvx+l2cVSkoz11CMqH2EC+C"
    b"LGOFhoeIiRIJACH5BAkKAAUALAAAAAAgACAAAANpWLrc/jDKSau9OOfBu+eEVnBCKXxDKBJs66piIM80"
    b"rMkAQMt2huu7HoYHrIkWhEByqTwymEtnAyp1RKsNHpZh3OKSzeqvexyDteVAbheOqXXn9u3NFl5QHnuF"
    b"ZELpJy+BLFuEhYaHiAwJACH5BAkKAAUALAAAAAAgACAAAANpWLrc/jDKSau9OOfBu+eEVnBCKXxDKBJs"
    b"66piIM80rMkAQMt2huu7Hua3CwgxBKMyecwwl6LHsxllRiO866OmZeCSxm6BOKNWiOBslMxdB3LK8vWX"
    b"VotQHrOEZELpIS+BLGKEhYaHiBIJACH5BAkKAAUALAAAAAAgACAAAANoWLrc/jDKSau9OOfBu+eEVnBC"
    b"KXxDKBJs66piIM80rMkAQMt2huu7Hua3CwgxBOMsecwwlU3NM7oyiiS8K6SmbeCS1m6BuOwSwdkrmasO"
    b"5JTldu6ZFqE8VAnJhMpDXoAsYoOEhYaHGAkAIfkECQoABQAsAAAAACAAIAAAA2lYutz+MMpJq70458G7"
    b"54RWcEIpfEMoEmzrqmIgzzSsyQBAy3aG67se5rcLCDEEY1DUSDqNTMfzGHVGIbyro6Zd4JJQLXFGtRDB"
    b"WeaYqw7klOQoD/BMi1Ce8oRkQukjL4EsXYSFhoeIEgkAIfkECQoABQAsAAAAACAAIAAAA2lYutz+MMpJ"
    b"q70458G754RWcEIpfEMoEmzrqmIgzzSsyQBAy3aG67se5rcLCDGEolHUSDqXzKYRGpUeq7yqo6Zd4JLU"
    b"KHF2tRDBWeaYqw7kpmSxEfB0RlGe8oRkQukjL4EsXYSFhoeIEgkAIfkECQoABQAsAAAAACAAIAAAA2xY"
    b"utz+MMpJq70458G754RWcEIpfEMoEmzrqmIgzzSsyQBAy3aG67se5rcLCDGEolHUSCZ5TIdzGZVSqw0o"
    b"llHbKnDPoy+Q60aJT22MDDSvAdOZuMKDG+9zCsqTl5BMKH0QL4QsXoeIiYqLDAkAIfkECQoABQAsAAAA"
    b"ACAAIAAAA2pYutz+MMpJq70458G754RWcEIpfEMoEmzrqmIgzzSsyQBAy3aG67se5rcLCDGEolHUSNaY"
    b"jqQU+phSHbxr46kt4JxHXyDHZRKdWfMYWL6NpcZ0zAiAW0UoT5hCMqH2Ei+CLF2FhoeIiQwJACH5BAkK"
    b"AAUALAAAAAAgACAAAANsWLrc/jDKSau9OOfBu+eEVnBCKXxDKBJs66piIM80rMkAQMt2huu7Hua3Cwgx"
    b"hKJR1EjWmA7nEhqdUhu8K3Z2jAUAzu7wC8xCiVLrjZxW+77JuNlLABvvYgrKk5eQTCh9EC+ELFqHiImK"
    b"ixIJACH5BAkKAAUALAAAAAAgACAAAANrWLrc/jDKSau9OOfBu+eEVnBCKXxDKBJs66piIM80rMkAQMt2"
    b"huu7Hua3CwgxhKJR1EjWmA7nEhqdUhu8K3Z2jAWAViiRSyVKw74vICntVnBsY5bJW8vZUJTHPSGZUHwR"
    b"L4MsWoaHiImKEgkAIfkECQoABQAsAAAAACAAIAAAA2dYutz+MMpJq7046zfInkP3RYMgjk0QlCdaqADA"
    b"eigMqGG7BbGKh7TdzffTYXhEH2H5QSaDl+SQCLXYeoGlVmOjfoBZAMG7mYmzytEMPWaqTW22KxevfsF2"
    b"NdDl2PMbbn+Cg4SFhhMJACH5BAkKAAUALAAAAAAgACAAAANzWLrc/jDKSau9OOvNu//ZMGgDIYlEoAbQ"
    b"GqCnkK5m475ynAJ8UCsqHm+QixB3PR8wIBwWIUdm0hcEuI6n0m17gxm1qbBv1i1lCeKwgrzyQsHUX4H9"
    b"Mn/RcQfb/UCh0RB/aHaBchaAIImKi4yNjo+QkZINCQAh+QQJCgAFACwAAAAAIAAgAAADbVi63P4wykmr"
    b"vTjrQsiWxOB9TyiSjjkEI8oNcCC3Xyis8kzaeM7Wg5uP9dvAVgAAgdhxzZRMV+FJgPpomI4WMCyiAtwh"
    b"VgPuspqbshg2toDDsyNJlozDnG+VdMoKDvYKPIAKfoOEf4aJiouMJAkAIf4yUmVkdWNlZCA1NiUgQCB3"
    b"d3cucmFzcGJlcnJ5aGlsbC5jb20vZ2lmd2l6YXJkLmh0bWwAOw==")

import popupwin

class MainTestDialog(wx.Dialog):
    def __init__(self, parent, id=DLG_MAINTEST, title="", pos=
                wx.DefaultPosition, size=wx.DefaultSize,
                style=wx.DEFAULT_DIALOG_STYLE, name=wx.DialogNameStr):
        wx.Dialog.__init__(self)

        if not self.Create(parent, id, title, pos, size, style, name):
            return

        dlg_sizer = wx.BoxSizer(wx.VERTICAL)

        self.notebook = wx.Notebook(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.BK_TOP|wx.NB_MULTILINE)
        dlg_sizer.Add(self.notebook, wx.SizerFlags().Expand().Border(wx.ALL))

        page_2 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_2, "Text")

        page_sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.text_ctrl = wx.TextCtrl(page_2, TXT_CTRL, "", wx.DefaultPosition,
            wx.DefaultSize, wx.TE_RICH2)
        self.text_ctrl.SetHint("wxTextCtrl")
        page_sizer_1.Add(self.text_ctrl, wx.SizerFlags().Expand().Border(wx.ALL))

        self.richText = wx.richtext.RichTextCtrl(page_2, ID_RICHTEXT, "",
            wx.DefaultPosition, wx.DefaultSize, wx.richtext.RE_MULTILINE|wx.VSCROLL|
            wx.HSCROLL|wx.NO_BORDER|wx.WANTS_CHARS)
        self.richText.SetHint("wxRichTextCtrl")
        self.richText.SetMinSize(self.ConvertDialogToPixels(wx.Size(150, 30)))
        page_sizer_1.Add(self.richText, wx.SizerFlags().Expand().Border(wx.ALL))

        self.scintilla = wx.stc.StyledTextCtrl(page_2, wx.ID_ANY)
        self.scintilla.SetLexer(wx.stc.STC_LEX_CPP)
        self.scintilla.SetEOLMode(wx.stc.STC_EOL_LF)
        self.scintilla.SetViewWhiteSpace(wx.stc.STC_WS_VISIBLEALWAYS)
        # Sets text margin scaled appropriately for the current DPI on Windows,
        # 5 on wxGTK or wxOSX
        self.scintilla.SetMarginLeft(wx.SizerFlags.GetDefaultBorder())
        self.scintilla.SetMarginRight(wx.SizerFlags.GetDefaultBorder())
        self.scintilla.SetMarginWidth(1, 0) # Remove default margin
        self.scintilla.SetBackSpaceUnIndents(True)
        self.scintilla.SetMinSize(self.ConvertDialogToPixels(wx.Size(150, 60)))
        page_sizer_1.Add(self.scintilla, wx.SizerFlags().Expand().Border(wx.ALL))

        self.htmlWin = wx.html.HtmlWindow(page_2, wx.ID_ANY)
        self.htmlWin.SetPage("This is an <b>HTML</b> window")
        self.htmlWin.SetMinSize(self.ConvertDialogToPixels(wx.Size(100, 60)))
        page_sizer_1.Add(self.htmlWin, wx.SizerFlags().Expand().Border(wx.ALL))
        page_2.SetSizerAndFit(page_sizer_1)

        page_4 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_4, "Buttons")

        box_sizer_3 = wx.BoxSizer(wx.VERTICAL)

        grid_bag_sizer = wx.GridBagSizer()

        self.btn = wx.Button(page_4, wx.ID_ANY, "Normal")
        self.btn.SetToolTip("A normal button")
        grid_bag_sizer.Add(self.btn, wx.GBPosition(0, 0), wx.GBSpan(1, 1), wx.ALL, 5)

        self.btn_2 = wx.Button(page_4, wx.ID_ANY, wx.EmptyString)
        self.btn_2.SetLabelMarkup("<b><span foreground=\'red\'>Markup</span></b>")
        self.btn_2.SetToolTip("Text should be Bold and Red.")
        grid_bag_sizer.Add(self.btn_2, wx.GBPosition(0, 1), wx.GBSpan(1, 1), wx.ALL, 5)

        self.btn_bitmaps = wx.Button(page_4, wx.ID_ANY, "Bitmaps")
        self.btn_bitmaps.SetBitmap(wx.BitmapBundle.FromBitmap(images.normal_png.Bitmap))
        self.btn_bitmaps.SetBitmapDisabled(wx.BitmapBundle.FromBitmap(images.no_hour_png.Bitmap))
        self.btn_bitmaps.SetBitmapCurrent(wx.BitmapBundle.FromBitmap(images.focus_png.Bitmap))
        self.btn_bitmaps.SetToolTip(
        "Bitmap should change when mouse is over button, or button is disabled.")
        grid_bag_sizer.Add(self.btn_bitmaps, wx.GBPosition(0, 2), wx.GBSpan(1, 1), wx.ALL,
            5)

        self.btn_4 = wx.Button(page_4, wx.ID_ANY, "Right")
        self.btn_4.SetBitmapPosition(wx.RIGHT)
        self.btn_4.SetBitmap(wx.BitmapBundle.FromBitmap(images.normal_png.Bitmap))
        self.btn_4.SetToolTip(
        "Bitmap should be on the right side (fails in wxPython 4.2).")
        grid_bag_sizer.Add(self.btn_4, wx.GBPosition(0, 3), wx.GBSpan(1, 1), wx.ALL, 5)

        self.toggleBtn = wx.ToggleButton(page_4, wx.ID_ANY, "Toggle", wx.DefaultPosition,
            wx.DefaultSize, wx.BU_EXACTFIT)
        self.toggleBtn.SetToolTip(
        "Style set to exact fit, so it should be a bit smaller than usual.")
        grid_bag_sizer.Add(self.toggleBtn, wx.GBPosition(0, 4), wx.GBSpan(1, 1), wx.ALL, 5)

        disable_bitmaps = wx.CheckBox(page_4, wx.ID_ANY, "Disable")
        disable_bitmaps.SetToolTip(
        "This will change the enable state and bitmap of the Bitmaps button.")
        grid_bag_sizer.Add(disable_bitmaps, wx.GBPosition(2, 2), wx.GBSpan(1, 1), wx.ALL,
            5)

        box_sizer_3.Add(grid_bag_sizer, wx.SizerFlags().Border(wx.ALL))

        box_sizer_7 = wx.BoxSizer(wx.HORIZONTAL)

        self.btn_5 = wx.adv.CommandLinkButton(page_4, wx.ID_ANY, "Command",
            "wxCommandLinkButton")
        self.btn_5.SetBitmap(wx.ArtProvider.GetBitmapBundle(wx.ART_GO_FORWARD,
            wx.ART_OTHER))
        self.btn_5.SetToolTip("The bitmap for this is from Art Provider.")
        box_sizer_7.Add(self.btn_5, wx.SizerFlags().Border(wx.ALL))

        # Trailing spaces added to avoid clipping
        radioBox = wx.RadioBox(page_4, wx.ID_ANY, "Radio Box", wx.DefaultPosition,
            wx.DefaultSize, ["Button zero ","Button one ","Button two "], 0,
            wx.RA_SPECIFY_ROWS)
        radioBox.SetSelection(1)
        box_sizer_7.Add(radioBox, wx.SizerFlags().Border(wx.ALL))

        # wxPython currently does not support a checkbox as a static box label
        static_box_4 = wx.StaticBoxSizer(wx.VERTICAL, page_4, "Checkbox")

        self.radioBtn_4 = wx.RadioButton(static_box_4.GetStaticBox(), wx.ID_ANY,
            "First button")
        static_box_4.Add(self.radioBtn_4, wx.SizerFlags().Border(wx.ALL))

        self.radioBtn_2 = wx.RadioButton(static_box_4.GetStaticBox(), wx.ID_ANY,
            "Second button")
        self.radioBtn_2.SetValue(True)
        static_box_4.Add(self.radioBtn_2, wx.SizerFlags().Border(wx.ALL))

        self.radioBtn_3 = wx.RadioButton(static_box_4.GetStaticBox(), wx.ID_ANY,
            "Third button")
        static_box_4.Add(self.radioBtn_3, wx.SizerFlags().Border(wx.ALL))

        box_sizer_7.Add(static_box_4, wx.SizerFlags().Border(wx.ALL))

        # wxPython currently does not support a radio button as a static box label
        static_box_5 = wx.StaticBoxSizer(wx.VERTICAL, page_4, "Radio")

        self.radioBtn_5 = wx.RadioButton(static_box_5.GetStaticBox(), wx.ID_ANY,
            "First button")
        static_box_5.Add(self.radioBtn_5, wx.SizerFlags().Border(wx.ALL))

        self.radioBtn_6 = wx.RadioButton(static_box_5.GetStaticBox(), wx.ID_ANY,
            "Second button")
        self.radioBtn_6.SetValue(True)
        static_box_5.Add(self.radioBtn_6, wx.SizerFlags().Border(wx.ALL))

        self.radioBtn_7 = wx.RadioButton(static_box_5.GetStaticBox(), wx.ID_ANY,
            "Third button")
        static_box_5.Add(self.radioBtn_7, wx.SizerFlags().Border(wx.ALL))

        box_sizer_7.Add(static_box_5, wx.SizerFlags().Border(wx.ALL))

        box_sizer_3.Add(box_sizer_7, wx.SizerFlags().Border(wx.ALL))

        static_line = wx.StaticLine(page_4, wx.ID_ANY, wx.DefaultPosition,
            self.ConvertDialogToPixels(wx.Size(20, -1)), wx.LI_HORIZONTAL)
        box_sizer_3.Add(static_line, wx.SizerFlags().Expand().Border(wx.ALL))

        box_sizer_19 = wx.BoxSizer(wx.HORIZONTAL)

        wrap_sizer = wx.WrapSizer(wx.HORIZONTAL, wx.EXTEND_LAST_ON_EACH_LINE|
            wx.REMOVE_LEADING_SPACES)

        self.btn_3 = wx.Button(page_4, wx.ID_ANY, "First btn")
        wrap_sizer.Add(self.btn_3, wx.SizerFlags().Border(wx.ALL))

        btn2 = wx.Button(page_4, wx.ID_ANY, "Popup")
        wrap_sizer.Add(btn2, wx.SizerFlags().Border(wx.ALL))

        self.radioBtn = wx.RadioButton(page_4, wx.ID_ANY, "First radio",
            wx.DefaultPosition, wx.DefaultSize, wx.RB_GROUP)
        wrap_sizer.Add(self.radioBtn, wx.SizerFlags().Center().Border(wx.ALL))

        self.radioBtn2 = wx.RadioButton(page_4, wx.ID_ANY, "Second radio")
        wrap_sizer.Add(self.radioBtn2, wx.SizerFlags().Center().Border(wx.ALL))

        self.checkBox = wx.CheckBox(page_4, wx.ID_ANY, "Checkbox", wx.DefaultPosition,
            wx.DefaultSize, wx.CHK_3STATE)
        self.checkBox.Set3StateValue(wx.CHK_UNDETERMINED)
        wrap_sizer.Add(self.checkBox, wx.SizerFlags().Center().Border(wx.ALL))

        box_sizer_19.Add(wrap_sizer, wx.SizerFlags().Expand().Border(wx.ALL))

        # wxPython currently does not support a checkbox as a static box label
        static_box_3 = wx.StaticBoxSizer(wx.VERTICAL, page_4, "Play Animation")

        self.toggleBtn_2 = wx.ToggleButton(static_box_3.GetStaticBox(), wx.ID_ANY,
            "Play Animation", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT)
        static_box_3.Add(self.toggleBtn_2, wx.SizerFlags().Border(wx.ALL))

        self.animation_ctrl = wx.adv.AnimationCtrl(static_box_3.GetStaticBox(), wx.ID_ANY,
            wx.adv.Animation("../../art/clr_hourglass.gif"), wx.DefaultPosition,
            wx.DefaultSize, wx.adv.AC_DEFAULT_STYLE)
        self.animation_ctrl.SetInactiveBitmap(wx.BitmapBundle.FromBitmap(
            images.disabled_png.Bitmap))
        static_box_3.Add(self.animation_ctrl, wx.SizerFlags().Border(wx.ALL))

        box_sizer_19.Add(static_box_3, wx.SizerFlags().Border(wx.ALL))

        self.indicator = wx.ActivityIndicator(page_4, wx.ID_ANY)
        self.indicator.Start()
        box_sizer_19.Add(self.indicator, wx.SizerFlags().Border(wx.ALL))

        box_sizer_3.Add(box_sizer_19, wx.SizerFlags().Expand().Border(wx.ALL))
        page_4.SetSizerAndFit(box_sizer_3)

        page_5 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_5, "Lists")

        box_sizer_5 = wx.BoxSizer(wx.VERTICAL)

        flex_grid_sizer = wx.FlexGridSizer(2, 0, 0)

        box_sizer_10 = wx.BoxSizer(wx.VERTICAL)

        self.staticText_2 = wx.StaticText(page_5, wx.ID_ANY, "wxRearrangeCtrl")
        box_sizer_10.Add(self.staticText_2, wx.SizerFlags().Expand().Border(wx.ALL))

        self.rearrange = wx.RearrangeCtrl(page_5, wx.ID_ANY, wx.DefaultPosition,
            wx.DefaultSize, [], [])
        box_sizer_10.Add(self.rearrange, wx.SizerFlags().Border(wx.ALL))

        flex_grid_sizer.Add(box_sizer_10, wx.SizerFlags().Border(wx.ALL))

        box_sizer_11 = wx.BoxSizer(wx.VERTICAL)

        staticText_3 = wx.StaticText(page_5, wx.ID_ANY, "wxCheckListBox")
        box_sizer_11.Add(staticText_3, wx.SizerFlags().Expand().Border(wx.ALL))

        self.checkList = wx.CheckListBox(page_5, wx.ID_ANY)
        box_sizer_11.Add(self.checkList, wx.SizerFlags().Border(wx.ALL))

        flex_grid_sizer.Add(box_sizer_11, wx.SizerFlags().Border(wx.ALL))

        box_sizer_12 = wx.BoxSizer(wx.VERTICAL)

        self.staticText_4 = wx.StaticText(page_5, wx.ID_ANY, "wxListView")
        box_sizer_12.Add(self.staticText_4, wx.SizerFlags().Border(wx.ALL))

        self.listview = wx.ListView(page_5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.LC_SINGLE_SEL|wx.LC_REPORT)
        self.listview.AppendColumn("name")
        self.listview.AppendColumn("value")
        info = wx.ListItem()
        info.Clear()
        info.SetId(0)
        idx = self.listview.InsertItem(info)
        self.listview.SetItem(idx, 0, "meaning")
        self.listview.SetItem(idx, 1, "42")
        self.listview.SetToolTip("Separate content columns with a semi-colon (;)")
        box_sizer_12.Add(self.listview, wx.SizerFlags().Border(wx.ALL))

        flex_grid_sizer.Add(box_sizer_12, wx.SizerFlags().Border(wx.ALL))

        box_sizer_13 = wx.BoxSizer(wx.HORIZONTAL)

        self.edit_listbox = wx.adv.EditableListBox(page_5, wx.ID_ANY,
            "My Editable ListBox", wx.DefaultPosition, wx.DefaultSize, wx.adv.EL_ALLOW_NEW|
            wx.adv.EL_ALLOW_EDIT|wx.adv.EL_ALLOW_DELETE)
        box_sizer_13.Add(self.edit_listbox, wx.SizerFlags().Border(wx.ALL))

        flex_grid_sizer.Add(box_sizer_13, wx.SizerFlags().Border(wx.ALL))

        box_sizer2 = wx.BoxSizer(wx.VERTICAL)

        staticText2 = wx.StaticText(page_5, wx.ID_ANY, "wxSimpleHtmlLiseBox")
        box_sizer2.Add(staticText2, wx.SizerFlags().Expand().Border(wx.ALL))

        self.html_listbox = wx.html.SimpleHtmlListBox(page_5, wx.ID_ANY)
        self.html_listbox.Append("<b>bold</b>")
        self.html_listbox.Append("<i>italics</i>")
        self.html_listbox.SetMinSize(self.ConvertDialogToPixels(wx.Size(-1, 40)))
        box_sizer2.Add(self.html_listbox, wx.SizerFlags(1).Expand().Border(wx.ALL))

        flex_grid_sizer.Add(box_sizer2, wx.SizerFlags().Border(wx.ALL))

        box_sizer_5.Add(flex_grid_sizer, wx.SizerFlags().Expand().Border(wx.ALL))
        page_5.SetSizerAndFit(box_sizer_5)

        page_3 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_3, "Combos")

        page_sizer_2 = wx.BoxSizer(wx.VERTICAL)

        static_box = wx.StaticBoxSizer(wx.VERTICAL, page_3, "Combos and Choices")

        box_sizer3 = wx.BoxSizer(wx.HORIZONTAL)

        static_box_sizer2 = wx.StaticBoxSizer(wx.VERTICAL, static_box.GetStaticBox(),
            "Combo")

        self.staticText3 = wx.StaticText(static_box_sizer2.GetStaticBox(), wx.ID_ANY,
            "Unsorted")
        static_box_sizer2.Add(self.staticText3, wx.SizerFlags().Border(wx.ALL))

        self.comboBox = wx.ComboBox(static_box_sizer2.GetStaticBox(), wx.ID_ANY)
        self.comboBox.Append("item #1")
        self.comboBox.Append("item #2")
        self.comboBox.Append("item #0")
        self.comboBox.SetStringSelection("item #2")
        self.comboBox.SetToolTip("Item #0 should be selected by default")
        static_box_sizer2.Add(self.comboBox, wx.SizerFlags().Expand().Border(wx.ALL))

        self.staticText4 = wx.StaticText(static_box_sizer2.GetStaticBox(), wx.ID_ANY,
            "Sorted")
        static_box_sizer2.Add(self.staticText4, wx.SizerFlags().Border(wx.ALL))

        self.comboBox2 = wx.ComboBox(static_box_sizer2.GetStaticBox(), wx.ID_ANY,
            wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, [], wx.CB_SORT)
        self.comboBox2.Append("item #1")
        self.comboBox2.Append("item #2")
        self.comboBox2.Append("item #0")
        self.comboBox2.SetStringSelection("item #2")
        self.comboBox2.SetToolTip("Item #2 should be selected by default")
        static_box_sizer2.Add(self.comboBox2, wx.SizerFlags().Border(wx.ALL))

        box_sizer3.Add(static_box_sizer2, wx.SizerFlags().Expand().Border(wx.ALL))

        static_box_sizer3 = wx.StaticBoxSizer(wx.VERTICAL, static_box.GetStaticBox(),
            "Choice")

        self.staticText5 = wx.StaticText(static_box_sizer3.GetStaticBox(), wx.ID_ANY,
            "Unsorted")
        static_box_sizer3.Add(self.staticText5, wx.SizerFlags().Border(wx.ALL))

        self.choice = wx.Choice(static_box_sizer3.GetStaticBox(), wx.ID_ANY)
        self.choice.Append("item #1")
        self.choice.Append("item #2")
        self.choice.Append("item #0")
        self.choice.SetSelection(2)
        self.choice.SetToolTip("Item #0 should be selected by default")
        static_box_sizer3.Add(self.choice, wx.SizerFlags().Border(wx.ALL))

        self.staticText6 = wx.StaticText(static_box_sizer3.GetStaticBox(), wx.ID_ANY,
            "Sorted")
        static_box_sizer3.Add(self.staticText6, wx.SizerFlags().Border(wx.ALL))

        self.choice2 = wx.Choice(static_box_sizer3.GetStaticBox(), wx.ID_ANY,
            wx.DefaultPosition, wx.DefaultSize, [], wx.CB_SORT)
        self.choice2.Append("item #1")
        self.choice2.Append("item #2")
        self.choice2.Append("item #0")
        self.choice2.SetSelection(2)
        self.choice2.SetToolTip("Item #2 should be selected by default")
        static_box_sizer3.Add(self.choice2, wx.SizerFlags().Border(wx.ALL))

        box_sizer3.Add(static_box_sizer3, wx.SizerFlags().Expand().Border(wx.ALL))

        static_box_sizer4 = wx.StaticBoxSizer(wx.VERTICAL, static_box.GetStaticBox(),
            "List")

        self.staticText7 = wx.StaticText(static_box_sizer4.GetStaticBox(), wx.ID_ANY,
            "Unsorted")
        static_box_sizer4.Add(self.staticText7, wx.SizerFlags().Border(wx.ALL))

        self.listbox = wx.ListBox(static_box_sizer4.GetStaticBox(), wx.ID_ANY)
        self.listbox.Append("item #1")
        self.listbox.Append("item #2")
        self.listbox.Append("item #0")
        static_box_sizer4.Add(self.listbox, wx.SizerFlags().Border(wx.ALL))

        self.staticText8 = wx.StaticText(static_box_sizer4.GetStaticBox(), wx.ID_ANY,
            "Sorted")
        static_box_sizer4.Add(self.staticText8, wx.SizerFlags().Border(wx.ALL))

        self.listBox2 = wx.ListBox(static_box_sizer4.GetStaticBox(), wx.ID_ANY,
            wx.DefaultPosition, wx.DefaultSize, [], wx.LB_SINGLE|wx.LB_SORT)
        self.listBox2.Append("item #1")
        self.listBox2.Append("item #2")
        self.listBox2.Append("item #0")
        static_box_sizer4.Add(self.listBox2, wx.SizerFlags().Border(wx.ALL))

        box_sizer3.Add(static_box_sizer4, wx.SizerFlags().Expand().Border(wx.ALL))

        static_box_sizer5 = wx.StaticBoxSizer(wx.VERTICAL, static_box.GetStaticBox(),
            "Checked")

        self.staticText9 = wx.StaticText(static_box_sizer5.GetStaticBox(), wx.ID_ANY,
            "Unsorted")
        static_box_sizer5.Add(self.staticText9, wx.SizerFlags().Border(wx.ALL))

        self.checkList_2 = wx.CheckListBox(static_box_sizer5.GetStaticBox(), wx.ID_ANY)
        self.checkList_2.Append("item #1")
        self.checkList_2.Append("item #2")
        self.checkList_2.Append("item #0")
        static_box_sizer5.Add(self.checkList_2, wx.SizerFlags().Border(wx.ALL))

        self.staticText10 = wx.StaticText(static_box_sizer5.GetStaticBox(), wx.ID_ANY,
            "Sorted")
        static_box_sizer5.Add(self.staticText10, wx.SizerFlags().Border(wx.ALL))

        self.checkList2 = wx.CheckListBox(static_box_sizer5.GetStaticBox(), wx.ID_ANY,
            wx.DefaultPosition, wx.DefaultSize, [], wx.LB_SINGLE|wx.LB_SORT)
        self.checkList2.Append("item #1")
        self.checkList2.Append("item #2")
        self.checkList2.Append("item #0")
        static_box_sizer5.Add(self.checkList2, wx.SizerFlags().Border(wx.ALL))

        box_sizer3.Add(static_box_sizer5, wx.SizerFlags().Expand().Border(wx.ALL))

        static_box.Add(box_sizer3, wx.SizerFlags().Expand().Border(wx.ALL))

        page_sizer_2.Add(static_box, wx.SizerFlags().Expand().Border(wx.ALL))

        box_sizer_20 = wx.BoxSizer(wx.VERTICAL)

        self.collapsible_pane = wx.CollapsiblePane(page_3, wx.ID_ANY, "Collapsible Pane")
        self.collapsible_pane.Expand()
        box_sizer_20.Add(self.collapsible_pane, wx.SizerFlags().Expand().Border(wx.ALL))

        box_sizer_21 = wx.BoxSizer(wx.HORIZONTAL)

        self.staticText_5 = wx.StaticText(self.collapsible_pane.GetPane(), wx.ID_ANY,
            "This text will be hidden if the Pane is collapsed.")
        box_sizer_21.Add(self.staticText_5, wx.SizerFlags().Border(wx.ALL))
        self.collapsible_pane.GetPane().SetSizerAndFit(box_sizer_21)

        page_sizer_2.Add(box_sizer_20, wx.SizerFlags().Border(wx.ALL))
        page_3.SetSizerAndFit(page_sizer_2)

        page_6 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.BORDER_THEME|wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_6, "Pickers")

        parent_sizer2 = wx.BoxSizer(wx.VERTICAL)

        static_box_2 = wx.StaticBoxSizer(wx.VERTICAL, page_6, "Pickers")

        grid_sizer = wx.GridSizer(2, 0, 0)

        box_sizer = wx.BoxSizer(wx.HORIZONTAL)

        staticText__2 = wx.StaticText(static_box_2.GetStaticBox(), wx.ID_ANY, "File:")
        box_sizer.Add(staticText__2, wx.SizerFlags().Center().Border(wx.ALL))

        self.filePicker = wx.FilePickerCtrl(static_box_2.GetStaticBox(), wx.ID_ANY,
            wx.EmptyString, wx.FileSelectorPromptStr, "BMP files|*.bmp", wx.DefaultPosition,
            wx.DefaultSize, wx.FLP_USE_TEXTCTRL|wx.FLP_OPEN|wx.FLP_FILE_MUST_EXIST)
        box_sizer.Add(self.filePicker, wx.SizerFlags().Border(wx.ALL))

        grid_sizer.Add(box_sizer, wx.SizerFlags().Border(wx.ALL))

        box_sizer_2 = wx.BoxSizer(wx.HORIZONTAL)

        staticText__3 = wx.StaticText(static_box_2.GetStaticBox(), wx.ID_ANY, "Directory:")
        box_sizer_2.Add(staticText__3, wx.SizerFlags().Center().Border(wx.ALL))

        self.dirPicker = wx.DirPickerCtrl(static_box_2.GetStaticBox(), wx.ID_ANY, ".",
            wx.DirSelectorPromptStr, wx.DefaultPosition, wx.DefaultSize,
            wx.DIRP_DEFAULT_STYLE|wx.DIRP_SMALL)
        box_sizer_2.Add(self.dirPicker, wx.SizerFlags().Border(wx.ALL))

        grid_sizer.Add(box_sizer_2, wx.SizerFlags().Border(wx.ALL))

        box_sizer_4 = wx.BoxSizer(wx.HORIZONTAL)

        staticText__4 = wx.StaticText(static_box_2.GetStaticBox(), wx.ID_ANY, "Colour:")
        box_sizer_4.Add(staticText__4, wx.SizerFlags().Center().Border(wx.ALL))

        self.colourPicker = wx.ColourPickerCtrl(static_box_2.GetStaticBox(), wx.ID_ANY,
            wx.BLACK)
        box_sizer_4.Add(self.colourPicker, wx.SizerFlags().Border(wx.ALL))

        grid_sizer.Add(box_sizer_4, wx.SizerFlags().Border(wx.ALL))

        box_sizer_9 = wx.BoxSizer(wx.HORIZONTAL)

        staticText__7 = wx.StaticText(static_box_2.GetStaticBox(), wx.ID_ANY, "Font:")
        box_sizer_9.Add(staticText__7, wx.SizerFlags().Center().Border(wx.ALL))

        self.fontPicker = wx.FontPickerCtrl(static_box_2.GetStaticBox(), wx.ID_ANY,
            wx.Font(wx.NORMAL_FONT.GetPointSize(), wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL,
            wx.FONTWEIGHT_NORMAL, False, "Comic Sans MS"), wx.DefaultPosition, wx.DefaultSize,
            wx.FNTP_DEFAULT_STYLE|wx.FNTP_USE_TEXTCTRL)
        box_sizer_9.Add(self.fontPicker, wx.SizerFlags().Border(wx.ALL))

        grid_sizer.Add(box_sizer_9, wx.SizerFlags().Border(wx.ALL))

        box_sizer_6 = wx.BoxSizer(wx.HORIZONTAL)

        staticText__5 = wx.StaticText(static_box_2.GetStaticBox(), wx.ID_ANY, "Date:")
        box_sizer_6.Add(staticText__5, wx.SizerFlags().Center().Border(wx.ALL))

        self.datePicker = wx.adv.DatePickerCtrl(static_box_2.GetStaticBox(), wx.ID_ANY,
            wx.DefaultDateTime)
        box_sizer_6.Add(self.datePicker, wx.SizerFlags().Border(wx.ALL))

        grid_sizer.Add(box_sizer_6, wx.SizerFlags().Border(wx.ALL))

        box_sizer_8 = wx.BoxSizer(wx.HORIZONTAL)

        staticText__6 = wx.StaticText(static_box_2.GetStaticBox(), wx.ID_ANY, "Time:")
        box_sizer_8.Add(staticText__6, wx.SizerFlags().Center().Border(wx.ALL))

        self.timePicker = wx.adv.TimePickerCtrl(static_box_2.GetStaticBox(), wx.ID_ANY,
            wx.DefaultDateTime)
        box_sizer_8.Add(self.timePicker, wx.SizerFlags().Border(wx.ALL))

        grid_sizer.Add(box_sizer_8, wx.SizerFlags().Border(wx.ALL))

        static_box_2.Add(grid_sizer, wx.SizerFlags().Border(wx.ALL))

        parent_sizer2.Add(static_box_2, wx.SizerFlags().Expand().Border(wx.ALL))

        self.fileCtrl = wx.FileCtrl(page_6, wx.ID_ANY, "", "",
            wx.FileSelectorDefaultWildcardStr, wx.FC_OPEN, wx.DefaultPosition, wx.DefaultSize)
        parent_sizer2.Add(self.fileCtrl, wx.SizerFlags().Border(wx.ALL))
        page_6.SetSizerAndFit(parent_sizer2)

        page = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page, "RibbonBar")

        page_sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.rbnBar = wx.ribbon.RibbonBar(page, wx.ID_ANY, wx.DefaultPosition,
            wx.DefaultSize, wx.ribbon.RIBBON_BAR_SHOW_PAGE_LABELS|
            wx.ribbon.RIBBON_BAR_SHOW_PAGE_ICONS|wx.ribbon.RIBBON_BAR_FLOW_HORIZONTAL)

        self.rbnBar.SetArtProvider(wx.ribbon.RibbonAUIArtProvider())
        page_sizer_3.Add(self.rbnBar, wx.SizerFlags().Expand().Border(wx.ALL))

        rbnPage = wx.ribbon.RibbonPage(self.rbnBar, wx.ID_ANY, "First")
        self.rbnBar.SetActivePage(rbnPage)

        rbnPanel = wx.ribbon.RibbonPanel(rbnPage, wx.ID_ANY, "English",
            images.english_png.Bitmap)

        first_parent_sizer = wx.BoxSizer(wx.VERTICAL)

        box_sizer_15 = wx.BoxSizer(wx.VERTICAL)

        self.staticText = wx.StaticText(rbnPanel, wx.ID_ANY,
            "This is a sentence in English.")
        self.staticText.Wrap(200)
        box_sizer_15.Add(self.staticText, wx.SizerFlags().Border(wx.ALL))

        self.btn_6 = wx.Button(rbnPanel, wx.ID_ANY, "Switch")
        box_sizer_15.Add(self.btn_6, wx.SizerFlags().Center().Border(wx.ALL))

        first_parent_sizer.Add(box_sizer_15, wx.SizerFlags(1).Expand().Border(wx.ALL))
        rbnPanel.SetSizerAndFit(first_parent_sizer)

        rbnPanel_2 = wx.ribbon.RibbonPanel(rbnPage, wx.ID_ANY, "French",
            images.french_png.Bitmap)
        rbnPanel_2.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_MENU))

        first_parent_sizer_2 = wx.BoxSizer(wx.VERTICAL)

        box_sizer_16 = wx.BoxSizer(wx.VERTICAL)

        self.staticText_3 = wx.StaticText(rbnPanel_2, wx.ID_ANY,
            "Ceci est une phrase en français.")
        self.staticText_3.Wrap(200)
        box_sizer_16.Add(self.staticText_3, wx.SizerFlags().Border(wx.ALL))

        self.btn_7 = wx.Button(rbnPanel_2, wx.ID_ANY, "Switch")
        box_sizer_16.Add(self.btn_7, wx.SizerFlags().Center().Border(wx.ALL))

        first_parent_sizer_2.Add(box_sizer_16, wx.SizerFlags(1).Expand().Border(wx.ALL))
        rbnPanel_2.SetSizerAndFit(first_parent_sizer_2)

        ribbonPage2 = wx.ribbon.RibbonPage(self.rbnBar, wx.ID_ANY, "Second")

        ribbonPanel2 = wx.ribbon.RibbonPanel(ribbonPage2, wx.ID_ANY, "Button Panel")

        rbnBtnBar = wx.ribbon.RibbonButtonBar(ribbonPanel2, wx.ID_ANY)
        rbnBtnBar.AddButton(wx.ID_ANY, "Forward", wx.ArtProvider.GetBitmap(
            wx.ART_GO_FORWARD, wx.ART_OTHER), "", wx.ribbon.RIBBON_BUTTON_NORMAL)
        rbnBtnBar.AddButton(wx.ID_ANY, "Backward", images.left_png.Bitmap, "",
            wx.ribbon.RIBBON_BUTTON_NORMAL)
        rbnBtnBar.Realize()

        ribbonPage_2 = wx.ribbon.RibbonPage(self.rbnBar, wx.ID_ANY, "Third")

        ribbonPanel_2 = wx.ribbon.RibbonPanel(ribbonPage_2, wx.ID_ANY, "Tool Panel")

        rbnToolBar = wx.ribbon.RibbonToolBar(ribbonPanel_2, wx.ID_ANY)
        rbnToolBar.AddTool(wx.ID_FILE1, wx.ArtProvider.GetBitmap(wx.ART_GOTO_FIRST,
            wx.ART_TOOLBAR), "", wx.ribbon.RIBBON_BUTTON_NORMAL)
        rbnToolBar.AddSeparator()
        rbnToolBar.AddTool(wx.ID_FILE9, wx.ArtProvider.GetBitmap(wx.ART_GOTO_LAST,
            wx.ART_TOOLBAR), "", wx.ribbon.RIBBON_BUTTON_NORMAL)
        rbnToolBar.Realize()

        ribbonPage_3 = wx.ribbon.RibbonPage(self.rbnBar, wx.ID_ANY, "Fourth")

        rbnPanel_3 = wx.ribbon.RibbonPanel(ribbonPage_3, wx.ID_ANY, "Gallery Panel")

        rbnGallery = wx.ribbon.RibbonGallery(rbnPanel_3, wx.ID_ANY)
        rbnGallery.Append(images.toggle_button_png.Bitmap, wx.ID_ANY)
        rbnGallery.Realize()
        page.SetSizerAndFit(page_sizer_3)

        page_7 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_7, "Banners")
        page_7.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNFACE))

        page_sizer = wx.BoxSizer(wx.VERTICAL)

        box_sizer_17 = wx.BoxSizer(wx.HORIZONTAL)

        self.banner_left = wx.adv.BannerWindow(page_7, wx.ID_ANY, wx.LEFT)
        self.banner_left.SetText("Left Banner", "")
        box_sizer_17.Add(self.banner_left, wx.SizerFlags().Border(wx.ALL))

        self.banner_top = wx.adv.BannerWindow(page_7, wx.ID_ANY, wx.TOP)
        self.banner_top.SetGradient(wx.Colour("#BFCDDB"), wx.Colour("#0078D7"))
        self.banner_top.SetText("Top Banner", "This is the top banner message")
        box_sizer_17.Add(self.banner_top, wx.SizerFlags().Border(wx.ALL))

        self.banner_right = wx.adv.BannerWindow(page_7, wx.ID_ANY, wx.RIGHT)
        self.banner_right.SetText("Right Banner", "")
        box_sizer_17.Add(self.banner_right, wx.SizerFlags().Border(wx.ALL))

        page_sizer.Add(box_sizer_17, wx.SizerFlags(1).Border(wx.ALL))

        box_sizer_18 = wx.BoxSizer(wx.HORIZONTAL)

        self.banner = wx.adv.BannerWindow(page_7, wx.ID_ANY, wx.LEFT)
        self.banner.SetBitmap(wx.BitmapBundle.FromBitmap(images.wiztest_png.Bitmap))
        self.banner.SetText("This is a long title", "")
        box_sizer_18.Add(self.banner, wx.SizerFlags().Border(wx.ALL))

        page_sizer.Add(box_sizer_18, wx.SizerFlags().Border(wx.ALL))
        page_7.SetSizerAndFit(page_sizer)

        page_8 = wx.Panel(self.notebook, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize,
            wx.TAB_TRAVERSAL)
        self.notebook.AddPage(page_8, "Data")
        page_8.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BTNFACE))

        page_sizer_4 = wx.BoxSizer(wx.VERTICAL)

        self.propertyGrid = wx.propgrid.PropertyGrid(page_8, wx.ID_ANY)
        page_sizer_4.Add(self.propertyGrid, wx.SizerFlags().Expand().Border(wx.ALL))

        self.propertyGridItem = self.propertyGrid.Append(wx.propgrid.PropertyCategory(
        "CategoryName", "CategoryName"))

        self.propertyGridItem_2 = self.propertyGrid.Append(wx.propgrid.StringProperty(
        "String", ""))

        self.propertyGridItem_3 = self.propertyGrid.Append(wx.propgrid.IntProperty(
        "Integer", ""))
        page_8.SetSizerAndFit(page_sizer_4)

        box_sizer_14 = wx.BoxSizer(wx.HORIZONTAL)

        staticText_4 = wx.StaticText(self, wx.ID_ANY, "Events:")
        box_sizer_14.Add(staticText_4, wx.SizerFlags().Center().Border(wx.ALL))

        btn = wx.Button(self, wx.ID_ANY, "Clear Events")
        box_sizer_14.Add(btn, wx.SizerFlags().Border(wx.ALL))

        dlg_sizer.Add(box_sizer_14, wx.SizerFlags().Border(wx.ALL))

        self.events_list = wx.ListBox(self, wx.ID_ANY)
        self.events_list.SetMinSize(self.ConvertDialogToPixels(wx.Size(-1, 60)))
        dlg_sizer.Add(self.events_list, wx.SizerFlags(1).Expand().Border(wx.ALL))

        if "wxMac" not in wx.PlatformInfo:
            stdBtn_line = wx.StaticLine(self, wx.ID_ANY, wx.DefaultPosition, wx.Size(20, -1))
            dlg_sizer.Add(stdBtn_line, wx.SizerFlags().Expand().Border(wx.ALL))

        stdBtn = wx.StdDialogButtonSizer()
        stdBtn_OK = wx.Button(self, wx.ID_OK)
        stdBtn.SetAffirmativeButton(stdBtn_OK)
        stdBtn_Cancel = wx.Button(self, wx.ID_CANCEL)
        stdBtn.SetCancelButton(stdBtn_Cancel)
        stdBtn_OK.SetDefault()
        stdBtn.Realize()
        dlg_sizer.Add(stdBtn, wx.SizerFlags().Expand().Border(wx.ALL))

        self.SetSizerAndFit(dlg_sizer)
        self.Centre(wx.BOTH)

        # Bind Event handlers
        self.btn.Bind(wx.EVT_BUTTON, lambda event:
            self.events_list.Select(self.events_list.Append("Button: wx.EVT_BUTTON")))
        self.btn_3.Bind(wx.EVT_BUTTON, lambda event:self.OnEventName("Button: wx.EVT_BUTTON"))
        btn2.Bind(wx.EVT_BUTTON, self.OnPopupBtn)
        self.btn_7.Bind(wx.EVT_BUTTON, lambda event:self.OnEventName("Ceci est une phrase en français."))
        self.btn_2.Bind(wx.EVT_BUTTON, lambda event:
            self.events_list.Select(self.events_list.Append("Button: wx.EVT_BUTTON")))
        self.btn_bitmaps.Bind(wx.EVT_BUTTON, lambda event:
            self.events_list.Select(self.events_list.Append("Button: wx.EVT_BUTTON")))
        self.btn_4.Bind(wx.EVT_BUTTON, lambda event:
            self.events_list.Select(self.events_list.Append("Button: wx.EVT_BUTTON")))
        self.btn_6.Bind(wx.EVT_BUTTON, lambda event:self.OnEventName("This is a sentence in English."))
        btn.Bind(wx.EVT_BUTTON, self.OnClearList)
        self.btn_5.Bind(wx.EVT_BUTTON, lambda event:
            self.events_list.Select(self.events_list.Append("CmdLinkBtn: wx.EVT_BUTTON")))
        disable_bitmaps.Bind(wx.EVT_CHECKBOX, self.OnDisableBitmapsBtn)
        self.checkList2.Bind(wx.EVT_CHECKLISTBOX, lambda event:
            self.OnEventName("CheckListBox2: wx.EVT_CHECKLISTBOX"))
        self.checkList_2.Bind(wx.EVT_CHECKLISTBOX, lambda event:
            self.OnEventName("CheckListBox1: wx.EVT_CHECKLISTBOX"))
        self.choice.Bind(wx.EVT_CHOICE, lambda event:self.OnEventName("Choice: wx.EVT_CHOICE"))
        self.choice2.Bind(wx.EVT_CHOICE, lambda event:self.OnEventName("OnChoice: wx.EVT_CHOICE"))
        self.colourPicker.Bind(wx.EVT_COLOURPICKER_CHANGED, lambda event:
            self.OnEventName("ColourPicker: wx.EVT_COLOURPICKER_CHANGED"))
        self.comboBox.Bind(wx.EVT_COMBOBOX, lambda event:self.OnEventName("Combobox: wx.EVT_COMBOBOX"))
        self.comboBox2.Bind(wx.EVT_COMBOBOX, lambda event:self.OnEventName("OnCombobox: wx.EVT_COMBOBOX"))
        self.datePicker.Bind(wx.adv.EVT_DATE_CHANGED, lambda event:
            self.OnEventName("DatePicker: wx.EVT_DATE_CHANGED"))
        self.dirPicker.Bind(wx.EVT_DIRPICKER_CHANGED, lambda event:
            self.OnEventName("DirPicker: wx.EVT_DIRPICKER_CHANGED"))
        self.filePicker.Bind(wx.EVT_FILEPICKER_CHANGED, lambda event:
            self.OnEventName("FilePicker: wx.EVT_FILEPICKER_CHANGED"))
        self.fontPicker.Bind(wx.EVT_FONTPICKER_CHANGED, lambda event:
            self.OnEventName("FontPicker: wx.OnFontChanged"))
        self.Bind(wx.EVT_INIT_DIALOG, self.OnInit)
        self.listbox.Bind(wx.EVT_LISTBOX, lambda event:self.OnEventName("ListBox1: wx.EVT_LISTBOX"))
        self.listBox2.Bind(wx.EVT_LISTBOX, lambda event:self.OnEventName("ListBox2: wx.EVT_LISTBOX"))
        self.notebook.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChanged)
        radioBox.Bind(wx.EVT_RADIOBOX, lambda event:self.OnEventName("RadioBox: wx.EVT_RADIOBOX"))
        self.radioBtn_4.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("wx.RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn_2.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("wx.RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn_7.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("wx.RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn_6.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("wx.RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn2.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn_5.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("wx.RadioButton: wx.EVT_RADIOBUTTON"))
        self.radioBtn_3.Bind(wx.EVT_RADIOBUTTON, lambda event:
            self.OnEventName("wx.RadioButton: wx.EVT_RADIOBUTTON"))
        self.scintilla.Bind(wx.stc.EVT_STC_CHANGE, lambda event:
            self.OnEventName("wx.StyledTextCtrl: wx.EVT_STC_CHANGE"))
        self.text_ctrl.Bind(wx.EVT_TEXT, lambda event:self.OnEventName("wx.TextCtrl: wx.EVT_TEXT"))
        self.richText.Bind(wx.EVT_TEXT, lambda event:self.OnEventName("wx.RichTextCtrl: wx.EVT_TEXT"))
        self.timePicker.Bind(wx.adv.EVT_TIME_CHANGED, lambda event:
            self.OnEventName("TimePicker: wx.EVT_TIME_CHANGED"))
        self.toggleBtn.Bind(wx.EVT_TOGGLEBUTTON, lambda event:self.OnEventName("OnToggle: wx.EVT_BUTTON"))
        self.toggleBtn_2.Bind(wx.EVT_TOGGLEBUTTON, self.OnToggleButton)

    # Unimplemented Event handler functions
    # Copy any listed and paste them below the comment block, or to your inherited class.
    """
    def (self, event):
        event.Skip()

    """

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

    def OnInit(self, event):
        event.Skip()

    def OnClearList(self, event):
        self.events_list.Clear()

    def OnDisableBitmapsBtn(self, event):
        self.m_btn_bitmaps.Enable(not event.IsChecked())

    def OnPageChanged(self, event):
        self.events_list.Clear()
        event.Skip()

    def OnPopupBtn(self, event):
        self.popupwin = popupwin.PopupWin(self)
        btn = event.GetEventObject()
        pos = btn.ClientToScreen(wx.Point(0, 0))
        self.popupwin.Position(pos, btn.GetSize());
        self.popupwin.Show()

    def OnEventName(self, event_name):
        pos = self.events_list.Append(event_name)
        self.events_list.Select(pos)

    def OnToggleButton(self, event):
        if (self.m_toggleBtn_2.GetValue()):
            self.m_animation_ctrl.Play()
        else:
            self.m_animation_ctrl.Stop()
