///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/gbsizer.h>
#include <wx/panel.h>
#include <wx/radiobox.h>
#include <wx/ribbon/buttonbar.h>
#include <wx/ribbon/gallery.h>
#include <wx/ribbon/page.h>
#include <wx/ribbon/panel.h>
#include <wx/sizer.h>
#include <wx/statbox.h>
#include <wx/statline.h>
#include <wx/valgen.h>
#include <wx/wrapsizer.h>

#include "images.h"

#include "maintestdialog.h"

#include <wx/animate.h>

#include <wx/mstream.h>  // memory stream classes

// Convert a data array into a wxAnimation
inline wxAnimation wxueAnimation(const unsigned char* data, size_t size_data)
{
    wxMemoryInputStream strm(data, size_data);
    wxAnimation animation;
    animation.Load(strm);
    return animation;
};
namespace wxue_img
{
    extern const unsigned char disabled_png[437];
    extern const unsigned char english_png[541];
    extern const unsigned char focus_png[517];
    extern const unsigned char french_png[252];
    extern const unsigned char left_png[158];
    extern const unsigned char no_hour_png[347];
    extern const unsigned char normal_png[508];
    extern const unsigned char toggle_button_png[277];
    extern const unsigned char wiztest_png[1239];
}

bool MainTestDialog::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;
    if (!wxImage::FindHandler(wxBITMAP_TYPE_GIF))
        wxImage::AddHandler(new wxGIFHandler);
    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBK_TOP|wxNB_MULTILINE);
    dlg_sizer->Add(m_notebook, wxSizerFlags().Expand().Border(wxALL));

    auto* page_2 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_2, "Text");

    auto* page_sizer_1 = new wxBoxSizer(wxVERTICAL);

    m_text_ctrl = new wxTextCtrl(page_2, TXT_CTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_RICH2);
    m_text_ctrl->SetHint("wxTextCtrl");
    page_sizer_1->Add(m_text_ctrl, wxSizerFlags().Expand().Border(wxALL));

    m_richText = new wxRichTextCtrl(page_2, ID_RICHTEXT, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxRE_MULTILINE|
        wxVSCROLL | wxHSCROLL | wxNO_BORDER | wxWANTS_CHARS);
    m_richText->SetHint("wxRichTextCtrl");
    m_richText->SetMinSize(ConvertDialogToPixels(wxSize(150, 30)));
    page_sizer_1->Add(m_richText, wxSizerFlags().Expand().Border(wxALL));

    m_scintilla = new wxStyledTextCtrl(page_2);
    {
        m_scintilla->SetLexer(wxSTC_LEX_CPP);
        m_scintilla->SetEOLMode(wxSTC_EOL_LF);
        m_scintilla->SetViewWhiteSpace(wxSTC_WS_VISIBLEALWAYS);
        // Sets text margin scaled appropriately for the current DPI on Windows,
        // 5 on wxGTK or wxOSX
        m_scintilla->SetMarginLeft(wxSizerFlags::GetDefaultBorder());
        m_scintilla->SetMarginRight(wxSizerFlags::GetDefaultBorder());
        m_scintilla->SetMarginWidth(1, 0); // Remove default margin
        m_scintilla->SetBackSpaceUnIndents(true);
    }
    m_scintilla->SetMinSize(ConvertDialogToPixels(wxSize(150, 60)));
    page_sizer_1->Add(m_scintilla, wxSizerFlags().Expand().Border(wxALL));

    m_htmlWin = new wxHtmlWindow(page_2);
    m_htmlWin->SetPage("This is an <b>HTML</b> window");
    m_htmlWin->SetMinSize(ConvertDialogToPixels(wxSize(100, 60)));
    page_sizer_1->Add(m_htmlWin, wxSizerFlags().Expand().Border(wxALL));
    page_2->SetSizerAndFit(page_sizer_1);

    auto* page_4 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_4, "Buttons");

    auto* box_sizer_3 = new wxBoxSizer(wxVERTICAL);

    auto* grid_bag_sizer = new wxGridBagSizer();

    m_btn = new wxButton(page_4, wxID_ANY, "Normal");
    m_btn->SetToolTip("A normal button");
    grid_bag_sizer->Add(m_btn, wxGBPosition(0, 0), wxGBSpan(1, 1), wxALL, 5);

    m_btn_2 = new wxButton(page_4, wxID_ANY, wxEmptyString);
    m_btn_2->SetLabelMarkup("<b><span foreground=\'red\'>Markup</span></b>");
    m_btn_2->SetToolTip("Text should be Bold and Red.");
    grid_bag_sizer->Add(m_btn_2, wxGBPosition(0, 1), wxGBSpan(1, 1), wxALL, 5);

    m_btn_bitmaps = new wxButton(page_4, wxID_ANY, "Bitmaps");
#if wxCHECK_VERSION(3, 1, 6)
    {
        m_btn_bitmaps->SetBitmap(wxue_img::bundle_normal_png());
        m_btn_bitmaps->SetBitmapDisabled(wxue_img::bundle_no_hour_png());
        m_btn_bitmaps->SetBitmapCurrent(wxue_img::bundle_focus_png());
    }
#else
    m_btn_bitmaps->SetBitmap(wxueImage(wxue_img::normal_png, sizeof(wxue_img::normal_png)));
    m_btn_bitmaps->SetBitmapDisabled(wxueImage(wxue_img::no_hour_png, sizeof(wxue_img::no_hour_png)));
    m_btn_bitmaps->SetBitmapCurrent(wxueImage(wxue_img::focus_png, sizeof(wxue_img::focus_png)));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_btn_bitmaps->SetToolTip("Bitmap should change when mouse is over button, or button is disabled.");
    grid_bag_sizer->Add(m_btn_bitmaps, wxGBPosition(0, 2), wxGBSpan(1, 1), wxALL, 5);

    m_btn_4 = new wxButton(page_4, wxID_ANY, "Right");
    m_btn_4->SetBitmapPosition(wxRIGHT);
#if wxCHECK_VERSION(3, 1, 6)
        m_btn_4->SetBitmap(wxue_img::bundle_normal_png());
#else
    m_btn_4->SetBitmap(wxueImage(wxue_img::normal_png, sizeof(wxue_img::normal_png)));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_btn_4->SetToolTip("Bitmap should be on the right side (fails in wxPython 4.2).");
    grid_bag_sizer->Add(m_btn_4, wxGBPosition(0, 3), wxGBSpan(1, 1), wxALL, 5);

    m_toggleBtn = new wxToggleButton(page_4, wxID_ANY, "Toggle", wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    m_toggleBtn->SetToolTip("Style set to exact fit, so it should be a bit smaller than usual.");
    grid_bag_sizer->Add(m_toggleBtn, wxGBPosition(0, 4), wxGBSpan(1, 1), wxALL, 5);

    auto* disable_bitmaps = new wxCheckBox(page_4, wxID_ANY, "Disable");
    disable_bitmaps->SetToolTip("This will change the enable state and bitmap of the Bitmaps button.");
    grid_bag_sizer->Add(disable_bitmaps, wxGBPosition(2, 2), wxGBSpan(1, 1), wxALL, 5);

    box_sizer_3->Add(grid_bag_sizer, wxSizerFlags().Border(wxALL));

    auto* box_sizer_7 = new wxBoxSizer(wxHORIZONTAL);

    m_btn_5 = new wxCommandLinkButton(page_4, wxID_ANY, "Command", "wxCommandLinkButton");
#if wxCHECK_VERSION(3, 1, 6)
        m_btn_5->SetBitmap(wxArtProvider::GetBitmapBundle(wxART_GO_FORWARD, wxART_OTHER));
#else
    m_btn_5->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_FORWARD, wxART_OTHER));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_btn_5->SetToolTip("The bitmap for this is from Art Provider.");
    box_sizer_7->Add(m_btn_5, wxSizerFlags().Border(wxALL));

    wxString radioBox_choices[] = {
        "Button zero ",
        "Button one ",
        "Button two "
    };
    // Trailing spaces added to avoid clipping
    auto* radioBox = new wxRadioBox(page_4, wxID_ANY, "Radio Box", wxDefaultPosition, wxDefaultSize, 3, radioBox_choices,
        0, wxRA_SPECIFY_ROWS);
    radioBox->SetSelection(1);
    radioBox->SetValidator(wxGenericValidator(&m_valRadio));
    box_sizer_7->Add(radioBox, wxSizerFlags().Border(wxALL));

    m_checkBox_sizer = new wxCheckBox(page_4, wxID_ANY, "Checkbox");
    auto* static_box_4 = new wxStaticBoxSizer(new wxStaticBox(page_4, wxID_ANY,
#if wxCHECK_VERSION(3, 1, 1)
        m_checkBox_sizer),
#else
        wxEmptyString),
#endif
    wxVERTICAL);

    m_radioBtn_4 = new wxRadioButton(static_box_4->GetStaticBox(), wxID_ANY, "First button");
    static_box_4->Add(m_radioBtn_4, wxSizerFlags().Border(wxALL));

    m_radioBtn_2 = new wxRadioButton(static_box_4->GetStaticBox(), wxID_ANY, "Second button");
    m_radioBtn_2->SetValue(true);
    static_box_4->Add(m_radioBtn_2, wxSizerFlags().Border(wxALL));

    m_radioBtn_3 = new wxRadioButton(static_box_4->GetStaticBox(), wxID_ANY, "Third button");
    static_box_4->Add(m_radioBtn_3, wxSizerFlags().Border(wxALL));

    box_sizer_7->Add(static_box_4, wxSizerFlags().Border(wxALL));

    m_radioBtn__sizer = new wxRadioButton(page_4, wxID_ANY, "Radio");
    auto* static_box_5 = new wxStaticBoxSizer(new wxStaticBox(page_4, wxID_ANY,
#if wxCHECK_VERSION(3, 1, 1)
        m_radioBtn__sizer),
#else
        wxEmptyString),
#endif
    wxVERTICAL);

    m_radioBtn_5 = new wxRadioButton(static_box_5->GetStaticBox(), wxID_ANY, "First button");
    static_box_5->Add(m_radioBtn_5, wxSizerFlags().Border(wxALL));

    m_radioBtn_6 = new wxRadioButton(static_box_5->GetStaticBox(), wxID_ANY, "Second button");
    m_radioBtn_6->SetValue(true);
    static_box_5->Add(m_radioBtn_6, wxSizerFlags().Border(wxALL));

    m_radioBtn_7 = new wxRadioButton(static_box_5->GetStaticBox(), wxID_ANY, "Third button");
    static_box_5->Add(m_radioBtn_7, wxSizerFlags().Border(wxALL));

    box_sizer_7->Add(static_box_5, wxSizerFlags().Border(wxALL));

    box_sizer_3->Add(box_sizer_7, wxSizerFlags().Border(wxALL));

    auto* static_line = new wxStaticLine(page_4, wxID_ANY, wxDefaultPosition, ConvertDialogToPixels(wxSize(20, -1)),
        wxLI_HORIZONTAL);
    box_sizer_3->Add(static_line, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_19 = new wxBoxSizer(wxHORIZONTAL);

    auto* wrap_sizer = new wxWrapSizer(wxHORIZONTAL, wxEXTEND_LAST_ON_EACH_LINE|wxREMOVE_LEADING_SPACES);

    m_btn_3 = new wxButton(page_4, wxID_ANY, "First btn");
    wrap_sizer->Add(m_btn_3, wxSizerFlags().Border(wxALL));

    auto* btn2 = new wxButton(page_4, wxID_ANY, "Popup");
    wrap_sizer->Add(btn2, wxSizerFlags().Border(wxALL));

    m_radioBtn = new wxRadioButton(page_4, wxID_ANY, "First radio", wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    wrap_sizer->Add(m_radioBtn, wxSizerFlags().Center().Border(wxALL));

    m_radioBtn2 = new wxRadioButton(page_4, wxID_ANY, "Second radio");
    wrap_sizer->Add(m_radioBtn2, wxSizerFlags().Center().Border(wxALL));

    m_checkBox = new wxCheckBox(page_4, wxID_ANY, "Checkbox", wxDefaultPosition, wxDefaultSize, wxCHK_3STATE);
    m_checkBox->Set3StateValue(wxCHK_UNDETERMINED);
    wrap_sizer->Add(m_checkBox, wxSizerFlags().Center().Border(wxALL));

    box_sizer_19->Add(wrap_sizer, wxSizerFlags().Expand().Border(wxALL));

    m_checkPlayAnimation = new wxCheckBox(page_4, wxID_ANY, "Play Animation");
    auto* static_box_3 = new wxStaticBoxSizer(new wxStaticBox(page_4, wxID_ANY,
#if wxCHECK_VERSION(3, 1, 1)
        m_checkPlayAnimation),
#else
        wxEmptyString),
#endif
    wxVERTICAL);

    m_toggleBtn_2 = new wxToggleButton(static_box_3->GetStaticBox(), wxID_ANY, "Play Animation", wxDefaultPosition,
        wxDefaultSize, wxBU_EXACTFIT);
    static_box_3->Add(m_toggleBtn_2, wxSizerFlags().Border(wxALL));

    m_animation_ctrl = new wxAnimationCtrl(static_box_3->GetStaticBox(), wxID_ANY, wxueAnimation(wxue_img::clr_hourglass_gif, sizeof(wxue_img::clr_hourglass_gif)),
        wxDefaultPosition, wxDefaultSize, wxAC_DEFAULT_STYLE);
    m_animation_ctrl->SetInactiveBitmap(wxueImage(wxue_img::disabled_png, sizeof(wxue_img::disabled_png)));
    static_box_3->Add(m_animation_ctrl, wxSizerFlags().Border(wxALL));

    box_sizer_19->Add(static_box_3, wxSizerFlags().Border(wxALL));

    indicator = new wxActivityIndicator(page_4, wxID_ANY);
    indicator->Start();
    box_sizer_19->Add(indicator, wxSizerFlags().Border(wxALL));

    box_sizer_3->Add(box_sizer_19, wxSizerFlags().Expand().Border(wxALL));
    page_4->SetSizerAndFit(box_sizer_3);

    auto* page_5 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_5, "Lists");

    auto* box_sizer_5 = new wxBoxSizer(wxVERTICAL);

    auto* flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);

    auto* box_sizer_10 = new wxBoxSizer(wxVERTICAL);

    m_staticText_2 = new wxStaticText(page_5, wxID_ANY, "wxRearrangeCtrl");
    box_sizer_10->Add(m_staticText_2, wxSizerFlags().Expand().Border(wxALL));

    m_rearrange = new wxRearrangeCtrl(page_5, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxArrayInt(), wxArrayString());
    box_sizer_10->Add(m_rearrange, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_10, wxSizerFlags().Border(wxALL));

    auto* box_sizer_11 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_3 = new wxStaticText(page_5, wxID_ANY, "wxCheckListBox");
    box_sizer_11->Add(staticText_3, wxSizerFlags().Expand().Border(wxALL));

    m_checkList = new wxCheckListBox(page_5, wxID_ANY);
    box_sizer_11->Add(m_checkList, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_11, wxSizerFlags().Border(wxALL));

    auto* box_sizer_12 = new wxBoxSizer(wxVERTICAL);

    m_staticText_4 = new wxStaticText(page_5, wxID_ANY, "wxListView");
    box_sizer_12->Add(m_staticText_4, wxSizerFlags().Border(wxALL));

    m_listview = new wxListView(page_5, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_SINGLE_SEL|wxLC_REPORT);
    {
        m_listview->AppendColumn("name");
        m_listview->AppendColumn("value");
        auto info = wxListItem();
        info.Clear();
        info.SetId(0);
        auto idx = m_listview->InsertItem(info);
        m_listview->SetItem(idx, 0, "meaning");
        m_listview->SetItem(idx, 1, "42");
    }
    m_listview->SetToolTip("Separate content columns with a semi-colon (;)");
    box_sizer_12->Add(m_listview, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_12, wxSizerFlags().Border(wxALL));

    auto* box_sizer_13 = new wxBoxSizer(wxHORIZONTAL);

    m_edit_listbox = new wxEditableListBox(page_5, wxID_ANY, "My Editable ListBox", wxDefaultPosition, wxDefaultSize,
        wxEL_ALLOW_NEW|wxEL_ALLOW_EDIT|wxEL_ALLOW_DELETE);
    box_sizer_13->Add(m_edit_listbox, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_13, wxSizerFlags().Border(wxALL));

    box_sizer_5->Add(flex_grid_sizer, wxSizerFlags().Border(wxALL));
    page_5->SetSizerAndFit(box_sizer_5);

    auto* page_3 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_3, "Combos");

    auto* page_sizer_2 = new wxBoxSizer(wxVERTICAL);

    auto* static_box = new wxStaticBoxSizer(wxVERTICAL, page_3, "Combos and Choices");

    auto* box_sizer3 = new wxBoxSizer(wxHORIZONTAL);

    auto* static_box_sizer2 = new wxStaticBoxSizer(wxVERTICAL, static_box->GetStaticBox(), "Combo");

    m_staticText3 = new wxStaticText(static_box_sizer2->GetStaticBox(), wxID_ANY, "Unsorted");
    static_box_sizer2->Add(m_staticText3, wxSizerFlags().Border(wxALL));

    m_comboBox = new wxComboBox(static_box_sizer2->GetStaticBox(), wxID_ANY);
    m_comboBox->Append("item #1");
    m_comboBox->Append("item #2");
    m_comboBox->Append("item #0");
    m_comboBox->SetStringSelection("item #2");
    m_comboBox->SetToolTip("Item #0 should be selected by default");
    static_box_sizer2->Add(m_comboBox, wxSizerFlags().Expand().Border(wxALL));

    m_staticText4 = new wxStaticText(static_box_sizer2->GetStaticBox(), wxID_ANY, "Sorted");
    static_box_sizer2->Add(m_staticText4, wxSizerFlags().Border(wxALL));

    m_comboBox2 = new wxComboBox(static_box_sizer2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition,
        wxDefaultSize, 0, nullptr, wxCB_SORT);
    m_comboBox2->Append("item #1");
    m_comboBox2->Append("item #2");
    m_comboBox2->Append("item #0");
    m_comboBox2->SetStringSelection("item #2");
    m_comboBox2->SetToolTip("Item #2 should be selected by default");
    static_box_sizer2->Add(m_comboBox2, wxSizerFlags().Border(wxALL));

    box_sizer3->Add(static_box_sizer2, wxSizerFlags().Expand().Border(wxALL));

    auto* static_box_sizer3 = new wxStaticBoxSizer(wxVERTICAL, static_box->GetStaticBox(), "Choice");

    m_staticText5 = new wxStaticText(static_box_sizer3->GetStaticBox(), wxID_ANY, "Unsorted");
    static_box_sizer3->Add(m_staticText5, wxSizerFlags().Border(wxALL));

    m_choice = new wxChoice(static_box_sizer3->GetStaticBox(), wxID_ANY);
    m_choice->Append("item #1");
    m_choice->Append("item #2");
    m_choice->Append("item #0");
    m_choice->SetSelection(2);
    m_choice->SetToolTip("Item #0 should be selected by default");
    static_box_sizer3->Add(m_choice, wxSizerFlags().Border(wxALL));

    m_staticText6 = new wxStaticText(static_box_sizer3->GetStaticBox(), wxID_ANY, "Sorted");
    static_box_sizer3->Add(m_staticText6, wxSizerFlags().Border(wxALL));

    m_choice2 = new wxChoice(static_box_sizer3->GetStaticBox(), wxID_ANY, wxDefaultPosition, wxDefaultSize,
        0, nullptr, wxCB_SORT);
    m_choice2->Append("item #1");
    m_choice2->Append("item #2");
    m_choice2->Append("item #0");
    m_choice2->SetSelection(2);
    m_choice2->SetToolTip("Item #2 should be selected by default");
    static_box_sizer3->Add(m_choice2, wxSizerFlags().Border(wxALL));

    box_sizer3->Add(static_box_sizer3, wxSizerFlags().Expand().Border(wxALL));

    auto* static_box_sizer4 = new wxStaticBoxSizer(wxVERTICAL, static_box->GetStaticBox(), "List");

    m_staticText7 = new wxStaticText(static_box_sizer4->GetStaticBox(), wxID_ANY, "Unsorted");
    static_box_sizer4->Add(m_staticText7, wxSizerFlags().Border(wxALL));

    m_listbox = new wxListBox(static_box_sizer4->GetStaticBox(), wxID_ANY);
    m_listbox->Append("item #1");
    m_listbox->Append("item #2");
    m_listbox->Append("item #0");
    static_box_sizer4->Add(m_listbox, wxSizerFlags().Border(wxALL));

    m_staticText8 = new wxStaticText(static_box_sizer4->GetStaticBox(), wxID_ANY, "Sorted");
    static_box_sizer4->Add(m_staticText8, wxSizerFlags().Border(wxALL));

    m_listBox2 = new wxListBox(static_box_sizer4->GetStaticBox(), wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr,
        wxLB_SINGLE|wxLB_SORT);
    m_listBox2->Append("item #1");
    m_listBox2->Append("item #2");
    m_listBox2->Append("item #0");
    static_box_sizer4->Add(m_listBox2, wxSizerFlags().Border(wxALL));

    box_sizer3->Add(static_box_sizer4, wxSizerFlags().Expand().Border(wxALL));

    auto* static_box_sizer5 = new wxStaticBoxSizer(wxVERTICAL, static_box->GetStaticBox(), "Checked");

    m_staticText9 = new wxStaticText(static_box_sizer5->GetStaticBox(), wxID_ANY, "Unsorted");
    static_box_sizer5->Add(m_staticText9, wxSizerFlags().Border(wxALL));

    m_checkList_2 = new wxCheckListBox(static_box_sizer5->GetStaticBox(), wxID_ANY);
    m_checkList_2->Append("item #1");
    m_checkList_2->Append("item #2");
    m_checkList_2->Append("item #0");
    static_box_sizer5->Add(m_checkList_2, wxSizerFlags().Border(wxALL));

    m_staticText10 = new wxStaticText(static_box_sizer5->GetStaticBox(), wxID_ANY, "Sorted");
    static_box_sizer5->Add(m_staticText10, wxSizerFlags().Border(wxALL));

    m_checkList2 = new wxCheckListBox(static_box_sizer5->GetStaticBox(), wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr,
        wxLB_SINGLE|wxLB_SORT);
    m_checkList2->Append("item #1");
    m_checkList2->Append("item #2");
    m_checkList2->Append("item #0");
    static_box_sizer5->Add(m_checkList2, wxSizerFlags().Border(wxALL));

    box_sizer3->Add(static_box_sizer5, wxSizerFlags().Expand().Border(wxALL));

    static_box->Add(box_sizer3, wxSizerFlags().Expand().Border(wxALL));

    page_sizer_2->Add(static_box, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_20 = new wxBoxSizer(wxVERTICAL);

    collapsible_pane = new wxCollapsiblePane(page_3, wxID_ANY, "Collapsible Pane");
    collapsible_pane->Expand();
    box_sizer_20->Add(collapsible_pane, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_21 = new wxBoxSizer(wxHORIZONTAL);

    staticText_5 = new wxStaticText(collapsible_pane->GetPane(), wxID_ANY,
        "This text will be hidden if the Pane is collapsed.");
    box_sizer_21->Add(staticText_5, wxSizerFlags().Border(wxALL));
    collapsible_pane->GetPane()->SetSizerAndFit(box_sizer_21);

    page_sizer_2->Add(box_sizer_20, wxSizerFlags().Border(wxALL));
    page_3->SetSizerAndFit(page_sizer_2);

    auto* page_6 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_THEME|wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_6, "Pickers");

    auto* parent_sizer2 = new wxBoxSizer(wxVERTICAL);

    auto* static_box_2 = new wxStaticBoxSizer(wxVERTICAL, page_6, "Pickers");

    auto* grid_sizer = new wxGridSizer(2, 0, 0);

    auto* box_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText__2 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "File:");
    box_sizer->Add(staticText__2, wxSizerFlags().Center().Border(wxALL));

    m_filePicker = new wxFilePickerCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxFileSelectorPromptStr,
        "BMP files|*.bmp", wxDefaultPosition, wxDefaultSize, wxFLP_USE_TEXTCTRL|wxFLP_OPEN|wxFLP_FILE_MUST_EXIST);
    box_sizer->Add(m_filePicker, wxSizerFlags().Border(wxALL));

    grid_sizer->Add(box_sizer, wxSizerFlags().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText__3 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Directory:");
    box_sizer_2->Add(staticText__3, wxSizerFlags().Center().Border(wxALL));

    m_dirPicker = new wxDirPickerCtrl(static_box_2->GetStaticBox(), wxID_ANY, ".", wxDirSelectorPromptStr,
        wxDefaultPosition, wxDefaultSize, wxDIRP_DEFAULT_STYLE|wxDIRP_SMALL);
    box_sizer_2->Add(m_dirPicker, wxSizerFlags().Border(wxALL));

    grid_sizer->Add(box_sizer_2, wxSizerFlags().Border(wxALL));

    auto* box_sizer_4 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText__4 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Colour:");
    box_sizer_4->Add(staticText__4, wxSizerFlags().Center().Border(wxALL));

    m_colourPicker = new wxColourPickerCtrl(static_box_2->GetStaticBox(), wxID_ANY, *wxBLACK);
    box_sizer_4->Add(m_colourPicker, wxSizerFlags().Border(wxALL));

    grid_sizer->Add(box_sizer_4, wxSizerFlags().Border(wxALL));

    auto* box_sizer_9 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText__7 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Font:");
    box_sizer_9->Add(staticText__7, wxSizerFlags().Center().Border(wxALL));

    m_fontPicker = new wxFontPickerCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxFont(wxNORMAL_FONT->GetPointSize(),
        wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, "Comic Sans MS"), wxDefaultPosition,
        wxDefaultSize, wxFNTP_DEFAULT_STYLE|wxFNTP_USE_TEXTCTRL);
    box_sizer_9->Add(m_fontPicker, wxSizerFlags().Border(wxALL));

    grid_sizer->Add(box_sizer_9, wxSizerFlags().Border(wxALL));

    auto* box_sizer_6 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText__5 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Date:");
    box_sizer_6->Add(staticText__5, wxSizerFlags().Center().Border(wxALL));

    m_datePicker = new wxDatePickerCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxDefaultDateTime);
    box_sizer_6->Add(m_datePicker, wxSizerFlags().Border(wxALL));

    grid_sizer->Add(box_sizer_6, wxSizerFlags().Border(wxALL));

    auto* box_sizer_8 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText__6 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Time:");
    box_sizer_8->Add(staticText__6, wxSizerFlags().Center().Border(wxALL));

    m_timePicker = new wxTimePickerCtrl(static_box_2->GetStaticBox(), wxID_ANY, wxDefaultDateTime);
    box_sizer_8->Add(m_timePicker, wxSizerFlags().Border(wxALL));

    grid_sizer->Add(box_sizer_8, wxSizerFlags().Border(wxALL));

    static_box_2->Add(grid_sizer, wxSizerFlags().Border(wxALL));

    parent_sizer2->Add(static_box_2, wxSizerFlags().Expand().Border(wxALL));

    fileCtrl = new wxFileCtrl(page_6, wxID_ANY, wxEmptyString, wxEmptyString, wxFileSelectorDefaultWildcardStr,
        wxFC_OPEN, wxDefaultPosition, wxDefaultSize);
    parent_sizer2->Add(fileCtrl, wxSizerFlags().Border(wxALL));
    page_6->SetSizerAndFit(parent_sizer2);

    auto* page = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page, "RibbonBar");

    auto* page_sizer_3 = new wxBoxSizer(wxVERTICAL);

    m_rbnBar = new wxRibbonBar(page, wxID_ANY, wxDefaultPosition, wxDefaultSize,
        wxRIBBON_BAR_SHOW_PAGE_LABELS|wxRIBBON_BAR_SHOW_PAGE_ICONS|wxRIBBON_BAR_FLOW_HORIZONTAL);

    m_rbnBar->SetArtProvider(new wxRibbonAUIArtProvider);
    page_sizer_3->Add(m_rbnBar, wxSizerFlags().Expand().Border(wxALL));

    auto* rbnPage = new wxRibbonPage(m_rbnBar, wxID_ANY, "First");
    m_rbnBar->SetActivePage(rbnPage);

    auto* rbnPanel = new wxRibbonPanel(rbnPage, wxID_ANY, "English", wxueImage(wxue_img::english_png, sizeof(
        wxue_img::english_png)));

    auto* first_parent_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_15 = new wxBoxSizer(wxVERTICAL);

    m_staticText = new wxStaticText(rbnPanel, wxID_ANY, "This is a sentence in English.");
    m_staticText->Wrap(200);
    box_sizer_15->Add(m_staticText, wxSizerFlags().Border(wxALL));

    m_btn_6 = new wxButton(rbnPanel, wxID_ANY, "Switch");
    box_sizer_15->Add(m_btn_6, wxSizerFlags().Center().Border(wxALL));

    first_parent_sizer->Add(box_sizer_15, wxSizerFlags(1).Expand().Border(wxALL));
    rbnPanel->SetSizerAndFit(first_parent_sizer);

    auto* rbnPanel_2 = new wxRibbonPanel(rbnPage, wxID_ANY, "French", wxueImage(wxue_img::french_png, sizeof(
        wxue_img::french_png)));
    rbnPanel_2->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));

    auto* first_parent_sizer_2 = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_16 = new wxBoxSizer(wxVERTICAL);

    m_staticText_3 = new wxStaticText(rbnPanel_2, wxID_ANY, wxString::FromUTF8("Ceci est une phrase en français."));
    m_staticText_3->Wrap(200);
    box_sizer_16->Add(m_staticText_3, wxSizerFlags().Border(wxALL));

    m_btn_7 = new wxButton(rbnPanel_2, wxID_ANY, "Switch");
    box_sizer_16->Add(m_btn_7, wxSizerFlags().Center().Border(wxALL));

    first_parent_sizer_2->Add(box_sizer_16, wxSizerFlags(1).Expand().Border(wxALL));
    rbnPanel_2->SetSizerAndFit(first_parent_sizer_2);

    auto* ribbonPage2 = new wxRibbonPage(m_rbnBar, wxID_ANY, "Second");

    auto* ribbonPanel2 = new wxRibbonPanel(ribbonPage2, wxID_ANY, "Button Panel");

    auto* rbnBtnBar = new wxRibbonButtonBar(ribbonPanel2, wxID_ANY);
    {
        rbnBtnBar->AddButton(wxID_ANY, "Forward", wxArtProvider::GetBitmap(wxART_GO_FORWARD, wxART_OTHER), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
        rbnBtnBar->AddButton(wxID_ANY, "Backward", wxueImage(wxue_img::left_png, sizeof(wxue_img::left_png)), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
    }
    rbnBtnBar->Realize();

    auto* ribbonPage_2 = new wxRibbonPage(m_rbnBar, wxID_ANY, "Third");

    auto* ribbonPanel_2 = new wxRibbonPanel(ribbonPage_2, wxID_ANY, "Tool Panel");

    auto* rbnToolBar = new wxRibbonToolBar(ribbonPanel_2, wxID_ANY);
    {
        rbnToolBar->AddTool(wxID_FILE1, wxArtProvider::GetBitmap(wxART_GOTO_FIRST, wxART_TOOLBAR), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
        rbnToolBar->AddSeparator();
        rbnToolBar->AddTool(wxID_FILE9, wxArtProvider::GetBitmap(wxART_GOTO_LAST, wxART_TOOLBAR), wxEmptyString,
            wxRIBBON_BUTTON_NORMAL);
    }
    rbnToolBar->Realize();

    auto* ribbonPage_3 = new wxRibbonPage(m_rbnBar, wxID_ANY, "Fourth");

    auto* rbnPanel_3 = new wxRibbonPanel(ribbonPage_3, wxID_ANY, "Gallery Panel");

    auto* rbnGallery = new wxRibbonGallery(rbnPanel_3, wxID_ANY);
    {
        rbnGallery->Append(wxueImage(wxue_img::toggle_button_png, sizeof(wxue_img::toggle_button_png)), wxID_ANY);
    }
    rbnGallery->Realize();
    page->SetSizerAndFit(page_sizer_3);

    auto* page_7 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_7, "Banners");
    page_7->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto* page_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_17 = new wxBoxSizer(wxHORIZONTAL);

    m_banner_left = new wxBannerWindow(page_7, wxLEFT);
    m_banner_left->SetText("Left Banner", wxEmptyString);
    box_sizer_17->Add(m_banner_left, wxSizerFlags().Border(wxALL));

    m_banner_top = new wxBannerWindow(page_7, wxTOP);
    m_banner_top->SetGradient(wxColour("#BFCDDB"), wxColour("#0078D7"));
    m_banner_top->SetText("Top Banner", "This is the top banner message");
    box_sizer_17->Add(m_banner_top, wxSizerFlags().Border(wxALL));

    m_banner_right = new wxBannerWindow(page_7, wxRIGHT);
    m_banner_right->SetText("Right Banner", wxEmptyString);
    box_sizer_17->Add(m_banner_right, wxSizerFlags().Border(wxALL));

    page_sizer->Add(box_sizer_17, wxSizerFlags(1).Border(wxALL));

    auto* box_sizer_18 = new wxBoxSizer(wxHORIZONTAL);

    m_banner = new wxBannerWindow(page_7, wxLEFT);
#if wxCHECK_VERSION(3, 1, 6)
        m_banner->SetBitmap(wxue_img::bundle_wiztest_png());
#else
    m_banner->SetBitmap(wxueImage(wxue_img::wiztest_png, sizeof(wxue_img::wiztest_png)));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_banner->SetText("This is a long title", wxEmptyString);
    box_sizer_18->Add(m_banner, wxSizerFlags().Border(wxALL));

    page_sizer->Add(box_sizer_18, wxSizerFlags().Border(wxALL));
    page_7->SetSizerAndFit(page_sizer);

    auto* page_8 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_8, "Data");
    page_8->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto* page_sizer_4 = new wxBoxSizer(wxVERTICAL);

    propertyGrid = new wxPropertyGrid(page_8, wxID_ANY);
    page_sizer_4->Add(propertyGrid, wxSizerFlags().Expand().Border(wxALL));

    propertyGridItem = propertyGrid->Append(new wxPropertyCategory("CategoryName", "CategoryName"));

    propertyGridItem_2 = propertyGrid->Append(new wxStringProperty("String", wxEmptyString));

    propertyGridItem_3 = propertyGrid->Append(new wxIntProperty("Integer", wxEmptyString));
    page_8->SetSizerAndFit(page_sizer_4);

    auto* box_sizer_14 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_4 = new wxStaticText(this, wxID_ANY, "Events:");
    box_sizer_14->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    auto* btn = new wxButton(this, wxID_ANY, "Clear Events");
    box_sizer_14->Add(btn, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(box_sizer_14, wxSizerFlags().Border(wxALL));

    m_events_list = new wxListBox(this, wxID_ANY);
    m_events_list->SetMinSize(ConvertDialogToPixels(wxSize(-1, 60)));
    dlg_sizer->Add(m_events_list, wxSizerFlags(1).Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    m_btn->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Button: wxEVT_BUTTON");
        });
    m_btn_3->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Button: wxEVT_BUTTON");
        });
    btn2->Bind(wxEVT_BUTTON, &MainTestDialog::OnPopupBtn, this);
    m_btn_7->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Ceci est une phrase en français.");
        });
    m_btn_2->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Button: wxEVT_BUTTON");
        });
    m_btn_bitmaps->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Button: wxEVT_BUTTON");
        });
    m_btn_4->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Button: wxEVT_BUTTON");
        });
    m_btn_6->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("This is a sentence in English.");
        });
    btn->Bind(wxEVT_BUTTON, &MainTestDialog::OnClearList, this);
    m_btn_5->Bind(wxEVT_BUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("CmdLinkBtn: wxEVT_BUTTON");
        });
    m_checkPlayAnimation->Bind(wxEVT_CHECKBOX,
        [this](wxCommandEvent&)
        {
            if (m_checkPlayAnimation->GetValue()) 
            {
                m_animation_ctrl->Play();
            }
            else 
            {  
                m_animation_ctrl->Stop();
            }
        });
    disable_bitmaps->Bind(wxEVT_CHECKBOX, &MainTestDialog::OnDisableBitmapsBtn, this);
    m_checkList2->Bind(wxEVT_CHECKLISTBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("CheckListBox2: wx.EVT_CHECKLISTBOX");
        });
    m_checkList_2->Bind(wxEVT_CHECKLISTBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("CheckListBox1: wx.EVT_CHECKLISTBOX");
        });
    m_choice->Bind(wxEVT_CHOICE,
        [this](wxCommandEvent&)
        {
            OnEventName("Choice: wx.EVT_CHOICE");
        });
    m_choice2->Bind(wxEVT_CHOICE,
        [this](wxCommandEvent&)
        {
            OnEventName("Choice: wx.EVT_CHOICE");
        });
    m_colourPicker->Bind(wxEVT_COLOURPICKER_CHANGED,
        [this](wxColourPickerEvent&)
        {
            OnEventName("ColourPicker: wxEVT_COLOURPICKER_CHANGED");
        });
    m_comboBox->Bind(wxEVT_COMBOBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("Combobox: wxEVT_COMBOBOX");
        });
    m_comboBox2->Bind(wxEVT_COMBOBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("Combobox: wxEVT_COMBOBOX");
        });
    m_datePicker->Bind(wxEVT_DATE_CHANGED,
        [this](wxDateEvent&)
        {
            OnEventName("DatePicker: wx.EVT_DATE_CHANGED");
        });
    m_dirPicker->Bind(wxEVT_DIRPICKER_CHANGED,
        [this](wxFileDirPickerEvent&)
        {
            OnEventName("DirPicker: wxEVT_DIRPICKER_CHANGED");
        });
    m_filePicker->Bind(wxEVT_FILEPICKER_CHANGED,
        [this](wxFileDirPickerEvent&)
        {
            OnEventName("FilePicker: wxEVT_FILEPICKER_CHANGED");
        });
    m_fontPicker->Bind(wxEVT_FONTPICKER_CHANGED,
        [this](wxFontPickerEvent&)
        {
            OnEventName("FontPicker: wx.OnFontChanged");
        });
    Bind(wxEVT_INIT_DIALOG, &MainTestDialog::OnInit, this);
    m_listbox->Bind(wxEVT_LISTBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("ListBox1: wxEVT_LISTBOX");
        });
    m_listBox2->Bind(wxEVT_LISTBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("ListBox2: wxEVT_LISTBOX");
        });
    m_notebook->Bind(wxEVT_NOTEBOOK_PAGE_CHANGED, &MainTestDialog::OnPageChanged, this);
    radioBox->Bind(wxEVT_RADIOBOX,
        [this](wxCommandEvent&)
        {
            OnEventName("RadioBox: wxEVT_RADIOBOX");
        });
    m_radioBtn_4->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn_2->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn_7->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("RadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn_6->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn2->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("RadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn_5->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRadioButton: wxEVT_RADIOBUTTON");
        });
    m_radioBtn_3->Bind(wxEVT_RADIOBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRadioButton: wxEVT_RADIOBUTTON");
        });
    m_scintilla->Bind(wxEVT_STC_CHANGE,
        [this](wxStyledTextEvent&)
        {
            OnEventName("wxStyledTextCtrl: wxEVT_STC_CHANGE");
        });
    m_text_ctrl->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {
            OnEventName("wxTextCtrl: wxEVT_TEXT");
        });
    m_richText->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {
            OnEventName("wxRichTextCtrl: wxEVT_TEXT");
        });
    m_timePicker->Bind(wxEVT_TIME_CHANGED,
        [this](wxDateEvent&)
        {
            OnEventName("TimePicker: wxEVT_TIME_CHANGED");
        });
    m_toggleBtn->Bind(wxEVT_TOGGLEBUTTON,
        [this](wxCommandEvent&)
        {
            OnEventName("Button: wxEVT_BUTTON");
        });
    m_toggleBtn_2->Bind(wxEVT_TOGGLEBUTTON,
        [this](wxCommandEvent&)
        {
            if (m_toggleBtn->GetValue()) 
            {
                m_animation_ctrl->Play();
                m_checkPlayAnimation->SetValue(true);
            }
            else 
            {  
                m_animation_ctrl->Stop();
                m_checkPlayAnimation->SetValue(false);
            }

        });

    return true;
}

namespace wxue_img
{

    const unsigned char clr_hourglass_gif[2017] {
        71,73,70,56,57,97,32,0,32,0,242,0,0,255,255,255,204,204,204,0,255,255,0,153,153,0,0,0,0,0,0,0,0,0,0,0,0,33,
        255,11,78,69,84,83,67,65,80,69,50,46,48,3,1,0,0,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,102,88,186,
        220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,41,124,67,40,18,108,235,170,98,32,207,52,172,201,
        0,64,203,118,134,235,187,30,134,7,32,4,140,72,209,2,121,108,10,53,204,164,178,17,157,62,164,214,6,47,171,157,
        61,99,1,224,145,251,171,89,203,193,41,218,172,92,123,213,97,241,91,137,242,124,41,36,19,234,46,121,249,89,
        92,129,130,131,132,133,18,9,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,103,88,186,220,254,48,202,73,171,
        189,56,231,193,187,231,132,86,112,66,41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,
        187,30,134,7,32,204,140,66,12,50,176,76,102,154,76,209,163,41,133,32,171,16,30,214,81,219,46,112,198,232,246,
        215,173,146,131,230,64,110,39,142,169,129,101,247,26,45,69,121,156,20,146,9,133,151,188,254,44,94,130,131,
        132,133,134,18,9,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,106,88,186,220,254,48,202,73,171,189,56,231,
        193,187,231,132,86,112,66,41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,134,
        7,228,5,132,24,194,113,169,68,102,154,76,209,3,234,148,54,165,17,30,246,81,219,50,112,202,163,183,240,235,
        98,203,97,173,180,28,60,7,114,59,241,250,93,156,85,41,40,207,93,66,50,161,246,16,47,130,44,99,133,134,135,
        136,137,18,9,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,105,88,186,220,254,48,202,73,171,189,56,231,193,
        187,231,132,86,112,66,41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,134,7,172,
        137,22,132,64,114,169,60,50,152,75,103,3,42,117,68,171,13,30,150,97,220,226,146,205,234,175,123,28,131,181,
        229,64,110,23,142,169,117,231,246,237,205,22,94,80,30,123,133,100,66,233,39,47,129,44,91,132,133,134,135,136,
        12,9,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,105,88,186,220,254,48,202,73,171,189,56,231,193,187,231,
        132,86,112,66,41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,
        4,163,50,121,204,48,151,162,199,179,25,101,70,35,188,235,163,166,101,224,146,198,110,129,56,163,86,136,224,
        108,148,204,93,7,114,202,242,245,151,86,139,80,30,179,132,100,66,233,33,47,129,44,98,132,133,134,135,136,18,
        9,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,104,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,
        86,112,66,41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,4,227,
        44,121,204,48,149,77,205,51,186,50,138,36,188,43,164,166,109,224,146,214,110,129,184,236,18,193,217,43,153,
        171,14,228,148,229,118,238,153,22,161,60,84,9,201,132,202,67,94,128,44,98,131,132,133,134,135,24,9,0,33,249,
        4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,105,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,
        41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,4,99,80,212,72,
        58,141,76,199,243,24,117,70,33,188,171,163,166,93,224,146,80,45,113,70,181,16,193,89,230,152,171,14,228,148,
        228,40,15,240,76,139,80,158,242,132,100,66,233,35,47,129,44,93,132,133,134,135,136,18,9,0,33,249,4,9,10,0,
        5,0,44,0,0,0,0,32,0,32,0,0,3,105,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,41,124,
        67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,132,162,81,212,72,58,
        151,204,166,17,26,149,30,171,188,170,163,166,93,224,146,212,40,113,118,181,16,193,89,230,152,171,14,228,166,
        100,177,17,240,116,70,81,158,242,132,100,66,233,35,47,129,44,93,132,133,134,135,136,18,9,0,33,249,4,9,10,0,
        5,0,44,0,0,0,0,32,0,32,0,0,3,108,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,41,124,
        67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,132,162,81,212,72,38,
        121,76,135,115,25,149,82,171,13,40,150,81,219,42,112,207,163,47,144,235,70,137,79,109,140,12,52,175,1,211,
        153,184,194,131,27,239,115,10,202,147,151,144,76,40,125,16,47,132,44,94,135,136,137,138,139,12,9,0,33,249,
        4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,106,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,
        41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,132,162,81,212,
        72,214,152,142,164,20,250,152,82,29,188,107,227,169,45,224,156,71,95,32,199,101,18,157,89,243,24,88,190,141,
        165,198,116,204,8,128,91,69,40,79,152,66,50,161,246,18,47,130,44,93,133,134,135,136,137,12,9,0,33,249,4,9,
        10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,108,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,41,
        124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,132,162,81,212,72,
        214,152,14,231,18,26,157,82,27,188,43,118,118,140,5,0,206,238,240,11,204,66,137,82,235,141,156,86,251,190,
        201,184,217,75,0,27,239,98,10,202,147,151,144,76,40,125,16,47,132,44,90,135,136,137,138,139,18,9,0,33,249,
        4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,107,88,186,220,254,48,202,73,171,189,56,231,193,187,231,132,86,112,66,
        41,124,67,40,18,108,235,170,98,32,207,52,172,201,0,64,203,118,134,235,187,30,230,183,11,8,49,132,162,81,212,
        72,214,152,14,231,18,26,157,82,27,188,43,118,118,140,5,128,86,40,145,75,37,74,195,190,47,32,41,237,86,112,
        108,99,150,201,91,203,217,80,148,199,61,33,153,80,124,17,47,131,44,90,134,135,136,137,138,18,9,0,33,249,4,
        9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,103,88,186,220,254,48,202,73,171,189,56,235,55,200,158,67,247,69,131,32,
        142,77,16,148,39,90,168,0,192,122,40,12,168,97,187,5,177,138,135,180,221,205,247,211,97,120,68,31,97,249,65,
        38,131,151,228,144,8,181,216,122,129,165,86,99,163,126,128,89,0,193,187,153,137,179,202,209,12,61,102,170,
        77,109,182,43,23,175,126,193,118,53,208,229,216,243,27,110,127,130,131,132,133,134,19,9,0,33,249,4,9,10,0,
        5,0,44,0,0,0,0,32,0,32,0,0,3,115,88,186,220,254,48,202,73,171,189,56,235,205,187,255,217,48,104,3,33,137,68,
        160,6,208,26,160,167,144,174,102,227,190,114,156,2,124,80,43,42,30,111,144,139,16,119,61,31,48,32,28,22,33,
        71,102,210,23,4,184,142,167,210,109,123,131,25,181,169,176,111,214,45,101,9,226,176,130,188,242,66,193,212,
        95,129,253,50,127,209,113,7,219,253,64,161,209,16,127,104,118,129,114,22,128,32,137,138,139,140,141,142,143,
        144,145,146,13,9,0,33,249,4,9,10,0,5,0,44,0,0,0,0,32,0,32,0,0,3,109,88,186,220,254,48,202,73,171,189,56,235,
        66,200,150,196,224,125,79,40,146,142,57,4,35,202,13,112,32,183,95,40,172,242,76,218,120,206,214,131,155,143,
        245,219,192,86,0,0,129,216,113,205,148,76,87,225,73,128,250,104,152,142,22,48,44,162,2,220,33,86,3,238,178,
        154,155,178,24,54,182,128,195,179,35,73,150,140,195,156,111,149,116,202,10,14,246,10,60,128,10,126,131,132,
        127,134,137,138,139,140,36,9,0,33,254,50,82,101,100,117,99,101,100,32,53,54,37,32,64,32,119,119,119,46,114,
        97,115,112,98,101,114,114,121,104,105,108,108,46,99,111,109,47,103,105,102,119,105,122,97,114,100,46,104,116,
        109,108,0,59
    };

}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Common controls dialog
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"  // auto-generated: ../wxui_generated/mainframe_base.h and ../wxui_generated/mainframe_base.cpp

#include "dlgissue_956.h"
#include "dlgissue_960.h"

void MainFrame::OnMainTestDlg(wxCommandEvent& WXUNUSED(event))
{
    MainTestDialog dlg(this);
    dlg.ShowModal();
}

void MainFrame::OnDlgIssue_956(wxCommandEvent& WXUNUSED(event))
{
    DlgIssue_956 dlg(this);
    dlg.ShowModal();
}

void MainFrame::OnDlgIssue_960(wxCommandEvent& WXUNUSED(event))
{
    DlgIssue_960 dlg(this);
    dlg.ShowModal();
}
