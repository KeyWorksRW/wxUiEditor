///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/menu.h>

#include "images.h"

#include "mainframe.h"

#include <wx/mstream.h>  // memory stream classes

// Convert a data array into a wxImage
inline wxImage wxueImage(const unsigned char* data, size_t size_data)
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

namespace wxue_img
{
    extern const unsigned char english_png[541];
}

bool MainFrame::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{

    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    if (!wxFrame::Create(parent, id, title, pos, size, style, name))
        return false;

    splitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D);
    splitter->SetSashGravity(0.0);
    splitter->SetMinimumPaneSize(150);
    splitter->SetMinSize(ConvertDialogToPixels(wxSize(200, 200)));

    propertyGridManager = new wxPropertyGridManager(splitter, wxID_ANY, wxDefaultPosition, wxDefaultSize,
        wxPG_AUTO_SORT|wxPG_BOLD_MODIFIED|wxPG_SPLITTER_AUTO_CENTER|wxPG_DESCRIPTION|wxPG_TOOLBAR|wxPG_NO_INTERNAL_BORDER);
    propertyGridManager->SetExtraStyle(wxPG_EX_MODE_BUTTONS);

    propertyGridPage = propertyGridManager->AddPage("Animal Page",
        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::wxPython_1_5x_png, sizeof(wxue_img::wxPython_1_5x_png))));

    propertyGridItem_7 = propertyGridPage->Append(new wxPropertyCategory("Pets", "Pets"));

    propertyGridItem_2 = propertyGridPage->Append(new wxStringProperty("dog", "Woof!"));

    propertyGridItem = propertyGridPage->Append(new wxStringProperty("cat", "Meow!"));

    propertyGridItem_5 = propertyGridPage->Append(new wxPropertyCategory("Big Animals", "Big Animals"));

    propertyGridItem_8 = propertyGridPage->Append(new wxStringProperty("horses", wxEmptyString));

    propertyGridPage_2 = propertyGridManager->AddPage("Number Page", wxue_img::bundle_english_png());

    propertyGridItem_6 = propertyGridPage_2->Append(new wxPropertyCategory("Numbers", "Numbers"));

    propertyGridItem_3 = propertyGridPage_2->Append(new wxIntProperty("1", wxEmptyString));

    propertyGridItem_4 = propertyGridPage_2->Append(new wxIntProperty("2", wxEmptyString));

    grid = new wxGrid(splitter, wxID_ANY);
    {
        grid->CreateGrid(5, 5);
        grid->EnableDragGridSize(false);
        grid->SetMargins(0, 0);
        grid->SetDefaultCellAlignment(wxALIGN_LEFT, wxALIGN_TOP);
        grid->SetColLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
        grid->SetColLabelSize(wxGRID_AUTOSIZE);
        grid->SetRowLabelAlignment(wxALIGN_CENTER, wxALIGN_CENTER);
        grid->SetRowLabelSize(wxGRID_AUTOSIZE);
    }
    splitter->SplitHorizontally(propertyGridManager, grid);

    auto* menubar = new wxMenuBar();

    auto* menuDialogs = new wxMenu();
    auto* menu_item_3 = new wxMenuItem(menuDialogs, wxID_ANY, "MainTestDlg");
    menu_item_3->SetBitmap(
#if wxCHECK_VERSION(3, 1, 6)
        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::debug_32_png, sizeof(wxue_img::debug_32_png)))
#else
        wxBitmap(wxueImage(wxue_img::debug_32_png, sizeof(wxue_img::debug_32_png)))
#endif
    );

    menuDialogs->Append(menu_item_3);
    auto* menu_item_4 = new wxMenuItem(menuDialogs, wxID_ANY, "BookTestDlg");
    menu_item_4->SetBitmap(
#if wxCHECK_VERSION(3, 1, 6)
        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::wxNotebook_png, sizeof(wxue_img::wxNotebook_png)))
#else
        wxBitmap(wxueImage(wxue_img::wxNotebook_png, sizeof(wxue_img::wxNotebook_png)))
#endif
    );

    menuDialogs->Append(menu_item_4);
    auto* menu_item_2 = new wxMenuItem(menuDialogs, wxID_ANY, "PythonDlg");
    {
#if wxCHECK_VERSION(3, 1, 6)
        wxVector<wxBitmap> bitmaps;
        bitmaps.push_back(wxueImage(wxue_img::wxPython_png, sizeof(wxue_img::wxPython_png)));
        bitmaps.push_back(wxueImage(wxue_img::wxPython_1_5x_png, sizeof(wxue_img::wxPython_1_5x_png)));
        bitmaps.push_back(wxueImage(wxue_img::wxPython_2x_png, sizeof(wxue_img::wxPython_2x_png)));
#endif
        menu_item_2->SetBitmap(
#if wxCHECK_VERSION(3, 1, 6)
            wxBitmapBundle::FromBitmaps(bitmaps)
#else
            wxBitmap(wxueImage(wxue_img::wxPython_png, sizeof(wxue_img::wxPython_png)))
#endif
        );
    }

    menuDialogs->Append(menu_item_2);
    auto* menuItem_2 = new wxMenuItem(menuDialogs, wxID_ANY, "Common Controls...", "Common controls", wxITEM_NORMAL);
    menuItem_2->SetBitmap(
#if wxCHECK_VERSION(3, 1, 6)
        wxArtProvider::GetBitmapBundle(wxART_TIP, wxART_MENU)
#else
        wxBitmap(wxArtProvider::GetBitmap(wxART_TIP, wxART_MENU))
#endif
    );

    menuDialogs->Append(menuItem_2);
    auto* menuItem3 = new wxMenuItem(menuDialogs, wxID_ANY, "Wizard");
    menuDialogs->Append(menuItem3);
    menuDialogs->AppendSeparator();

    auto* submenu = new wxMenu();
    auto* menu_item_5 = new wxMenuItem(submenu, wxID_ANY, "DlgIssue_956");
    menu_item_5->SetBitmap(
#if wxCHECK_VERSION(3, 1, 6)
        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::debug_32_png, sizeof(wxue_img::debug_32_png)))
#else
        wxBitmap(wxueImage(wxue_img::debug_32_png, sizeof(wxue_img::debug_32_png)))
#endif
    );

    submenu->Append(menu_item_5);
    menuDialogs->AppendSubMenu(submenu, "Issue Dialogs");
    menuDialogs->AppendSeparator();
    auto* menuItem4 = new wxMenuItem(menuDialogs, wxID_EXIT, "Exit");
    menuDialogs->Append(menuItem4);
    menubar->Append(menuDialogs, "&Dialogs");

    SetMenuBar(menubar);

    m_toolBar = CreateToolBar();
    auto* tool_4 = m_toolBar->AddTool(wxID_ANY, "MainTestDlg",
#if wxCHECK_VERSION(3, 1, 6)

        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::debug_32_png, sizeof(wxue_img::debug_32_png)))
#else
        wxBitmap(wxueImage(wxue_img::debug_32_png, sizeof(wxue_img::debug_32_png)))
#endif
    );

    auto* tool_5 = m_toolBar->AddTool(wxID_ANY, "BookTestDlg",
#if wxCHECK_VERSION(3, 1, 6)

        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::wxNotebook_png, sizeof(wxue_img::wxNotebook_png)))
#else
        wxBitmap(wxueImage(wxue_img::wxNotebook_png, sizeof(wxue_img::wxNotebook_png)))
#endif
    );

    auto* tool_3 = m_toolBar->AddTool(wxID_ANY, "PythonDlg",
#if wxCHECK_VERSION(3, 1, 6)

        wxBitmapBundle::FromBitmap(wxueImage(wxue_img::wxPython_1_5x_png, sizeof(wxue_img::wxPython_1_5x_png)))
#else
        wxBitmap(wxueImage(wxue_img::wxPython_1_5x_png, sizeof(wxue_img::wxPython_1_5x_png)))
#endif
    );

    auto* tool_2 = m_toolBar->AddTool(wxID_ANY, "Common Controls...",
#if wxCHECK_VERSION(3, 1, 6)
        wxArtProvider::GetBitmapBundle(wxART_TIP, wxART_TOOLBAR)
#else
        wxBitmap(wxArtProvider::GetBitmap(wxART_TIP, wxART_TOOLBAR))
#endif
    );

    m_toolBar->Realize();

    m_statusBar = CreateStatusBar(2);
    {
        const int sb_field_widths[2] = {100, -1};
        m_statusBar->SetStatusWidths(2, sb_field_widths);
        const int sb_field_styles[2] = {100, -1};
        m_statusBar->SetStatusStyles(2, sb_field_styles);
    }


    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_MENU, &MainFrame::OnMainTestDlg, this, menu_item_3->GetId());
    Bind(wxEVT_MENU, &MainFrame::OnBookTestDlg, this, menu_item_4->GetId());
    Bind(wxEVT_MENU, &MainFrame::OnPythonDlg, this, menu_item_2->GetId());
    Bind(wxEVT_MENU, &MainFrame::OnCommonDialog, this, menuItem_2->GetId());
    Bind(wxEVT_MENU, &MainFrame::OnWizard, this, menuItem3->GetId());
    Bind(wxEVT_MENU, &MainFrame::OnDlgIssue_956, this, menu_item_5->GetId());
    Bind(wxEVT_MENU, &MainFrame::OnQuit, this, wxID_EXIT);
    Bind(wxEVT_TOOL, &MainFrame::OnMainTestDlg, this, tool_4->GetId());
    Bind(wxEVT_TOOL, &MainFrame::OnBookTestDlg, this, tool_5->GetId());
    Bind(wxEVT_TOOL, &MainFrame::OnPythonDlg, this, tool_3->GetId());
    Bind(wxEVT_TOOL, &MainFrame::OnCommonDialog, this, tool_2->GetId());

    return true;
}

namespace wxue_img
{

    const unsigned char debug_32_png[1701] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,32,0,0,0,32,8,6,0,0,0,115,122,122,244,0,0,0,9,112,72,89,
        115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,6,87,73,68,65,84,88,195,237,151,93,136,93,87,21,199,127,123,159,
        115,238,157,123,111,38,51,25,51,83,147,113,74,13,54,9,147,22,209,84,180,10,17,107,52,85,208,80,226,131,160,
        136,15,10,250,36,65,124,147,16,65,136,79,126,60,216,32,136,69,171,47,18,65,74,44,164,212,72,141,78,107,107,
        146,50,214,116,232,140,101,106,134,196,204,87,110,230,126,157,187,191,150,15,231,220,115,231,102,74,108,205,
        131,47,110,88,236,115,246,57,103,237,255,90,235,191,214,94,7,254,199,67,1,204,207,207,75,189,94,39,132,128,
        214,122,224,133,88,107,2,108,89,191,227,8,129,0,132,16,110,91,238,223,143,142,142,178,111,223,62,21,3,44,45,
        45,113,226,196,9,42,149,10,0,90,131,82,154,56,142,1,136,34,141,82,17,81,164,250,200,85,52,160,92,196,23,215,
        206,57,188,15,68,145,198,251,48,176,6,208,237,118,57,121,242,100,102,32,128,49,6,231,28,214,90,190,245,228,
        51,111,106,148,21,112,65,136,117,31,68,239,222,5,201,238,253,224,55,78,4,241,160,34,48,30,254,217,22,206,127,
        227,8,198,24,140,49,153,177,0,214,90,188,203,64,244,54,235,73,199,11,45,39,24,159,111,118,109,158,212,102,
        247,206,67,106,179,185,26,12,241,202,2,78,132,110,200,196,120,8,26,26,14,174,108,4,86,187,82,132,193,90,219,
        7,192,166,203,142,207,149,7,41,148,135,144,73,211,4,210,210,8,173,167,30,71,215,87,138,141,166,174,189,204,
        205,231,206,48,62,241,78,188,128,15,153,68,192,141,84,248,123,61,144,110,242,142,207,13,45,66,224,189,199,
        58,71,25,104,117,133,40,2,241,16,110,11,131,115,130,170,237,100,165,219,101,232,245,89,22,103,127,207,112,
        37,161,250,224,39,121,125,105,137,90,60,76,219,244,191,186,218,18,54,172,12,232,200,200,28,240,222,247,1,20,
        68,10,62,39,137,220,22,203,156,197,177,98,212,167,212,38,74,76,69,39,248,225,83,77,150,111,92,227,103,63,120,
        134,237,187,191,140,73,45,38,85,164,33,139,183,245,130,82,10,145,108,206,172,183,88,23,138,112,235,30,67,33,
        224,115,183,167,54,12,138,19,82,19,48,109,207,114,154,240,220,153,39,249,230,119,154,124,224,225,71,104,155,
        136,71,191,240,50,47,62,125,134,171,27,176,220,17,230,214,60,237,78,192,26,193,116,179,217,185,76,122,251,
        245,50,44,222,204,1,239,28,169,9,160,85,241,178,4,1,250,30,169,255,238,52,95,252,203,117,154,35,129,243,245,
        191,114,228,163,247,241,137,153,69,198,95,90,226,141,87,159,229,242,216,199,138,84,214,155,50,38,228,58,124,
        232,131,24,32,97,111,33,53,66,171,233,233,166,1,231,4,107,50,41,117,110,226,47,253,150,240,155,95,241,158,
        198,58,143,77,127,144,215,94,11,252,109,206,240,41,42,76,174,45,195,19,143,179,119,233,105,38,147,118,97,113,
        79,172,17,188,147,45,233,173,251,46,209,148,74,9,198,8,62,128,117,208,110,11,169,129,182,129,242,191,94,161,
        113,255,103,249,135,134,231,243,130,245,53,5,223,222,49,74,181,92,230,215,67,101,86,157,161,190,251,16,187,
        86,46,33,30,188,149,66,66,200,128,196,113,76,28,199,164,105,58,24,130,90,181,70,82,42,211,49,178,185,162,22,
        99,97,228,195,96,133,67,141,13,42,157,148,159,204,252,153,247,149,202,76,236,216,193,247,55,110,241,241,102,
        147,87,174,47,49,219,173,240,70,242,48,113,200,54,237,133,65,103,85,191,32,250,64,26,58,231,88,91,191,201,
        240,182,42,54,119,147,245,91,129,120,47,124,104,168,204,247,98,205,5,99,56,190,209,96,185,213,228,167,90,209,
        214,154,207,85,171,156,55,130,142,50,14,101,0,122,233,151,129,49,198,210,106,181,182,2,0,176,46,208,78,179,
        221,140,19,74,177,194,108,138,219,174,114,155,87,75,101,142,117,82,30,140,99,246,7,207,129,86,202,245,68,243,
        128,177,204,239,24,195,89,65,121,41,206,141,64,150,130,206,101,96,172,51,91,57,208,43,70,16,232,26,193,56,
        193,58,104,165,217,108,29,116,186,194,194,165,11,92,124,255,17,126,164,53,123,157,163,33,160,85,224,211,198,
        242,99,173,88,216,57,193,228,173,151,50,82,91,193,123,65,2,132,220,155,33,207,128,94,25,222,82,136,156,11,
        180,140,16,41,176,155,42,152,19,104,52,60,178,114,139,242,67,95,162,115,246,9,158,93,91,197,1,45,17,106,10,
        100,215,110,222,245,249,175,243,194,139,11,132,234,67,168,8,8,32,121,248,226,164,159,146,145,214,91,211,48,
        228,165,209,116,3,27,157,128,241,66,199,9,245,166,103,237,166,163,106,174,177,127,2,22,101,156,201,175,252,
        18,189,99,172,143,126,124,156,169,175,254,156,63,212,119,243,192,68,194,174,248,86,70,56,223,183,186,231,17,
        231,2,126,19,187,11,29,62,4,68,60,245,84,136,37,115,93,219,101,196,3,184,255,29,129,231,245,99,40,39,108,220,
        243,94,198,190,59,131,158,251,35,73,164,81,211,135,88,239,110,135,46,220,24,122,148,143,212,150,185,186,182,
        157,56,206,203,175,21,162,68,33,97,176,111,24,4,224,61,222,11,198,74,81,146,55,143,63,173,77,102,21,209,67,
        20,41,22,154,219,137,223,253,153,204,141,237,188,242,41,112,74,113,97,245,30,226,68,101,214,7,72,202,186,72,
        73,95,240,33,108,229,0,128,237,6,236,155,52,36,146,187,82,229,74,54,119,71,58,47,221,61,139,181,234,151,242,
        56,206,128,136,207,2,46,161,127,18,22,0,122,7,131,132,64,227,23,143,20,45,87,36,130,74,18,146,88,3,154,40,
        142,209,90,161,116,132,214,186,232,19,125,8,40,192,134,128,4,79,39,7,235,243,67,174,147,154,162,220,7,201,
        158,149,74,165,62,128,169,169,41,78,157,58,85,48,179,231,30,173,245,64,35,249,86,27,211,94,115,123,251,92,
        88,29,199,76,77,77,245,187,226,183,59,78,159,62,45,213,106,117,96,179,245,245,117,142,31,63,254,182,245,197,
        255,13,128,195,135,15,19,242,88,214,235,117,86,86,86,238,238,191,224,63,141,139,23,47,202,234,234,42,59,119,
        238,196,57,71,163,209,40,234,185,115,14,231,28,163,163,163,84,42,21,106,181,26,189,119,15,30,60,168,238,26,
        192,229,203,151,101,100,100,36,255,63,136,138,211,169,190,177,49,16,130,225,225,225,236,121,8,120,145,172,
        207,180,150,233,233,233,59,238,113,71,86,205,204,204,200,216,216,24,145,82,68,106,80,79,146,36,84,171,85,182,
        109,219,198,208,208,80,255,60,201,201,22,69,17,181,74,133,153,153,25,185,43,15,156,61,123,86,246,239,221,139,
        40,133,181,150,40,138,6,242,184,168,239,249,122,146,36,133,87,102,103,103,57,118,236,152,186,107,14,0,156,
        59,119,78,230,230,230,56,112,224,0,247,221,123,47,149,90,45,243,68,28,99,157,163,217,108,178,184,184,200,149,
        43,87,216,179,103,15,71,143,30,85,252,127,188,133,241,111,49,200,16,194,249,221,92,25,0,0,0,0,73,69,78,68,
        174,66,96,130
    };

    const unsigned char wxNotebook_png[177] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,22,0,0,0,22,8,6,0,0,0,196,180,108,59,0,0,0,9,112,72,89,
        115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,99,73,68,65,84,56,203,99,96,160,37,248,143,7,20,244,236,37,90,
        12,217,76,22,24,227,230,205,155,56,45,158,57,115,38,154,136,42,86,49,100,192,68,171,80,160,153,193,140,176,
        48,190,122,241,36,86,5,218,250,230,36,25,88,216,187,143,97,66,137,51,35,11,33,133,184,44,28,176,160,24,53,
        120,212,224,81,131,71,13,38,6,192,75,183,57,123,190,50,12,9,0,0,126,235,89,63,162,177,243,95,0,0,0,0,73,69,
        78,68,174,66,96,130
    };

    const unsigned char wxPython_1_5x_png[765] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,24,0,0,0,24,8,6,0,0,0,224,119,61,248,0,0,0,9,112,72,89,
        115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,2,175,73,68,65,84,72,199,173,148,207,75,20,97,24,199,63,235,15,
        72,232,176,120,73,34,112,64,236,34,184,211,161,147,208,142,23,59,116,104,173,91,160,174,167,244,176,176,155,
        122,118,61,151,76,32,100,208,97,86,250,3,236,108,135,119,21,42,61,57,43,8,97,44,51,94,180,32,118,71,148,78,
        198,219,97,94,183,113,118,198,85,235,11,47,207,59,239,251,252,224,253,206,243,124,219,137,134,158,78,167,15,
        53,77,43,118,118,118,30,213,106,181,77,254,35,210,185,92,206,145,10,150,101,73,96,62,176,254,9,58,224,8,33,
        164,97,24,210,178,44,41,165,148,186,174,75,33,132,20,66,72,192,188,78,98,141,1,182,121,130,100,14,105,190,
        51,207,30,32,13,195,144,245,122,93,150,203,229,134,5,138,151,77,220,161,236,4,147,232,164,252,143,194,90,129,
        163,133,35,0,92,215,197,243,60,132,16,244,246,246,94,147,150,12,14,31,144,124,12,172,87,127,87,62,159,111,
        188,72,127,170,75,50,56,138,206,150,72,168,2,171,76,160,113,51,198,171,10,188,81,251,69,101,103,129,10,137,
        86,5,218,129,239,124,37,201,125,12,122,98,188,186,129,135,106,5,241,153,125,192,190,168,64,155,178,43,88,216,
        44,71,120,44,199,68,142,0,144,189,12,69,103,44,232,91,240,250,89,216,35,79,138,59,36,233,1,110,53,221,217,
        236,50,10,184,64,90,157,86,0,239,92,129,170,127,57,220,23,221,126,89,64,227,1,105,52,12,198,2,55,59,192,12,
        11,128,195,24,37,0,182,40,177,199,100,184,77,13,160,28,243,74,63,112,3,141,13,52,78,16,76,55,249,84,216,81,
        180,189,32,203,20,30,80,0,104,171,250,237,182,15,60,110,197,231,208,16,230,118,9,180,27,234,96,16,152,99,158,
        219,24,84,72,240,146,34,39,192,0,6,160,93,117,94,230,133,64,74,137,44,86,67,51,147,66,54,152,200,224,176,200,
        149,166,29,64,228,114,56,245,186,95,192,249,133,212,55,3,5,222,18,212,40,193,42,141,97,236,184,32,105,146,
        126,76,186,200,50,14,221,199,144,76,42,225,234,130,100,48,178,15,128,123,234,107,152,34,146,20,26,33,183,243,
        232,199,228,57,89,82,170,91,174,2,217,60,104,97,152,204,168,228,17,88,57,4,251,184,233,56,21,53,120,109,49,
        210,109,168,103,251,58,52,195,122,173,134,235,121,224,157,66,185,238,219,80,250,36,115,88,12,34,27,122,21,
        83,192,151,238,243,82,97,44,45,81,178,109,40,236,65,233,32,20,177,166,104,25,81,98,248,3,216,103,29,112,59,
        90,242,57,13,76,33,200,160,21,126,131,125,16,225,179,6,252,164,192,172,234,164,83,108,118,201,2,110,34,82,
        26,242,152,60,34,121,97,225,42,112,2,124,194,101,149,209,56,85,141,211,243,44,227,88,12,170,95,23,196,123,
        101,191,176,194,55,92,37,49,229,150,106,26,1,131,187,76,208,21,234,140,10,195,106,103,7,85,51,14,127,0,212,
        225,25,244,190,141,109,213,0,0,0,0,73,69,78,68,174,66,96,130
    };

    const unsigned char wxPython_2x_png[251] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,32,0,0,0,32,8,3,0,0,0,68,164,138,198,0,0,0,18,80,76,84,
        69,1,0,0,0,0,0,0,187,0,255,255,0,255,255,255,221,0,0,105,35,144,251,0,0,0,1,116,82,78,83,0,64,230,216,102,
        0,0,0,151,73,68,65,84,120,218,125,211,75,10,196,48,0,195,208,74,77,238,127,229,33,67,107,8,196,205,86,15,211,
        239,245,30,224,250,58,140,49,248,238,75,212,25,24,48,70,155,1,87,90,253,40,80,229,15,160,2,129,44,156,186,
        153,145,14,4,180,138,156,14,170,120,8,13,92,19,0,234,194,204,18,70,0,91,143,121,64,238,38,32,36,11,175,152,
        155,224,206,85,144,137,173,223,17,40,5,212,9,86,239,19,96,192,105,2,253,4,216,65,186,164,11,7,0,1,34,24,144,
        231,199,219,69,61,129,116,210,3,116,123,227,0,253,171,74,58,10,40,191,87,173,33,28,234,15,194,249,3,213,96,
        196,248,192,0,0,0,0,73,69,78,68,174,66,96,130
    };

    const unsigned char wxPython_png[399] {
        137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,8,6,0,0,0,31,243,255,97,0,0,0,9,112,72,89,
        115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,1,65,73,68,65,84,56,203,141,147,49,82,195,64,12,69,159,3,7,160,
        164,204,13,114,131,32,31,194,37,190,66,78,192,160,12,109,238,192,16,119,57,2,20,114,74,102,72,17,122,51,49,
        7,32,109,58,81,120,29,219,177,19,248,51,154,221,213,206,254,149,190,36,232,66,84,213,147,36,49,254,137,209,
        201,99,3,88,173,86,34,34,174,170,14,200,223,52,83,140,5,46,51,113,119,119,85,117,51,115,51,171,73,46,66,88,
        224,188,5,75,43,51,51,119,119,151,153,92,140,226,186,231,185,175,150,120,19,195,115,56,239,49,150,68,67,4,
        87,192,142,3,194,13,99,110,131,119,11,76,130,17,214,140,8,200,135,8,40,74,202,232,149,242,61,99,77,198,154,
        3,240,205,248,72,0,80,2,37,47,128,6,207,238,120,87,52,206,83,232,81,159,148,74,139,20,103,65,163,75,1,82,156,
        17,41,73,48,251,105,9,60,165,234,143,180,181,191,0,53,195,221,113,249,8,4,205,207,218,137,162,87,214,80,74,
        247,202,180,104,69,81,167,91,165,164,163,129,158,176,186,148,53,242,125,231,120,119,174,149,97,202,35,147,
        80,198,37,243,60,175,30,119,8,210,16,225,253,16,193,184,155,211,252,11,226,77,203,145,1,187,208,11,79,228,
        128,70,189,153,120,24,16,102,11,124,2,75,226,161,102,234,215,62,109,102,34,136,118,118,22,126,1,223,141,159,
        243,242,170,60,166,0,0,0,0,73,69,78,68,174,66,96,130
    };

}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Main Window
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

void MainFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
{
    // true forces the frame to close
    Close(true);
}
