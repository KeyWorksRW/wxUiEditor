////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include "pch.h"

#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/stattext.h>

#include "gridbag_item_base.h"

GridBagItemBase::GridBagItemBase(wxWindow* parent) : wxDialog()
{
    Create(parent, wxID_ANY, wxString::FromUTF8("Insert Item Into wxGridBagSizer"));

    auto dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_infoCtrl = new wxInfoBar(this);
    m_infoCtrl->SetShowHideEffects(wxSHOW_EFFECT_NONE, wxSHOW_EFFECT_NONE);
    dlg_sizer->Add(m_infoCtrl, wxSizerFlags(1).Expand().Border(wxALL));

    auto flex_grid_sizer = new wxFlexGridSizer(4, 0, 5);
    dlg_sizer->Add(flex_grid_sizer, wxSizerFlags().Border(wxALL));

    auto staticText = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("Insert in &column:"));
    flex_grid_sizer->Add(staticText, wxSizerFlags().Center().Border(wxALL));

    m_spin_column = new wxSpinCtrl(this, wxID_ANY, wxEmptyString,
    wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 10, 0);
    flex_grid_sizer->Add(m_spin_column, wxSizerFlags().Border(wxRIGHT|wxTOP|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto staticText_2 = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("Span c&olumns:"));
    flex_grid_sizer->Add(staticText_2, wxSizerFlags().Center().Border(wxALL));

    m_spin_span_column = new wxSpinCtrl(this, wxID_ANY, wxEmptyString,
    wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 10, 1);
    flex_grid_sizer->Add(m_spin_span_column, wxSizerFlags().Border(wxRIGHT|wxTOP|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto staticText_3 = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("Insert in &row:"));
    flex_grid_sizer->Add(staticText_3, wxSizerFlags().Center().Border(wxALL));

    m_spin_row = new wxSpinCtrl(this, wxID_ANY, wxEmptyString,
    wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 10, 0);
    flex_grid_sizer->Add(m_spin_row, wxSizerFlags().Border(wxRIGHT|wxTOP|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto staticText_4 = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("Span ro&ws:"));
    flex_grid_sizer->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    m_spin_span_row = new wxSpinCtrl(this, wxID_ANY, wxEmptyString,
    wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 10, 1);
    flex_grid_sizer->Add(m_spin_span_row, wxSizerFlags().Border(wxRIGHT|wxTOP|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &GridBagItemBase::OnInit, this);
    m_spin_column->Bind(wxEVT_SPINCTRL, &GridBagItemBase::OnColumn, this);
    m_spin_row->Bind(wxEVT_SPINCTRL, &GridBagItemBase::OnRow, this);
    Bind(wxEVT_BUTTON, &GridBagItemBase::OnOK, this, wxID_OK);
}
