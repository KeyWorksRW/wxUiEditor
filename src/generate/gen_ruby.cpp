/////////////////////////////////////////////////////////////////////////////
// Purpose:   Generate Ruby code files
// Author:    Ralph Walden
// Copyright: Copyright (c) 2023-2025 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include <wx/artprov.h>

#include <set>
#include <thread>

#include "gen_ruby.h"

#include "base_generator.h"   // BaseGenerator -- Base widget generator class
#include "code.h"             // Code -- Helper class for generating code
#include "file_codewriter.h"  // FileCodeWriter -- Classs to write code to disk
#include "gen_common.h"       // Common component functions
#include "gen_timer.h"        // TimerGenerator class
#include "image_gen.h"        // Functions for generating embedded images
#include "image_handler.h"    // ImageHandler class
#include "node.h"             // Node class
#include "project_handler.h"  // ProjectHandler class
#include "tt_view_vector.h"   // tt_view_vector -- Class for reading and writing line-oriented strings/files
#include "utils.h"            // Miscellaneous utilities
#include "write_code.h"       // Write code to Scintilla or file

#include "../customprops/eventhandler_dlg.h"  // EventHandlerDlg static functions

using namespace code;
using namespace GenEnum;

// clang-format off

inline constexpr const auto txt_PoundCmtBlock =
R"===(###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

)===";

inline constexpr const auto txt_ruby_get_bundle =
R"===(
# Loads image(s) from a string and returns a Wx::BitmapBundle object.
def wxue_get_bundle(image_name1, image_name2 = nil, image_name3 = nil)
  image1 = Wx::Image.new
  image1.load_stream(StringIO.new(image_name1))
  if (image_name2)
    image2 = Wx::Image.new
    image2.load_stream(StringIO.new(image_name2))
    if (image_name3)
      image3 = Wx::Image.new
      image3.load_stream(StringIO.new(image_name3))
      bitmaps = [Wx::Bitmap.new(image1),
                 Wx::Bitmap.new(image2),
                 Wx::Bitmap.new(image3)]
      bundle = Wx::BitmapBundle.from_bitmaps(bitmaps)
      return bundle
    else
      bundle = Wx::BitmapBundle.from_bitmaps(Wx::Bitmap.new(image1),
                                             Wx::Bitmap.new(image2))
      return bundle
    end
  end
  bundle = Wx::BitmapBundle.from_image(image1)
  return bundle
end
)===";

inline constexpr const auto txt_ruby_get_animation =
R"===(
# Loads image from a string and returns a Wx::Animation object.
def get_animation(image_name)
  animation = Wx::Animation.new
  animation.load(StringIO.new(image_name))
  return animation
end
)===";

// clang-format on

extern const char* python_perl_ruby_end_cmt_line;  // "# ************* End of generated code"

// This *must* be written on a line by itself with *no* indentation.
const char* ruby_begin_cmt_block = "=begin";

// This *must* be written on a line by itself with *no* indentation.
const char* ruby_end_cmt_block = "=end";

#if defined(_DEBUG)
// clang-format off
static const std::vector<tt_string> disable_list = {
    "Metrics/MethodLength",
    "Metrics/ParameterLists",
    "Style/Documentation",
    "Style/BlockComments",
    "Metrics/AbcSize",
};
// clang-format on
#endif  // _DEBUG

RubyCodeGenerator::RubyCodeGenerator(Node* form_node) : BaseCodeGenerator(GEN_LANG_RUBY, form_node) {}

void RubyCodeGenerator::GenerateClass(PANEL_PAGE panel_type)
{
    Code code(m_form_node, GEN_LANG_RUBY);

    m_embedded_images.clear();

    m_NeedAnimationFunction = false;
    m_NeedImageFunction = false;
    m_NeedSVGFunction = false;

    SetImagesForm();
    std::set<std::string> img_include_set;

    std::thread thrd_get_events(&RubyCodeGenerator::CollectEventHandlers, this, m_form_node, std::ref(m_events));
    std::thread thrd_need_img_func(&RubyCodeGenerator::ParseImageProperties, this, m_form_node);
    std::thread thrd_collect_img_headers(&RubyCodeGenerator::CollectImageHeaders, this, m_form_node,
                                         std::ref(img_include_set));

    // If the code files are being written to disk, then UpdateEmbedNodes() has already been called.
    if (panel_type != NOT_PANEL)
    {
        ProjectImages.UpdateEmbedNodes();
    }

    std::vector<Node*> forms;
    Project.CollectForms(forms);

    m_panel_type = panel_type;

    m_header->Clear();
    m_source->Clear();
    m_source->SetTabToSpaces(2);
    m_source->SetLastLineBlank();

#if !defined(_DEBUG)
    if (m_panel_type == NOT_PANEL)
#else
    if (m_panel_type != NOT_PANEL)
    {
        m_source->writeLine(
            "# The following comment block is only displayed in a _DEBUG build, or when written to a file.\n\n");
    }
#endif  // _DEBUG
    {
        m_source->writeLine(txt_PoundCmtBlock);

        if (Project.as_bool(prop_disable_rubo_cop))
        {
#if defined(_DEBUG)
            for (auto& iter: disable_list)
            {
                m_source->writeLine("# rubocop:disable " + iter);
            }
#else
            m_source->writeLine("# rubocop:disable all");
#endif
            m_source->writeLine();
        }

        if (Project.hasValue(prop_ruby_project_preamble))
        {
            WritePropSourceCode(Project.getProjectNode(), prop_ruby_project_preamble);
        }
    }

    m_source->writeLine("WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS\n\nrequire 'wx/core'");

    m_set_enum_ids.clear();
    m_set_const_ids.clear();
    // Do this early to give thrd_get_events and thrd_collect_img_headers a chance to run
    // before we need to join (finish) them.
    BaseCodeGenerator::CollectIDs(m_form_node, m_set_enum_ids, m_set_const_ids);

    if (m_form_node->isGen(gen_Images))
    {
        m_source->writeLine();
        m_source->writeLine("require 'base64'");
        m_source->writeLine("require 'stringio'");
        m_source->writeLine();

        thrd_get_events.join();
        try
        {
            thrd_collect_img_headers.join();
        }
        catch (const std::system_error& err)
        {
#if defined(_DEBUG)
            MSG_ERROR(err.what());
#else
            wxMessageDialog dlg_error(nullptr, wxString::FromUTF8(err.what()), "Internal Thread Error", wxICON_ERROR | wxOK);
            dlg_error.ShowModal();
#endif  // _DEBUG
        }

        thrd_need_img_func.join();
        GenerateImagesForm();
        return;
    }

    m_header->writeLine("WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS\n\nrequire 'wx/core'");
    m_header->writeLine(tt_string("# Sample inherited class from ") << m_form_node->as_string(prop_class_name));
    m_header->writeLine();

    std::set<std::string> imports;

    auto GatherImportModules = [&](Node* node, auto&& GatherImportModules) -> void
    {
        if (auto* gen = node->getGenerator(); gen)
        {
            gen->GetImports(node, imports, GEN_LANG_RUBY);
        }
        for (auto& child: node->getChildNodePtrs())
        {
            GatherImportModules(child.get(), GatherImportModules);
        }
    };
    GatherImportModules(m_form_node, GatherImportModules);

    for (const auto& import: imports)
    {
        m_source->writeLine(import);
        m_header->writeLine(import);
    }
    m_source->writeLine();
    m_header->writeLine();

    if (m_form_node->hasValue(prop_relative_require_list))
    {
        tt_string_vector list;
        list.SetString(m_form_node->as_string(prop_relative_require_list));
        for (auto& iter: list)
        {
            iter.remove_extension();
            m_source->writeLine(tt_string("require_relative '") << iter << '\'');
        }
        if (list.size())
        {
            m_source->writeLine();
        }
    }

    if (m_form_node->isType(type_frame_form) && m_form_node->as_bool(prop_import_all_dialogs))
    {
        for (auto& form: forms)
        {
            if ((form->isGen(gen_wxDialog) || form->isGen(gen_wxWizard)) && form->hasValue(prop_ruby_file))
            {
                tt_string import_name(form->as_string(prop_ruby_file).filename());
                import_name.remove_extension();
                m_source->writeLine(tt_string("require_relative '") << import_name << "'");
            }
        }
    }

    int id_value = wxID_HIGHEST;
    for (auto& iter: m_set_enum_ids)
    {
        m_source->writeLine(tt_string() << '$' << iter << " = " << id_value++);
    }
    for (auto& iter: m_set_const_ids)
    {
        if (tt::contains(iter, " wx"))
        {
            tt_string id = '$' + iter;
            id.Replace(" wx", " Wx::", true, tt::CASE::exact);
            m_source->writeLine(id);
        }
        else
        {
            m_source->writeLine('$' + iter);
        }
    }

    try
    {
        thrd_collect_img_headers.join();
    }
    catch (const std::system_error& err)
    {
#if defined(_DEBUG)
        MSG_ERROR(err.what());
#else
        wxMessageDialog dlg_error(nullptr, wxString::FromUTF8(err.what()), "Internal Thread Error", wxICON_ERROR | wxOK);
        dlg_error.ShowModal();
#endif  // _DEBUG
    }

    if (m_embedded_images.size())
    {
        WriteImageRequireStatements(code);
    }

    m_source->writeLine();
    m_header->writeLine();
    m_header->writeLine(tt_string("requires '") << m_form_node->as_string(prop_ruby_file) << "'\n");
    m_header->writeLine();

    if (m_form_node->hasValue(prop_ruby_insert))
    {
        tt_string convert(m_form_node->as_string(prop_ruby_insert));
        convert.Replace("@@", "\n", tt::REPLACE::all);
        tt_string_vector lines(convert, '\n', tt::TRIM::right);
        for (auto& line: lines)
        {
            m_source->doWrite(line);
            m_source->doWrite("\n");
        }
        m_source->doWrite("\n");
    }

    tt_string inherit_name = m_form_node->as_string(prop_ruby_inherit_name);
    if (inherit_name.empty())
    {
        inherit_name += "Sample < " + m_form_node->as_string(prop_class_name);
    }
    if (inherit_name.size())
    {
        tt_string inherit("class ");
        inherit << inherit_name;
        inherit << m_form_node->as_string(prop_ruby_file) << "." << m_form_node->as_string(prop_class_name) << "):";

        m_header->writeLine(inherit);
        m_header->Indent();
        m_header->writeLine("def initialize(parent)");
        m_header->writeLine("end");
        m_header->Unindent();
        m_header->writeLine();
    }

    auto generator = m_form_node->getNodeDeclaration()->getGenerator();
    code.clear();
    if (generator->ConstructionCode(code))
    {
        m_source->writeLine(code);
        m_source->writeLine();
        m_source->Indent();
        m_source->Indent();
    }

    code.clear();
    if (generator->SettingsCode(code))
    {
        if (code.size())
        {
            m_source->writeLine(code);
            m_source->writeLine();
        }
    }

    if (m_form_node->getPropPtr(prop_window_extra_style))
    {
        code.clear();
        code.GenWindowSettings();
        if (code.size())
        {
            m_source->writeLine(code);
        }
    }

    m_source->SetLastLineBlank();
    for (const auto& child: m_form_node->getChildNodePtrs())
    {
        if (child->isGen(gen_wxContextMenuEvent))
            continue;
        GenConstruction(child.get());
    }

    code.clear();
    if (generator->AfterChildrenCode(code))
    {
        if (code.size())
        {
            m_source->writeLine();
            m_source->writeLine(code);
        }
    }

    if (m_form_node->as_bool(prop_persist))
    {
        m_source->writeLine();
        tt_string tmp("Wx.persistent_register_and_restore(self, \"");
        tmp << m_form_node->getNodeName() << "\");";
        m_source->writeLine(tmp);
    }

    auto rlambda = [&](Node* node, auto&& rlambda) -> void
    {
        if (node->hasValue(prop_persist_name))
        {
            tt_string code("Wx.persistent_register_and_restore(");
            code << node->getNodeName() << ", \"" << node->as_string(prop_persist_name) << "\");";
            m_source->writeLine(code);
        }

        for (const auto& child: node->getChildNodePtrs())
        {
            rlambda(child.get(), rlambda);
        }
    };

    rlambda(m_form_node, rlambda);

    // Timer code must be created before the events, otherwise the timer variable won't exist
    // when the event is created.

    code.clear();
    if (TimerGenerator::StartIfChildTimer(m_form_node, code))
    {
        m_source->writeLine(code);
        m_source->writeLine();
    }

    // Delay calling join() for as long as possible to increase the chance that the thread will
    // have already completed.
    thrd_get_events.join();
    if (m_events.size())
    {
        m_source->writeLine();
        m_source->writeLine("# Event handlers");
        GenSrcEventBinding(m_form_node, m_events);

        m_source->writeLine("\tend", indent::none);
        m_source->SetLastLineBlank();

        m_source->ResetIndent();
        m_source->writeLine();
        m_source->Indent();
        GenUnhandledEvents(m_events);
    }
    else
    {
        m_source->ResetIndent();
        m_source->writeLine("\tend", indent::none);
    }
    m_header->ResetIndent();
    m_header->writeLine("end", indent::none);

    thrd_need_img_func.join();

    if (m_NeedImageFunction)
    {
        m_source->doWrite("\n");  // force an extra line break
        m_source->writeLine(txt_ruby_get_bundle, indent::auto_keep_whitespace);
    }

    if (m_NeedAnimationFunction)
    {
        if (!m_NeedImageFunction)
            m_source->doWrite("\n");  // force an extra line break
        m_source->writeLine(txt_ruby_get_animation, indent::auto_keep_whitespace);
    }

    if (m_form_node->isGen(gen_wxWizard))
    {
        code.clear();
        // see for an example C:\rwCode\wxRuby3\samples\dialogs\wizard.rb
        // w = MyWizard.new(self)
        // w.run_wizard(w.get_page_area_sizer.get_item(0).get_window)
    }

    // Make certain indentation is reset after all construction code is written
    m_source->ResetIndent();

    m_header->ResetIndent();

    code.clear();
    // Now write any embedded images that aren't declared in the gen_Images List
    for (auto& iter: m_embedded_images)
    {
        // Only write the images that aren't declared in any gen_Images List. Note that
        // this *WILL* result in duplicate images being written to different forms.
        if (iter->form != m_ImagesForm)
        {
            WriteImageConstruction(code);
            m_source->doWrite("\n");  // force an extra line break
            m_source->SetLastLineBlank();
            break;
        }
    }

#if !defined(_DEBUG)
    if (m_panel_type == NOT_PANEL)
#endif  // _DEBUG
    {
        if (Project.as_bool(prop_disable_rubo_cop))
        {
            m_source->writeLine();
#if defined(_DEBUG)
            for (auto& iter: disable_list)
            {
                m_source->writeLine("# rubocop:enable " + iter);
            }
#else
            m_source->writeLine("# rubocop:enable all");
#endif  // _DEBUG
            m_source->writeLine();
        }
    }
}

void RubyCodeGenerator::WriteImageRequireStatements(Code& code)
{
    ASSERT_MSG(m_embedded_images.size(), "CheckMimeBase64Requirement() should only be called if there are embedded images");
    if (m_embedded_images.empty())
    {
        return;
    }
    m_source->writeLine();

    // First see if we need to import the gen_Images List
    bool images_file_imported = false;
    bool svg_import_libs = false;
    for (auto& iter: m_embedded_images)
    {
        if (iter->form == m_ImagesForm)
        {
            if (!images_file_imported)
            {
                tt_string import_name = iter->form->as_string(prop_ruby_file).filename();
                import_name.remove_extension();
                code.Str("require_relative '").Str(import_name) << "'";
                m_source->writeLine(code);
                code.clear();
                images_file_imported = true;
            }
            if (iter->imgs[0].type == wxBITMAP_TYPE_SVG)
            {
                if (!m_zlib_requirement_written)
                {
                    m_zlib_requirement_written = true;
                    m_source->writeLine("require 'zlib'");
                }
                if (!m_base64_requirement_written)
                {
                    m_base64_requirement_written = true;
                    m_source->writeLine("require 'base64'");
                }
                if (!m_stringio_requirement_written)
                {
                    m_stringio_requirement_written = true;
                    m_source->writeLine("require 'stringio'");
                }
                svg_import_libs = true;
            }
        }
        else if (!svg_import_libs)
        {
            if (iter->imgs[0].type == wxBITMAP_TYPE_SVG)
            {
                if (!m_zlib_requirement_written)
                {
                    m_zlib_requirement_written = true;
                    m_source->writeLine("require 'zlib'");
                }
                if (!m_base64_requirement_written)
                {
                    m_base64_requirement_written = true;
                    m_source->writeLine("require 'base64'");
                }
                if (!m_stringio_requirement_written)
                {
                    m_stringio_requirement_written = true;
                    m_source->writeLine("require 'stringio'");
                }
                svg_import_libs = true;
            }

            if (iter->form != m_ImagesForm)
            {
                // If the image isn't in the images file, then we need to add the base64 version
                // of the bitmap
                if (!m_base64_requirement_written)
                {
                    m_base64_requirement_written = true;
                    m_source->writeLine("require 'base64'");
                }

                // At this point we know that some method is required, but until we have
                // processed all the images, we won't know if the images file is required.
                // The images file provides it's own function for loading images, so we can
                // use that if it's available.
                m_NeedImageFunction = true;
            }
        }
    }  // end of for (auto& iter: m_embedded_images)

    if (m_NeedImageFunction)
    {
        if (images_file_imported)
            // The images file supplies the function we need
            m_NeedImageFunction = false;
        else
        {
            // We have to provide our own method, and that requires this library
            if (!m_stringio_requirement_written)
            {
                // No further check for this is needed
                // m_stringio_requirement_written = true;
                m_source->writeLine("require 'stringio'");
            }
        }
    }
}

void RubyCodeGenerator::GenerateImagesForm()
{
    if (m_embedded_images.empty() || !m_form_node->getChildCount())
    {
        return;
    }

    m_source->writeLine(txt_ruby_get_bundle, indent::auto_keep_whitespace);

    Code code(m_form_node, GEN_LANG_RUBY);

    for (auto iter_array: m_embedded_images)
    {
        if (iter_array->form != m_form_node)
            continue;

        if (iter_array->imgs[0].filename.size())
        {
            code.Eol().Str("# ").Str(iter_array->imgs[0].filename);
        }
        code.Eol().Str("$").Str(iter_array->imgs[0].array_name);
        if (iter_array->imgs[0].type == wxBITMAP_TYPE_SVG)
        {
            code.Str(" = (");
        }
        else
        {
            code.Str(" = Base64.decode64(");
        }
        m_source->writeLine(code);
        code.clear();
        auto encoded =
            base64_encode(iter_array->imgs[0].array_data.get(), iter_array->imgs[0].array_size & 0xFFFFFFFF, GEN_LANG_RUBY);
        if (encoded.size())
        {
            // Remove the trailing '+' character
            encoded.back().pop_back();
            // and the now trailing space
            encoded.back().pop_back();
            encoded.back() += ")";
            m_source->writeLine(encoded);
        }
    }

    m_source->writeLine();
}

void RubyCodeGenerator::GenUnhandledEvents(EventVector& events)
{
    ASSERT_MSG(events.size(), "GenUnhandledEvents() shouldn't be called if there are no events");
    if (events.empty())
    {
        return;
    }

    // Multiple events can be bound to the same function, so use a set to make sure we only generate each function once.
    std::unordered_set<std::string> code_lines;

    Code code(m_form_node, GEN_LANG_RUBY);
    auto sort_event_handlers = [](NodeEvent* a, NodeEvent* b)
    {
        return (EventHandlerDlg::GetRubyValue(a->get_value()) < EventHandlerDlg::GetRubyValue(b->get_value()));
    };

    // Sort events by function name
    std::sort(events.begin(), events.end(), sort_event_handlers);

    bool inherited_class = m_form_node->hasValue(prop_ruby_inherit_name);
    if (!inherited_class)
    {
        m_header->Indent();
    }
    else
    {
        m_header->Unindent();
        m_header->writeLine();
    }

    bool found_user_handlers = false;
    if (m_panel_type == NOT_PANEL)
    {
        tt_view_vector org_file;
        auto [path, has_base_file] = Project.GetOutputPath(m_form_node, GEN_LANG_RUBY);

        if (has_base_file && path.extension().empty())
        {
            path += ".rb";
        }

        // If the user has defined any event handlers, add them to the code_lines set so we
        // don't generate them again.
        if (has_base_file && org_file.ReadFile(path))
        {
            size_t line_index;
            for (line_index = 0; line_index < org_file.size(); ++line_index)
            {
                if (org_file[line_index].is_sameprefix(python_perl_ruby_end_cmt_line))
                {
                    break;
                }
            }
            for (++line_index; line_index < org_file.size(); ++line_index)
            {
                auto def = org_file[line_index].view_nonspace();
                if (org_file[line_index].view_nonspace().starts_with("def "))
                {
                    code_lines.emplace(def);
                    found_user_handlers = true;
                }
            }
        }
    }

    if (found_user_handlers)
    {
        code.Str("# Unimplemented Event handler functions\n# Copy any listed and paste them below the comment block, or "
                 "to your inherited class.");
        code.Eol().Eol();
    }
    else
    {
        code.Str("# Event handler functions\n# Add these below the comment block, or to your inherited class.");
        code.Eol().Eol();
    }

    Code undefined_handlers(m_form_node, GEN_LANG_RUBY);
    for (auto& event: events)
    {
        auto ruby_handler = EventHandlerDlg::GetRubyValue(event->get_value());
        // Ignore lambda's
        if (ruby_handler.empty() || ruby_handler.starts_with("[ruby:lambda]"))
            continue;

        tt_string set_code;
        set_code << "def " << ruby_handler << "(event)";
        if (code_lines.find(set_code) != code_lines.end())
            continue;
        code_lines.emplace(set_code);

        undefined_handlers.Str(set_code).Eol();
        if (event->get_name() == "CloseButtonClicked")
        {
            undefined_handlers.Tab().Str("end_modal(Wx::ID_CLOSE)");
        }
        else if (event->get_name() == "YesButtonClicked")
        {
            undefined_handlers.Tab().Str("end_modal(Wx::ID_YES)");
        }
        else if (event->get_name() == "NoButtonClicked")
        {
            undefined_handlers.Tab().Str("end_modal(Wx::ID_NO)");
        }
        else
        {
            undefined_handlers.Tab().Str("event.skip");
        }
        undefined_handlers.Eol().Unindent();
        undefined_handlers.Str("end").Eol();
    }

    if (undefined_handlers.size())
    {
        m_source->writeLine(code, indent::none);
        m_source->writeLine(ruby_begin_cmt_block, indent::none);
        m_source->writeLine(undefined_handlers);
        m_source->writeLine("end", indent::none);
        m_source->writeLine(ruby_end_cmt_block, indent::none);

        m_header->writeLine("# Event handler functions");
        m_header->writeLine(undefined_handlers);
    }
    m_header->Unindent();
}

tt_string MakeRubyPath(Node* node)
{
    auto [path, has_base_file] = Project.GetOutputPath(node->getForm(), GEN_LANG_RUBY);
    if (path.empty())
        path = "./";
    else if (has_base_file)
        path.remove_filename();
    return path;
}
