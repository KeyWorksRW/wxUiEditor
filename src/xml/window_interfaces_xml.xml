inline const char* window_interfaces_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<!--
	Each interface class can be added to a generator by using <inherits class="name" />. The class name
	will be used as a Category name.
	-->
	<gen class="wxTopLevelWindow" type="interface">
		<event name="wxEVT_ACTIVATE" class="wxActivateEvent"
			help="An activate event is sent when a window or application is being activated or deactivated." />
		<event name="wxEVT_CLOSE_WINDOW" class="wxCloseEvent"
			help="" />
		<event name="wxEVT_ICONIZE" class="wxIconizeEvent"
			help="Only available for the wxMSW, wxGTK ports." />
		<event name="wxEVT_MAXIMIZE" class="wxMaximizeEvent"
			help="Currently this event is only generated in wxMSW, wxGTK and wxOSX/Cocoa ports." />
		<event name="wxEVT_MOVE" class="wxMoveEvent"
			help="Generated when a window is moved." />
		<event name="wxEVT_MOVING" class="wxMoveEvent"
			help="Generated while the user is moving the window. These events are currently only generated by wxMSW port." />
		<event name="wxEVT_MOVE_START" class="wxMoveEvent"
			help="Generated when the user starts to move or size a window. These events are currently only generated by wxMSW port." />
		<event name="wxEVT_MOVE_END" class="wxMoveEvent"
			help="Generated when the user stops moving or sizing a window. These events are currently only generated by wxMSW port." />
		<event name="wxEVT_SHOW" class="wxShowEvent"
			help="Sent when the window is shown or hidden. Notice that the event is not triggered when the application is iconized (minimized) or restored under wxMSW." />
		<event name="wxEVT_IDLE" class="wxIdleEvent"
			help="Generated when the system becomes idle." />
	</gen>

	<gen class="wxWindow" type="interface">
		<property name="id" type="id">wxID_ANY</property>
		<property name="smart_size" type="wxSize"
			help="If a positive value is used, the minimum size of the window will be set to that if it is larger then what automatic layout would have calculated. A -1 indicates that the value should always be calculated automatically." />
		<property name="variant" type="option"
			help="Chooses a different variant of the window display to use (calls SetWindowVariant).">
			<option name="normal"
				help="Normal size" />
			<option name="small"
				help="About 25% smaller than normal." />
			<option name="mini"
				help="About 33% smaller than normal." />
			<option name="large"
				help="About 35% larger than normal." />
			normal
		</property>
		<property name="maximum_size" type="wxSize"
			help="Sets the maximum allowable size of the window." />
		<property name="window_style" type="bitlist">
			<option name="wxBORDER_DEFAULT"
				help="The window class will decide the kind of border to show, if any." />
			<option name="wxBORDER_SIMPLE"
				help="Displays a thin border around the window. wxSIMPLE_BORDER is the old name for this style." />
			<option name="wxBORDER_SUNKEN"
				help="Displays a sunken border. wxSUNKEN_BORDER is the old name for this style." />
			<option name="wxBORDER_RAISED"
				help="Displays a raised border. wxRAISED_BORDER is the old name for this style." />
			<option name="wxBORDER_STATIC"
				help="Displays a border suitable for a static control. wxSTATIC_BORDER is the old name for this style. Windows only." />
			<option name="wxBORDER_THEME"
				help="Displays a native border suitable for a control, on the current platform. On Windows XP or Vista, this will be a themed border; on most other platforms a sunken border will be used. For more information for themed borders on Windows, please see Themed borders on Windows." />
			<option name="wxBORDER_NONE"
				help="Displays no border, overriding the default border style for the window. wxNO_BORDER is the old name for this style." />
			<option name="wxTRANSPARENT_WINDOW"
				help="The window is transparent, that is, it will not receive paint events. Windows only." />
			<option name="wxTAB_TRAVERSAL"
				help="Setting this will cause the tab key to traverse child windows." />
			<option name="wxWANTS_CHARS"
				help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab." />
			<option name="wxVSCROLL"
				help="Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don't support scrollbars nor with top-level windows in most ports." />
			<option name="wxHSCROLL"
				help="Use this style to enable a horizontal scrollbar. The same limitations as for wxVSCROLL apply to this style." />
			<option name="wxALWAYS_SHOW_SB"
				help="If a window has scrollbars, disable them instead of hiding them when they are not needed (i.e. when the size of the window is big enough to not require the scrollbars to navigate it). This style is currently implemented for wxMSW, wxGTK and wxUniversal and does nothing on the other platforms." />
			<option name="wxCLIP_CHILDREN"
				help="Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only." />
			<option name="wxFULL_REPAINT_ON_RESIZE"
				help="Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms." />
		</property>
		<property name="window_extra_style" type="bitlist">
			<option name="wxWS_EX_VALIDATE_RECURSIVELY"
				help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows." />
			<option name="wxWS_EX_BLOCK_EVENTS"
				help="wxCommandEvents are propagated upward to the parent window, it's parent window, etc. Setting this flag blocks this propagation at this window, preventing events from being propagated further upwards." />
			<option name="wxWS_EX_TRANSIENT"
				help="Don't use this window as an implicit parent for the other windows: this must be used with transient windows as otherwise there is the risk of creating a dialog/frame with this window as a parent which would lead to a crash if the parent is destroyed before the child." />
			<option name="wxWS_EX_PROCESS_IDLE"
				help="This window should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED." />
			<option name="wxWS_EX_PROCESS_UI_UPDATES"
				help="This window should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is wxUPDATE_UI_PROCESS_SPECIFIED." />
		</property>
		<property name="tooltip" type="string_edit_escapes"
			help="Attach a tooltip to the window." />
		<property name="disabled" type="bool"
			help="Disable the window for user input. Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is.">0</property>
		<property name="hidden" type="bool"
			help="Shows or hides the window.">0</property>
		<property name="foreground_colour" type="wxColour"
			help="Sets the foreground colour of the window. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list." />
		<property name="background_colour" type="wxColour"
			help="Sets the background colour of the window. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list." />
		<property name="context_help" type="string_escapes"
			help="Sets the help text to be used as context-sensitive help for this window." />
		<property name="font" type="wxFont"
			help="Sets the font for this window. This should not be use for a parent window if you don't want its font to be inherited by its children" />
		<property name="pos" type="wxPoint"
			help="Specifies the position to pass to the constructor for the window. A -1 indicates that the value should be calculated automatically." />
		<property name="size" type="wxSize"
			help="Specifies the size to pass to the constructor for the window. A -1 indicates that the value should be calculated automatically. Automatic layout (such as calling SetSizerAndFit) may override these values. This property is ignored if the smart_size property is used." />
		<property name="minimum_size" type="wxSize"
			help="Sets the minimum size of the window. Any positive value will override the automatic size calculation that would normally be done. This property is ignored if the smart_size property is used." />
		<property name="derived_class" type="string"
			help="If you have derived a class from a wxWidget class and you want this component to use your derived class, then specify that class name here. You will need to add the header file for your class to the derived_header property." />
		<property name="derived_header" type="file"
			help="Specify the name of the header file that declares your derived class." />
		<property name="window_name" type="string_escapes"
			help="The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows." />
	</gen>
</GeneratorDefinitions>)===";
