///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>

#include "id_editor_dlg.h"

bool IDEditorDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_radioBtn_Standard = new wxRadioButton(this, wxID_ANY, "wxWidgets Standard ID");
    m_std_id_box = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_radioBtn_Standard), wxVERTICAL);

    m_standard_ids = new wxChoice(m_std_id_box->GetStaticBox(), wxID_ANY);
    m_std_id_box->Add(m_standard_ids, wxSizerFlags().Expand().Border(wxALL));

    m_flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);

    auto* staticText = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "Label:");
    m_flex_grid_sizer->Add(staticText, wxSizerFlags().Border(wxALL));

    m_stock_label = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "stock label");
    m_flex_grid_sizer->Add(m_stock_label, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_2 = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "Help:");
    m_flex_grid_sizer->Add(staticText_2, wxSizerFlags().Border(wxALL));

    m_help_text = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "help text");
    m_flex_grid_sizer->Add(m_help_text, wxSizerFlags().Border(wxALL));
    m_flex_grid_sizer->ShowItems(false);
    m_std_id_box->Add(m_flex_grid_sizer, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(m_std_id_box, wxSizerFlags().Expand().Border(wxALL));

    m_radioBtn_Custom = new wxRadioButton(this, wxID_ANY, "Custom ID");
    m_cstm_id_box = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_radioBtn_Custom), wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_5 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "ID:");
    box_sizer->Add(staticText_5, wxSizerFlags().Center().Border(wxALL));

    m_textID = new wxTextCtrl(m_cstm_id_box->GetStaticBox(), wxID_ANY, wxEmptyString);
    box_sizer->Add(m_textID, wxSizerFlags(1).Expand().Border(wxALL));

    auto* staticText_4 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "Value:");
    box_sizer->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    m_textValue = new wxTextCtrl(m_cstm_id_box->GetStaticBox(), wxID_ANY, wxEmptyString);
    m_textValue->SetHint("wxID_HIGHEST + 1");
    box_sizer->Add(m_textValue, wxSizerFlags(1).Border(wxALL));

    m_cstm_id_box->Add(box_sizer, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_3 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "Prefix:");
    box_sizer_2->Add(staticText_3, wxSizerFlags().Center().Border(wxALL));

    m_comboPrefixes = new wxComboBox(m_cstm_id_box->GetStaticBox(), wxID_ANY);
    m_comboPrefixes->Append("none");
    m_comboPrefixes->SetStringSelection("none");
    box_sizer_2->Add(m_comboPrefixes, wxSizerFlags(1).Border(wxALL));

    auto* staticText_7 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "Suffix:");
    box_sizer_2->Add(staticText_7, wxSizerFlags().Center().Border(wxALL));

    m_comboSuffix = new wxComboBox(m_cstm_id_box->GetStaticBox(), wxID_ANY);
    m_comboSuffix->Append("none");
    m_comboSuffix->Append("");
    m_comboSuffix->SetStringSelection("none");
    box_sizer_2->Add(m_comboSuffix, wxSizerFlags(1).Border(wxALL));

    m_cstm_id_box->Add(box_sizer_2, wxSizerFlags().Expand().Border(wxALL));

    dlg_sizer->Add(m_cstm_id_box, wxSizerFlags().Border(wxALL));

    auto* box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_6 = new wxStaticText(this, wxID_ANY, "New ID:");
    box_sizer_3->Add(staticText_6, wxSizerFlags().Border(wxALL));

    m_final_id = new wxStaticText(this, wxID_ANY, "...");
    box_sizer_3->Add(m_final_id, wxSizerFlags(1).Border(wxALL));

    dlg_sizer->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_UPDATE_UI, &IDEditorDlg::OnAffirmative, this, wxID_OK);
    m_standard_ids->Bind(wxEVT_CHOICE, &IDEditorDlg::OnStdChange, this);
    m_comboPrefixes->Bind(wxEVT_COMBOBOX, &IDEditorDlg::OnPrefixSelect, this);
    m_comboSuffix->Bind(wxEVT_COMBOBOX, &IDEditorDlg::OnSuffixSelect, this);
    Bind(wxEVT_INIT_DIALOG, &IDEditorDlg::OnInit, this);
    m_radioBtn_Standard->Bind(wxEVT_RADIOBUTTON, &IDEditorDlg::OnStandardID, this);
    m_radioBtn_Custom->Bind(wxEVT_RADIOBUTTON, &IDEditorDlg::OnCustomID, this);
    m_textID->Bind(wxEVT_TEXT, &IDEditorDlg::OnTextID, this);
    m_textValue->Bind(wxEVT_TEXT, &IDEditorDlg::OnTextValue, this);
    m_comboPrefixes->Bind(wxEVT_TEXT, &IDEditorDlg::OnPrefixEdit, this);
    m_comboSuffix->Bind(wxEVT_TEXT, &IDEditorDlg::OnSuffixEdit, this);
    m_comboPrefixes->Bind(wxEVT_TEXT_ENTER, &IDEditorDlg::OnPrefixEnter, this);
    m_comboSuffix->Bind(wxEVT_TEXT_ENTER, &IDEditorDlg::OnSuffixEnter, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Dialog for editing a ID name and optional value
// Author:    Ralph Walden
// Copyright: Copyright (c) 2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include <array>

#include <wx/stockitem.h>  // stock items helpers

#include "id_lists.h"

#include "node.h"          // Node class
#include "node_creator.h"  // NodeCreator -- Class used to create nodes

void IDEditorDlg::OnInit(wxInitDialogEvent& event)
{
    for (auto& iter: list_wx_ids)
    {
        m_standard_ids->Append(iter);
    }

    ASSERT_MSG(m_node, "You must call SetNode() before calling OnInit()")
    auto& cur_id = m_node->value(prop_id);
    if (cur_id.starts_with("wxID_"))
    {
        m_radioBtn_Standard->SetValue(true);
        m_standard_ids->SetStringSelection(cur_id);
        m_final_id->SetLabel(cur_id);

        m_radioBtn_Custom->SetValue(false);
        m_cstm_id_box->GetStaticBox()->Enable(false);
    }

    event.Skip();  // transfer all validator data to their windows and update UI
}

void IDEditorDlg::OnStdChange(wxCommandEvent& WXUNUSED(event))
{
    m_result = m_standard_ids->GetStringSelection();
    m_final_id->SetLabel(m_result);

    for (auto& iter: lst_stock_ids)
    {
        if (iter == m_result)
        {
            if (auto stock_id = NodeCreation.GetConstantAsInt(m_result.utf8_string()); stock_id > 0)
            {
                m_flex_grid_sizer->ShowItems(true);
                m_stock_label->SetLabel(wxGetStockLabel(stock_id));
                m_help_text->SetLabel(wxGetStockHelpString(stock_id));
                Fit();
                return;
            }
        }
    }
    m_flex_grid_sizer->ShowItems(false);
    Fit();
}

void IDEditorDlg::OnStandardID(wxCommandEvent& WXUNUSED(event))
{
    m_radioBtn_Custom->SetValue(false);
    m_cstm_id_box->GetStaticBox()->Enable(false);

    m_std_id_box->GetStaticBox()->Enable(true);
    m_radioBtn_Standard->SetValue(true);
}

void IDEditorDlg::OnCustomID(wxCommandEvent& WXUNUSED(event))
{
    m_radioBtn_Custom->SetValue(true);
    m_cstm_id_box->GetStaticBox()->Enable(true);

    m_std_id_box->GetStaticBox()->Enable(false);
    m_radioBtn_Standard->SetValue(false);
}

void IDEditorDlg::OnTextID(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnTextID
}

void IDEditorDlg::OnTextValue(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnTextValue
}

void IDEditorDlg::OnPrefixSelect(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnPrefixSelect
}

void IDEditorDlg::OnPrefixEdit(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnPrefixEdit
}

void IDEditorDlg::OnPrefixEnter(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnPrefixEnter
}

void IDEditorDlg::OnSuffixSelect(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnSuffixSelect
}

void IDEditorDlg::OnSuffixEdit(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnSuffixEdit
}

void IDEditorDlg::OnSuffixEnter(wxCommandEvent& WXUNUSED(event))
{
    // TODO: Implement OnSuffixEnter
}

void IDEditorDlg::OnAffirmative(wxUpdateUIEvent& WXUNUSED(event))
{
    // TODO: Implement OnAffirmative
}
