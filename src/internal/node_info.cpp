///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/statbox.h>

#include "node_info.h"

bool NodeInfo::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* parent_sizer = new wxBoxSizer(wxVERTICAL);

    auto* static_box_2 = new wxStaticBoxSizer(wxVERTICAL, this, "Selected Node");

    m_txt_generator = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Name:");
    static_box_2->Add(m_txt_generator, wxSizerFlags().Border(wxALL));

    m_txt_type = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Type:");
    static_box_2->Add(m_txt_type, wxSizerFlags().Border(wxALL));

    m_txt_memory = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Memory:");
    static_box_2->Add(m_txt_memory, wxSizerFlags().Border(wxALL));

    parent_sizer->Add(static_box_2, wxSizerFlags().Border(wxALL));

    auto* static_box = new wxStaticBoxSizer(wxVERTICAL, this, "Memory Usage");

    m_txt_project = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "Project:");
    static_box->Add(m_txt_project, wxSizerFlags().Border(wxALL));

    m_txt_clipboard = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "Clipboard:");
    static_box->Add(m_txt_clipboard, wxSizerFlags().Border(wxALL));

    parent_sizer->Add(static_box, wxSizerFlags().Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxCLOSE|wxNO_DEFAULT);
    stdBtn->GetCancelButton()->SetDefault();
    parent_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(parent_sizer);
    }
    else
    {
        SetSizer(parent_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &NodeInfo::OnInit, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

// The original file was missing the comment block ending the generated code!
//
// The entire original file has been copied below this comment block.

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Node memory usage dialog
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"        // Main window frame
#include "node.h"             // Node class
#include "project_handler.h"  // ProjectHandler class

void NodeInfo::CalcNodeMemory(Node* node, NodeMemory& node_memory)
{
    node_memory.size += node->getNodeSize();
    ++node_memory.children;

    for (auto& iter: node->getChildNodePtrs())
    {
        CalcNodeMemory(iter.get(), node_memory);
    }
}

void NodeInfo::OnInit(wxInitDialogEvent& /* event */)
{
    tt_string label;
    NodeMemory node_memory;

    auto* cur_sel = m_node ? m_node : wxGetFrame().getSelectedNode();
    if (cur_sel)
    {
        label.clear();
        label << "Generator: gen_" << cur_sel->declName();
        m_txt_generator->SetLabel(label);
        label.clear();
        label << "Type: type_" << GenEnum::map_GenTypes.at(cur_sel->getGenType());
        m_txt_type->SetLabel(label);

        node_memory.size = 0;
        node_memory.children = 0;
        CalcNodeMemory(cur_sel, node_memory);
#ifdef __cpp_lib_format
        label = std::format(std::locale(""), "Memory: {:L} ({:L} node{})", node_memory.size, node_memory.children,
                            node_memory.children == 1 ? "" : "s");
#else
        label.clear();
        label << "Memory: " << node_memory.size << " (" << node_memory.children << ") node"
              << (node_memory.children == 1 ? "" : "s");
#endif
        m_txt_memory->SetLabel(label);
    }

    CalcNodeMemory(Project.getProjectNode(), node_memory);

#ifdef __cpp_lib_format
    label = std::format(std::locale(""), "Project: {:L} ({:L} nodes)", node_memory.size, node_memory.children);
#else
    label.clear();
    label << "Project: " << node_memory.size << " (" << node_memory.children << ") node"
          << (node_memory.children == 1 ? "" : "s");
#endif
    m_txt_project->SetLabel(label);

    auto clipboard = wxGetFrame().getClipboard();
    if (clipboard)
    {
        node_memory.size = 0;
        node_memory.children = 0;
        CalcNodeMemory(clipboard, node_memory);
#ifdef __cpp_lib_format
        label = std::format(std::locale(""), "Clipboard: {:L} ({:L} nodes)", node_memory.size, node_memory.children);
#else
        label.clear();
        label << "Clipboard: " << node_memory.size << " (" << node_memory.children << ") node"
              << (node_memory.children == 1 ? "" : "s");
#endif
        m_txt_clipboard->SetLabel(label);
    }

    Fit();
}
