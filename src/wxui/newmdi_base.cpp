///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/stattext.h>

#include "newmdi_base.h"

bool NewMdiForm::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_3 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_3 = new wxStaticText(this, wxID_ANY,
        "These are initial values -- all of them can be changed after the frame is created.");
    staticText_3->Wrap(300);
    box_sizer_3->Add(staticText_3, wxSizerFlags().Border(wxALL));

    m_infoBar = new wxInfoBar(this);
    m_infoBar->SetShowHideEffects(wxSHOW_EFFECT_NONE, wxSHOW_EFFECT_NONE);
    m_infoBar->SetEffectDuration(500);
    box_sizer_3->Add(m_infoBar, wxSizerFlags().Expand().Border(wxALL));

    box_sizer->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    auto* class_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText = new wxStaticText(this, wxID_ANY, "&Frame type:");
    class_sizer->Add(staticText, wxSizerFlags().Center().Border(wxALL));

    m_choice_type = new wxChoice(this, wxID_ANY);
    m_choice_type->Append("wxAuiMDIParentFrame");
    m_choice_type->Append("wxDocMDIParentFrame");
    m_choice_type->Append("");
    m_choice_type->SetSelection(1);
    class_sizer->Add(m_choice_type, wxSizerFlags(1).Border(wxALL));

    box_sizer->Add(class_sizer, wxSizerFlags().Expand().Border(wxALL));

    auto* flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer->AddGrowableCol(1, 1);
    }

    auto* staticText_2 = new wxStaticText(this, wxID_ANY, "&Description:");
    flex_grid_sizer->Add(staticText_2, wxSizerFlags().Center().Border(wxALL));

    m_description = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_description->SetHint("Text");
    m_description->SetToolTip(
    "A short description of what the template is for. This string will be displayed in the file filter list of Windows file selectors. ");
    flex_grid_sizer->Add(m_description, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_6 = new wxStaticText(this, wxID_ANY, "&View Type:");
    flex_grid_sizer->Add(staticText_6, wxSizerFlags().Border(wxALL));

    m_choice_view = new wxChoice(this, wxID_ANY);
    m_choice_view->Append("Text Control");
    m_choice_view->Append("Scrolled Canvas (for images)");
    m_choice_view->Append("");
    m_choice_view->SetSelection(0);
    flex_grid_sizer->Add(m_choice_view, wxSizerFlags(1).Border(wxALL));

    auto* staticText_4 = new wxStaticText(this, wxID_ANY, "&Filter:");
    flex_grid_sizer->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    m_filter = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_filter->SetHint("*.txt");
    m_filter->SetToolTip("An appropriate file filter such as \"*.txt\". ");
    flex_grid_sizer->Add(m_filter, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_5 = new wxStaticText(this, wxID_ANY, "&Extension:");
    flex_grid_sizer->Add(staticText_5, wxSizerFlags().Center().Border(wxALL));

    m_extension = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_extension->SetHint("txt");
    m_extension->SetToolTip("An appropriate file filter such as \"*.txt\". ");
    flex_grid_sizer->Add(m_extension, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_7 = new wxStaticText(this, wxID_ANY, "D&oc Name:");
    flex_grid_sizer->Add(staticText_7, wxSizerFlags().Border(wxALL));

    m_doc_name = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_doc_name->SetHint("Text Document");
    m_doc_name->SetToolTip("An appropriate file filter such as \"*.txt\". ");
    flex_grid_sizer->Add(m_doc_name, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_8 = new wxStaticText(this, wxID_ANY, "V&iew Name:");
    flex_grid_sizer->Add(staticText_8, wxSizerFlags().Border(wxALL));

    m_view_name = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_view_name->SetHint("Text View");
    m_view_name->SetToolTip("An appropriate file filter such as \"*.txt\". ");
    flex_grid_sizer->Add(m_view_name, wxSizerFlags().Expand().Border(wxALL));

    box_sizer->Add(flex_grid_sizer, wxSizerFlags(1).Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    box_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(box_sizer);
    Centre(wxBOTH);

    // Event handlers
    m_choice_view->Bind(wxEVT_CHOICE, &NewMdiForm::OnViewType, this);
    Bind(wxEVT_INIT_DIALOG,
        [this](wxInitDialogEvent& event)
        {
            m_choice_type->SetFocus();
            event.Skip();
        });

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
