///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/choice.h>
#include <wx/radiobut.h>
#include <wx/sizer.h>
#include <wx/statbox.h>
#include <wx/stattext.h>
#include <wx/textctrl.h>
#include <wx/valgen.h>
#include <wx/valtext.h>

#include "newmdi_base.h"

bool NewMdiForm::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_3 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_3 = new wxStaticText(this, wxID_ANY,
        "These are initial values -- all of them can be changed after the frame is created.");
    staticText_3->Wrap(300);
    box_sizer_3->Add(staticText_3, wxSizerFlags().Border(wxALL));

    m_infoBar = new wxInfoBar(this);
    m_infoBar->SetShowHideEffects(wxSHOW_EFFECT_NONE, wxSHOW_EFFECT_NONE);
    m_infoBar->SetEffectDuration(500);
    box_sizer_3->Add(m_infoBar, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_7 = new wxBoxSizer(wxHORIZONTAL);

    auto* box_sizer_8 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_6 = new wxStaticText(this, wxID_ANY, "&Folder name:");
    staticText_6->SetToolTip("Change this to something unique to your project.");
    box_sizer_8->Add(staticText_6, wxSizerFlags().Center().Border(wxALL));

    auto* folder_name = new wxTextCtrl(this, wxID_ANY, "Mdi Application");
    folder_name->SetFocus();
    folder_name->SetValidator(wxTextValidator(wxFILTER_NONE, &m_folder_name));
    folder_name->SetToolTip("Change this to something unique to your project.");
    box_sizer_8->Add(folder_name, wxSizerFlags(1).Border(wxALL));

    box_sizer_7->Add(box_sizer_8, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_9 = new wxStaticText(this, wxID_ANY, "&App class:");
    staticText_9->SetToolTip("Change this to something unique to your project.");
    box_sizer_2->Add(staticText_9, wxSizerFlags().Center().Border(wxALL));

    auto* app_classname = new wxTextCtrl(this, wxID_ANY, "DocViewAppBase");
    app_classname->SetValidator(wxTextValidator(wxFILTER_NONE, &m_app_class));
    app_classname->SetMinSize(ConvertDialogToPixels(wxSize(100, -1)));
    app_classname->SetToolTip("Change this to something unique to your project.");
    box_sizer_2->Add(app_classname, wxSizerFlags(1).Border(wxALL));

    box_sizer_7->Add(box_sizer_2, wxSizerFlags().Expand().Border(wxALL));

    box_sizer_3->Add(box_sizer_7, wxSizerFlags().Border(wxALL));

    auto* static_box = new wxStaticBoxSizer(wxHORIZONTAL, this, "Frame Type");

    auto* radioBtn = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "wxAuiMDIParentFrame", wxDefaultPosition,
        wxDefaultSize, wxRB_GROUP);
    radioBtn->SetValue(true);
    radioBtn->SetValidator(wxGenericValidator(&m_aui_frame));
    static_box->Add(radioBtn, wxSizerFlags().Border(wxALL));

    auto* radioBtn_2 = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "wxDocMDIParentFrame");
    radioBtn_2->SetValidator(wxGenericValidator(&m_doc_frame));
    static_box->Add(radioBtn_2, wxSizerFlags().Border(wxALL));

    box_sizer_3->Add(static_box, wxSizerFlags().Expand().Border(wxALL));

    auto* static_box_2 = new wxStaticBoxSizer(wxHORIZONTAL, this, "View");

    auto* choice_view = new wxChoice(static_box_2->GetStaticBox(), wxID_ANY);
    choice_view->Append("Text Control");
    choice_view->Append("Image");
    m_view_type = "Text Control";  // set validator variable
    choice_view->SetValidator(wxGenericValidator(&m_view_type));
    static_box_2->Add(choice_view, wxSizerFlags(1).Border(wxALL));

    auto* staticText_11 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Class name:");
    staticText_11->SetToolTip("Change this to something unique to your project.");
    static_box_2->Add(staticText_11, wxSizerFlags().Center().Border(wxALL));

    auto* view_classname = new wxTextCtrl(static_box_2->GetStaticBox(), wxID_ANY, "TextViewBase");
    view_classname->SetValidator(wxTextValidator(wxFILTER_NONE, &m_view_class));
    view_classname->SetToolTip("Change this to something unique to your project.");
    static_box_2->Add(view_classname, wxSizerFlags(1).Border(wxALL));

    box_sizer_3->Add(static_box_2, wxSizerFlags().Expand().Border(wxALL));

    auto* static_box_3 = new wxStaticBoxSizer(wxVERTICAL, this, "Document");

    auto* flex_grid_sizer = new wxFlexGridSizer(4, 0, 0);
    flex_grid_sizer->SetFlexibleDirection(wxHORIZONTAL);

    auto* staticText_2 = new wxStaticText(static_box_3->GetStaticBox(), wxID_ANY, "&Description:");
    flex_grid_sizer->Add(staticText_2, wxSizerFlags().Center().Border(wxALL));

    auto* description = new wxTextCtrl(static_box_3->GetStaticBox(), wxID_ANY, wxEmptyString);
    description->SetHint("Text");
    description->SetValidator(wxTextValidator(wxFILTER_NONE, &m_description));
    description->SetToolTip(
    "A short description of what the template is for. This string will be displayed in the file filter list of Windows file selectors. ");
    flex_grid_sizer->Add(description, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_10 = new wxStaticText(static_box_3->GetStaticBox(), wxID_ANY, "Class name:");
    staticText_10->SetToolTip("Change this to something unique to your project.");
    flex_grid_sizer->Add(staticText_10, wxSizerFlags().Center().Border(wxALL));

    auto* doc_classname = new wxTextCtrl(static_box_3->GetStaticBox(), wxID_ANY, "DocumentTextCtrlBase");
    doc_classname->SetValidator(wxTextValidator(wxFILTER_NONE, &m_doc_class));
    doc_classname->SetMinSize(ConvertDialogToPixels(wxSize(100, -1)));
    doc_classname->SetToolTip("Change this to something unique to your project.");
    flex_grid_sizer->Add(doc_classname, wxSizerFlags(1).Border(wxALL));

    auto* staticText_5 = new wxStaticText(static_box_3->GetStaticBox(), wxID_ANY, "&Extension:");
    flex_grid_sizer->Add(staticText_5, wxSizerFlags().Center().Border(wxALL));

    auto* extension = new wxTextCtrl(static_box_3->GetStaticBox(), wxID_ANY, wxEmptyString);
    extension->SetHint("txt");
    extension->SetValidator(wxTextValidator(wxFILTER_NONE, &m_default_extension));
    extension->SetToolTip("An appropriate file filter such as \"*.txt\". ");
    flex_grid_sizer->Add(extension, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_4 = new wxStaticText(static_box_3->GetStaticBox(), wxID_ANY, "&Filter:");
    flex_grid_sizer->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    auto* filter = new wxTextCtrl(static_box_3->GetStaticBox(), wxID_ANY, wxEmptyString);
    filter->SetHint("*.txt");
    filter->SetValidator(wxTextValidator(wxFILTER_NONE, &m_filter));
    filter->SetToolTip("An appropriate file filter such as \"*.txt\". ");
    flex_grid_sizer->Add(filter, wxSizerFlags().Expand().Border(wxALL));

    static_box_3->Add(flex_grid_sizer, wxSizerFlags().Expand().Border(wxALL));

    box_sizer_3->Add(static_box_3, wxSizerFlags().Expand().Border(wxALL));

    box_sizer->Add(box_sizer_3, wxSizerFlags().Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    box_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(box_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_BUTTON, &NewMdiForm::OnOK, this, wxID_OK);
    choice_view->Bind(wxEVT_CHOICE, &NewMdiForm::OnViewType, this);
    Bind(wxEVT_INIT_DIALOG,
        [this](wxInitDialogEvent& event)
        {
            event.Skip();
        });
    folder_name->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {VerifyClassName();
        });
    app_classname->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {VerifyClassName();
        });
    view_classname->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {VerifyClassName();
        });
    doc_classname->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {VerifyClassName();
        });

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
