////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include <wx/button.h>

#include "../custom_ctrls/colour_rect_ctrl.h"

#include "colourprop_base.h"

bool ColourPropBase::Create(wxWindow* parent, wxWindowID id, const wxString& title,
        const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto box_sizer_3 = new wxBoxSizer(wxVERTICAL);
    dlg_sizer->Add(box_sizer_3, wxSizerFlags().Expand().Border(wxALL));

    auto box_sizer = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_3->Add(box_sizer, wxSizerFlags().Center().Border(wxALL));

    m_colour_rect = new wxue_ctrl::ColourRectCtrl(this);
    m_colour_rect->SetMaxSize(wxSize(32, 32));
    box_sizer->Add(m_colour_rect, wxSizerFlags().Border(wxALL));

    m_static_sample_text = new wxStaticText(this, wxID_ANY, "Sample Text");
    box_sizer->Add(m_static_sample_text, wxSizerFlags().Center().Border(wxALL));

    dlg_sizer->AddSpacer(5 + wxSizerFlags::GetDefaultBorder());

    auto box_sizer_2 = new wxBoxSizer(wxVERTICAL);
    dlg_sizer->Add(box_sizer_2, wxSizerFlags().Expand().Border(wxALL));

    m_radio_default = new wxRadioButton(this, wxID_ANY, "Let wxWidgets choose the colour");
    m_radio_default->SetValue(true);
    box_sizer_2->Add(m_radio_default, wxSizerFlags().DoubleBorder(wxALL));

    dlg_sizer->AddSpacer(5 + wxSizerFlags::GetDefaultBorder());

    m_radio_custom = new wxRadioButton(this, wxID_ANY, "Custom Colour");
    m_staticbox_custom = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY,
#if wxCHECK_VERSION(3, 1, 1)
    m_radio_custom),
#else
    wxEmptyString),
#endif
    wxVERTICAL);
    m_staticbox_custom->GetStaticBox()->Enable(false);
    dlg_sizer->Add(m_staticbox_custom, wxSizerFlags().Expand().Border(wxALL));

    m_colourPicker = new wxColourPickerCtrl(m_staticbox_custom->GetStaticBox(), wxID_ANY, *wxBLACK, wxDefaultPosition, wxDefaultSize,
        wxCLRP_USE_TEXTCTRL);
    m_colourPicker->Enable(false);
    m_staticbox_custom->Add(m_colourPicker, wxSizerFlags().Border(wxALL));

    dlg_sizer->AddSpacer(5 + wxSizerFlags::GetDefaultBorder());

    m_radio_system = new wxRadioButton(this, wxID_ANY, "System Colour");
    m_staticbox_system = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY,
#if wxCHECK_VERSION(3, 1, 1)
    m_radio_system),
#else
    wxEmptyString),
#endif
    wxVERTICAL);
    m_staticbox_system->GetStaticBox()->Enable(false);
    dlg_sizer->Add(m_staticbox_system, wxSizerFlags().Expand().Border(wxALL));

    m_combo_system = new wxComboBox(m_staticbox_system->GetStaticBox(), wxID_ANY, wxEmptyString);
    m_combo_system->Enable(false);
    m_combo_system->SetInitialSize(ConvertPixelsToDialog(wxSize(250 > GetBestSize().x ? 250 : -1, -1)));
    m_staticbox_system->Add(m_combo_system, wxSizerFlags().Border(wxALL));

    auto staticText = new wxStaticText(m_staticbox_system->GetStaticBox(), wxID_ANY, "Caution: On Windows, these are classic colours. They may not be the colours the user has set via a Theme or Dark Mode.");
    staticText->Wrap(250);
    m_staticbox_system->Add(staticText, wxSizerFlags().Border(wxALL));

    dlg_sizer->AddSpacer(5 + wxSizerFlags::GetDefaultBorder());

    auto stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &ColourPropBase::OnInit, this);
    m_radio_default->Bind(wxEVT_RADIOBUTTON, &ColourPropBase::OnSetDefault, this);
    m_radio_custom->Bind(wxEVT_RADIOBUTTON, &ColourPropBase::OnRadioCustomColour, this);
    m_colourPicker->Bind(wxEVT_COLOURPICKER_CHANGED, &ColourPropBase::OnColourChanged, this);
    m_radio_system->Bind(wxEVT_RADIOBUTTON, &ColourPropBase::OnRadioSystemColour, this);
    m_combo_system->Bind(wxEVT_COMBOBOX, &ColourPropBase::OnSystemColourChange, this);
    Bind(wxEVT_BUTTON, &ColourPropBase::OnOK, this, wxID_OK);

    return true;
}
