///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/sizer.h>

#include "undo_info.h"

bool UndoInfo::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto* flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);

    auto* staticText_5 = new wxStaticText(this, wxID_ANY, "Number of Undo items:");
    flex_grid_sizer->Add(staticText_5, wxSizerFlags().Border(wxALL));

    m_txt_undo_items = new wxStaticText(this, wxID_ANY, "...");
    flex_grid_sizer->Add(m_txt_undo_items, wxSizerFlags().Border(wxALL));

    auto* staticText_6 = new wxStaticText(this, wxID_ANY, "Number of Redo items:");
    flex_grid_sizer->Add(staticText_6, wxSizerFlags().Border(wxALL));

    m_txt_redo_items = new wxStaticText(this, wxID_ANY, "...");
    flex_grid_sizer->Add(m_txt_redo_items, wxSizerFlags().Border(wxALL));

    auto* staticText_7 = new wxStaticText(this, wxID_ANY, "Undo Memory:");
    flex_grid_sizer->Add(staticText_7, wxSizerFlags().Border(wxALL));

    m_txt_undo_memory = new wxStaticText(this, wxID_ANY, "...");
    flex_grid_sizer->Add(m_txt_undo_memory, wxSizerFlags().Border(wxALL));

    auto* staticText_8 = new wxStaticText(this, wxID_ANY, "Redo Memory:");
    flex_grid_sizer->Add(staticText_8, wxSizerFlags().Border(wxALL));

    m_txt_redo_memory = new wxStaticText(this, wxID_ANY, "...");
    flex_grid_sizer->Add(m_txt_redo_memory, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(flex_grid_sizer, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxCLOSE|wxNO_DEFAULT);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &UndoInfo::OnInit, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Author:    Ralph Walden
// Copyright: Copyright (c) 2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"
#include "node_info.h"
#include "undo_stack.h"

void UndoInfo::OnInit(wxInitDialogEvent& event)
{
    const auto& undo_stack = wxGetApp().GetMainFrame()->GetUndoStack();
    const auto& undo_vector = undo_stack.GetUndoVector();
    const auto& redo_vector = undo_stack.GetRedoVector();
    tt_string label;

    label.Format("%kzu", undo_vector.size());
    m_txt_undo_items->SetLabel(label);
    label.clear();
    label.Format("%kzu", redo_vector.size());
    m_txt_redo_items->SetLabel(label);
    label.clear();

    // NodeInfo::NodeMemory node_memory;

    Fit();

    event.Skip();
}
