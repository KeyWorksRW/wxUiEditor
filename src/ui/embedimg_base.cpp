////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include "pch.h"

#include <wx/collpane.h>
#include <wx/sizer.h>
#include <wx/statbox.h>

#include "embedimg_base.h"

EmbedImageBase::EmbedImageBase(wxWindow* parent, wxWindowID id, const wxString& title,
		const wxPoint& pos, const wxSize& size, long style) :
	wxDialog(parent, id, title, pos, size, style)
{
    SetSizeHints(wxDefaultSize);

    auto parent_sizer = new wxBoxSizer(wxVERTICAL);

    auto box_sizer = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer->Add(box_sizer, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto collapsiblePane = new wxCollapsiblePane(this, wxID_ANY, wxString::FromUTF8("Dialog Description"));
    collapsiblePane->Collapse();
    box_sizer->Add(collapsiblePane, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto box_sizer2 = new wxBoxSizer(wxHORIZONTAL);

    m_staticDescription = new wxStaticText(collapsiblePane->GetPane(), wxID_ANY, wxString::FromUTF8("This dialog can be used to convert an image into a file that can be #included into a source file. The original image can be any file format that wxWidgets supports.\n\nIf Header is chosen, XPM and BMP files will be converted to PNG before saving. All other formats will be saved in their original format."));
    m_staticDescription->Wrap(360);
    box_sizer2->Add(m_staticDescription, wxSizerFlags().Border(wxALL));

    collapsiblePane->GetPane()->SetSizerAndFit(box_sizer2);

    auto flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer->AddGrowableCol(1);
    }
    parent_sizer->Add(flex_grid_sizer, wxSizerFlags().Expand().Border(wxALL));

    m_staticOriginal = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("&Original:"));
    flex_grid_sizer->Add(m_staticOriginal, wxSizerFlags().Center().Border(wxALL));

    m_fileOriginal = new wxFilePickerCtrl(this, wxID_ANY, wxEmptyString, wxFileSelectorPromptStr, 
    wxString::FromUTF8("Select file(s)\", \"All files|*.*|PNG|*.png|XPM|*.xpm|Tiff|*.tif;*.tiff|Bitmaps|*.bmp|Icon|*.ico||"), wxDefaultPosition, wxSize(300, -1),
    wxFLP_USE_TEXTCTRL|wxFLP_OPEN|wxFLP_FILE_MUST_EXIST);
    flex_grid_sizer->Add(m_fileOriginal, wxSizerFlags().Expand().Border(wxALL));

    m_staticHeader = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("O&utput:"));
    flex_grid_sizer->Add(m_staticHeader, wxSizerFlags().Center().Border(wxALL));

    m_fileHeader = new wxFilePickerCtrl(this, wxID_ANY, wxEmptyString, wxFileSelectorPromptStr, 
    wxString::FromUTF8("Header files|*.h;*.hh;*.hxx;*.hpp||"), wxDefaultPosition, wxDefaultSize,
    wxFLP_SAVE|wxFLP_USE_TEXTCTRL);
    flex_grid_sizer->Add(m_fileHeader, wxSizerFlags().Expand().Border(wxALL));

    auto static_box = new wxStaticBoxSizer(wxVERTICAL, this, wxString::FromUTF8("Output Type"));
    parent_sizer->Add(static_box, wxSizerFlags().Border(wxALL));

    auto flex_grid_sizer_2 = new wxFlexGridSizer(2, 0, 0);
    static_box->Add(flex_grid_sizer_2, wxSizerFlags().Border(wxALL));

    m_radio_XPM = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("&XPM"), wxDefaultPosition, wxDefaultSize,
    wxRB_GROUP);
    m_radio_XPM->SetValue(true);
    m_radio_XPM->SetToolTip(wxString::FromUTF8("Convert the original image into an XPM file."));
    flex_grid_sizer_2->Add(m_radio_XPM, wxSizerFlags().Border(wxLEFT|wxRIGHT, wxSizerFlags::GetDefaultBorder()));

    m_radio_header = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("&Header"));
    m_radio_header->SetToolTip(wxString::FromUTF8("Convert the original into a PNG file and save it as a header file that can be #included."));
    flex_grid_sizer_2->Add(m_radio_header, wxSizerFlags().Border(wxLEFT|wxRIGHT, wxSizerFlags::GetDefaultBorder()));

    auto mask_static_box = new wxStaticBoxSizer(wxVERTICAL, static_box->GetStaticBox(), wxString::FromUTF8("Settings"));
    flex_grid_sizer_2->Add(mask_static_box, wxSizerFlags().Border(wxALL));

    auto box_sizer7 = new wxBoxSizer(wxVERTICAL);
    mask_static_box->Add(box_sizer7, wxSizerFlags().Expand().Border(wxALL));

    m_ConvertAlphaChannel = new wxCheckBox(mask_static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("&Alpha Channel to Mask"));
    m_ConvertAlphaChannel->SetValue(true);
    m_ConvertAlphaChannel->SetToolTip(wxString::FromUTF8("Check this to replace any alpha channel with a mask."));
    box_sizer7->Add(m_ConvertAlphaChannel, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_ForceMask = new wxCheckBox(mask_static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("&Force Mask"));
    m_ForceMask->SetToolTip(wxString::FromUTF8("Check this to override any mask specified in the original image file."));
    box_sizer7->Add(m_ForceMask, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_comboMask = new wxComboBox(mask_static_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize(150, -1), 0, nullptr, wxCB_READONLY);
    box_sizer7->Add(m_comboMask, wxSizerFlags().Left().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_staticRGB = new wxStaticText(mask_static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("RGB"));
    m_staticRGB->Hide();
    box_sizer7->Add(m_staticRGB, wxSizerFlags().Border(wxALL));

    auto hdr_static_box = new wxStaticBoxSizer(wxVERTICAL, static_box->GetStaticBox(), wxString::FromUTF8("Settings"));
    flex_grid_sizer_2->Add(hdr_static_box, wxSizerFlags().Border(wxALL));

    auto box_sizer_2 = new wxBoxSizer(wxVERTICAL);
    hdr_static_box->Add(box_sizer_2, wxSizerFlags().Expand().Border(wxALL));

    m_check_c17 = new wxCheckBox(hdr_static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("C++1&7 encoding"));
    m_check_c17->SetToolTip(wxString::FromUTF8("If checked, this will prefix the array with \"inline constexpr\" instead of \"static\"."));
    box_sizer_2->Add(m_check_c17, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_check_make_png = new wxCheckBox(hdr_static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("Convert to PNG"));
    m_check_make_png->SetValue(true);
    m_check_make_png->SetToolTip(wxString::FromUTF8("If checked, image will be converted to PNG before being saved."));
    box_sizer_2->Add(m_check_make_png, wxSizerFlags().Border(wxALL));

    auto box_sizer6 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer->Add(box_sizer6, wxSizerFlags().Expand().Border(wxALL));

    m_staticDimensions = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("16 x 16"));
    m_staticDimensions->Hide();
    box_sizer6->Add(m_staticDimensions, wxSizerFlags(1).Center().Border(wxALL));

    auto grid_sizer2 = new wxGridSizer(2);
    parent_sizer->Add(grid_sizer2, wxSizerFlags(1).Expand().Border(wxALL));

    m_staticOriginal = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("Original"));
    m_staticOriginal->Hide();
    grid_sizer2->Add(m_staticOriginal, wxSizerFlags().Center().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_staticOutput = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("Current"));
    m_staticOutput->Hide();
    grid_sizer2->Add(m_staticOutput, wxSizerFlags().Center().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_bmpOriginal = new wxStaticBitmap(this, wxID_ANY, wxNullBitmap);
    m_bmpOriginal->Hide();
    grid_sizer2->Add(m_bmpOriginal, wxSizerFlags().Center().DoubleBorder(wxALL));

    m_bmpOutput = new wxStaticBitmap(this, wxID_ANY, wxNullBitmap);
    m_bmpOutput->Hide();
    grid_sizer2->Add(m_bmpOutput, wxSizerFlags().Center().Border(wxALL));

    auto flex_grid_sizer2 = new wxFlexGridSizer(2, 1, 0, 0);
    parent_sizer->Add(flex_grid_sizer2, wxSizerFlags().Expand().Border(wxALL));

    m_staticSave = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("save"));
    m_staticSave->Hide();
    flex_grid_sizer2->Add(m_staticSave, wxSizerFlags().Expand().Border(wxALL));

    m_staticSize = new wxStaticText(this, wxID_ANY, wxString::FromUTF8("size"));
    m_staticSize->Hide();
    flex_grid_sizer2->Add(m_staticSize, wxSizerFlags().Expand().Border(wxALL));

    auto grid_sizer = new wxGridSizer(2);
    parent_sizer->Add(grid_sizer, wxSizerFlags().Expand().Border(wxALL));

    m_btnConvert = new wxButton(this, wxID_ANY, wxString::FromUTF8("Convert"));
    grid_sizer->Add(m_btnConvert, wxSizerFlags().Border(wxALL));

    m_btnClose = new wxButton(this, wxID_OK, wxString::FromUTF8("Close"));
    grid_sizer->Add(m_btnClose, wxSizerFlags().Right().Border(wxALL));

    SetSizerAndFit(parent_sizer);

    Centre(wxBOTH);

    // Event handlers
    m_fileOriginal->Bind(wxEVT_FILEPICKER_CHANGED, &EmbedImageBase::OnInputChange, this);
    m_fileHeader->Bind(wxEVT_FILEPICKER_CHANGED, &EmbedImageBase::OnOutputChange, this);
    m_radio_XPM->Bind(wxEVT_RADIOBUTTON, &EmbedImageBase::OnXpmOutput, this);
    m_radio_header->Bind(wxEVT_RADIOBUTTON, &EmbedImageBase::OnHeaderOutput, this);
    m_ConvertAlphaChannel->Bind(wxEVT_CHECKBOX, &EmbedImageBase::OnConvertAlpha, this);
    m_ForceMask->Bind(wxEVT_CHECKBOX, &EmbedImageBase::OnForceMask, this);
    m_comboMask->Bind(wxEVT_COMBOBOX, &EmbedImageBase::OnMask, this);
    m_check_make_png->Bind(wxEVT_CHECKBOX, &EmbedImageBase::OnCheckPngConversion, this);
    m_btnConvert->Bind(wxEVT_BUTTON, &EmbedImageBase::OnConvert, this);
}
