inline const char* interface_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<!--
	Each interface class can be added to a generator by using <inherits class="name" />. The class name
	will be used as a Category name.
	-->

	<gen class="Window Events" type="interface">
		<category name="Focus Events">
			<event name="wxEVT_KILL_FOCUS" class="wxFocusEvent" />
			<event name="wxEVT_SET_FOCUS" class="wxFocusEvent" />
		</category>
		<category name="General Events">
			<event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent" />
			<event name="wxEVT_ERASE_BACKGROUND" class="wxEraseEvent" />
			<event name="wxEVT_HELP" class="wxHelpEvent" />
			<event name="wxEVT_PAINT" class="wxPaintEvent" />
			<event name="wxEVT_SIZE" class="wxSizeEvent" />
			<event name="wxEVT_UPDATE_UI" class="wxUpdateUIEvent" />
		</category>
		<category name="Keyboard Events">
			<event name="wxEVT_CHAR" class="wxKeyEvent" />
			<event name="wxEVT_CHAR_HOOK" class="wxKeyEvent"
				help="Unlike all the other key events, this event is propagated upwards the window hierarchy which allows intercepting it in the parent window of the focused window to which it is sent initially (if there is no focused window, this event is sent to the wxApp global object). It is also generated before any other key events and so gives the parent window an opportunity to modify the keyboard handling of its children, e.g. it is used internally by wxWidgets in some ports to intercept pressing Esc key in any child of a dialog to close the dialog itself when it's pressed. By default, if this event is handled, i.e. the handler doesn't call wxEvent::Skip(), neither wxEVT_KEY_DOWN nor wxEVT_CHAR events will be generated (although wxEVT_KEY_UP still will be), i.e. it replaces the normal key events. However by calling the special DoAllowNextEvent() method you can handle wxEVT_CHAR_HOOK and still allow normal events generation. This is something that is rarely useful but can be required if you need to prevent a parent wxEVT_CHAR_HOOK handler from running without suppressing the normal key events. Finally notice that this event is not generated when the mouse is captured as it is considered that the window which has the capture should receive all the keyboard events too without allowing its parent wxTopLevelWindow to interfere with their processing." />
			<event name="wxEVT_KEY_DOWN" class="wxKeyEvent"
				help="Generated when any key has been pressed. If this event is handled and not skipped, wxEVT_CHAR will not be generated at all for this key press (but wxEVT_KEY_UP will be)." />
			<event name="wxEVT_KEY_UP" class="wxKeyEvent"
				help="Generated when any key has been released." />
		</category>
		<category name="Mouse Events">
			<event name="wxEVT_ENTER_WINDOW" class="wxMouseEvent" />
			<event name="wxEVT_LEAVE_WINDOW" class="wxMouseEvent" />
			<event name="wxEVT_LEFT_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_LEFT_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_LEFT_UP" class="wxMouseEvent" />
			<event name="wxEVT_MIDDLE_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_MIDDLE_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_MIDDLE_UP" class="wxMouseEvent" />
			<event name="wxEVT_RIGHT_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_RIGHT_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_RIGHT_UP" class="wxMouseEvent" />
			<event name="wxEVT_AUX1_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_AUX1_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_AUX1_UP" class="wxMouseEvent" />
			<event name="wxEVT_AUX2_DCLICK" class="wxMouseEvent" />
			<event name="wxEVT_AUX2_DOWN" class="wxMouseEvent" />
			<event name="wxEVT_AUX2_UP" class="wxMouseEvent" />
			<event name="wxEVT_MOTION" class="wxMouseEvent" />
			<event name="wxEVT_MOUSEWHEEL" class="wxMouseEvent" />
		</category>
	</gen>

	<gen class="wxTreeCtrlBase" type="interface">
		<event name="wxEVT_TREE_BEGIN_DRAG" class="wxTreeEvent"
			help="Generated when beginning to drag with the left mouse button." />
		<event name="wxEVT_TREE_BEGIN_RDRAG" class="wxTreeEvent"
			help="Generated when beginning to drag with the right mouse button." />
		<event name="wxEVT_TREE_END_DRAG" class="wxTreeEvent"
			help="Generated when ending dragging with the left or right mouse button." />
		<event name="wxEVT_TREE_BEGIN_LABEL_EDIT" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_END_LABEL_EDIT" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_DELETE_ITEM" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_ACTIVATED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_COLLAPSED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_COLLAPSING" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_ITEM_EXPANDED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_EXPANDING" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_ITEM_RIGHT_CLICK" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_MIDDLE_CLICK" class="wxTreeEvent" />
		<event name="wxEVT_TREE_SEL_CHANGED" class="wxTreeEvent" />
		<event name="wxEVT_TREE_SEL_CHANGING" class="wxTreeEvent"
			help="This can be prevented by calling Veto()." />
		<event name="wxEVT_TREE_KEY_DOWN" class="wxTreeEvent" />
		<event name="wxEVT_TREE_ITEM_MENU" class="wxTreeEvent"
			help="Generated when the context menu for the selected item has been requested, either by a right click or by using the menu key." />
	</gen>

	<gen class="Bitmaps" type="interface">
		<property name="bitmap" type="image"
			help="This is the bitmap shown in the default state. It will also be used for all other bitmaps if they are not explicitly set." />
		<property name="disabled_bmp" type="image"
			help="Bitmap shown when the button is disabled." />
		<property name="pressed_bmp" type="image"
			help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)." />
		<property name="focus" type="image"
			help="Bitmap shown when the button has keyboard focus but is not pressed." />
		<property name="current" type="image"
			help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for hover state as well. This makes it possible to set focus bitmap only to get reasonably good behaviour on all platforms." />
		<property name="position" type="option">
			<option name="" />
			<option name="wxLEFT"
				help="Positions the bitmap at the left" />
			<option name="wxRIGHT"
				help="Positions the bitmap at the right" />
			<option name="wxTOP"
				help="Positions the bitmap at the top" />
			<option name="wxBOTTOM"
				help="Positions the bitmap at the bottom" />
		</property>
		<property name="margins" type="wxSize"
			help="The margins between the bitmap and the text of the button. This is currently only implemented under MSW. If it is not specified, a default margin is used around the bitmap." />
	</gen>

	<!-- wxCommandLink needs a special version because position and margins are not used. -->
	<gen class="Command Bitmaps" type="interface">
		<property name="bitmap" type="image"
			help="This is the bitmap shown in the default state. It will also be used for all other bitmaps if they are not explicitly set." />
		<property name="disabled_bmp" type="image"
			help="Bitmap shown when the button is disabled." />
		<property name="pressed_bmp" type="image"
			help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)." />
		<property name="focus" type="image"
			help="Bitmap shown when the button has keyboard focus but is not pressed." />
		<property name="current" type="image"
			help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for hover state as well. This makes it possible to set focus bitmap only to get reasonably good behaviour on all platforms." />
	</gen>

	<gen class="Code Generation" type="interface">
		<property name="base_file" type="file"
			help="The filename of the base class." />
		<property name="base_src_includes" type="code_edit"
			help="This preamble is added in addition to any src_preamble specified for the entire project. It will be placed unchanged at the top of the generated base src file after any (optional) precompiled header file. It is typically used to add header files needed for lambdas used as event handlers." />
		<property name="base_hdr_includes" type="code_edit"
			help="This preamble is placed unchanged in the generated base file after all wx/ include files. It is normally used to include additional header files." />
		<property name="inserted_hdr_code" type="code_edit"
			help="Specify code to insert into the header file at the end of the public: section. You may add protected: and private: sections as needed for additional methods and member variables." />
		<property name="use_derived_class" type="bool"
			help="Check this if you will be creating a derived class. If not checked, you will need to create a source file implementing any event handlers.">1</property>
		<property name="derived_class_name" type="string"
			help="The name of the derived class. Ignored if use_derived_class is unchecked." />
		<property name="derived_file" type="file"
			help="The filename of the derived class. You can leave this empty if you have already generated the file. Ignored if use_derived_class is unchecked." />
		<property name="private_members" type="bool"
			help="Check this to make all protected: members private:. This can only be done if you are NOT creating a derived class (use_derived_class is unchecked)." />
		<property name="class_decoration" type="string"
			help="This specifies the keyword or macro to add to the class declaration (such as __declspec(dllexport) )." />
		<property name="generate_ids" type="bool"
			help="If checked, any non-wxWidgets ids will be created as an enumerated list. If you want to use your own id values, uncheck this and add the header file containing the ids to either base_src_includes or base_hdr_includes.">1</property>
	</gen>

	<gen class="CMake" type="interface">
		<property name="generate_cmake" type="bool"
			help="If checked, this will auto-generate a .cmake file whenever the Generate Base Code command is chosen.">0</property>
		<property name="cmake_file" type="file"
			help="The filename of the cmake file to create. By default, this will be created in the same directory as the project file.">wxui_code.cmake</property>
		<property name="cmake_varname" type="string"
			help="The variable name to set in the .cmake file. This will contain paths to every generated class.">wxue_generated_code</property>
	</gen>

</GeneratorDefinitions>)===";
