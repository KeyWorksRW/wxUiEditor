///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/sizer.h>

#include "../wxui/ui_images.h"

#include "xrcpreview.h"

bool XrcPreview::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    // Scaling of pos and size are handled after the dialog
    // has been created and controls added.
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
    {
        return false;
    }

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    m_collapsible_pane = new wxCollapsiblePane(this, wxID_ANY, "Information");
    m_collapsible_pane->Collapse();
    box_sizer->Add(m_collapsible_pane, wxSizerFlags().Border(wxALL));

    auto* box_sizer_4 = new wxBoxSizer(wxVERTICAL);

    auto* static_text2 = new wxStaticText(m_collapsible_pane->GetPane(), wxID_ANY,
        "Click Generate then Preview to display a form. You can edit the generated content and Preview that if needed.");
    box_sizer_4->Add(static_text2, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_staticText = new wxStaticText(m_collapsible_pane->GetPane(), wxID_ANY,
        "Preview only works with Dialogs. Be certain the dialog will be visible and has a close box in the title bar!");
    box_sizer_4->Add(m_staticText, wxSizerFlags().Border(wxLEFT|wxRIGHT, wxSizerFlags::GetDefaultBorder()));
    m_collapsible_pane->GetPane()->SetSizerAndFit(box_sizer_4);

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    auto* btn_3 = new wxButton(this, wxID_ANY, "&Generate...");
        btn_3->SetBitmap(wxue_img::bundle_generate_svg(16, 16));
    btn_3->SetToolTip("Choose a form then generate the XRC code");
    box_sizer_2->Add(btn_3, wxSizerFlags().Border(wxALL));

    m_btn_preview = new wxButton(this, wxID_ANY, "&Preview...");
        m_btn_preview->SetBitmap(wxue_img::bundle_xrc_preview_svg(16, 16));
    m_btn_preview->SetToolTip("Use wxXmlResource to load and display the contents");
    box_sizer_2->Add(m_btn_preview, wxSizerFlags().Border(wxALL));

    m_btn_import = new wxButton(this, wxID_ANY, "&Verify");
        m_btn_import->SetBitmap(wxue_img::bundle_import_svg(16, 16));
    m_btn_import->SetToolTip("Verify that the current contents can be imported");
    box_sizer_2->Add(m_btn_import, wxSizerFlags().Border(wxALL));

    m_btn__export = new wxButton(this, wxID_ANY, "&Export...");
        m_btn__export->SetBitmap(wxArtProvider::GetBitmapBundle(wxART_FILE_SAVE_AS, wxART_MENU));
    m_btn__export->SetToolTip("Load current contents into XML, then Export to a file of your choice");
    box_sizer_2->Add(m_btn__export, wxSizerFlags().Border(wxALL));

    m_btnCompare = new wxButton(this, wxID_ANY, "Co&mpare...");
    m_btnCompare->SetToolTip("Only valid if an XRC was imported. Compares original and generated.");
    box_sizer_2->Add(m_btnCompare, wxSizerFlags().Border(wxALL));

    auto* btn3 = new wxButton(this, wxID_ANY, "&Duplicate");
        btn3->SetBitmap(wxArtProvider::GetBitmapBundle(wxART_ADD_BOOKMARK, wxART_MENU));
    btn3->SetToolTip("Load current contents into XML, then Export to a file of your choice");
    box_sizer_2->Add(btn3, wxSizerFlags().Border(wxALL));

    auto* btn_2 = new wxButton(this, wxID_ANY, "&Clear");
        btn_2->SetBitmap(wxArtProvider::GetBitmapBundle(wxART_CUT, wxART_MENU));
    btn_2->SetToolTip("Remove all of the contents");
    box_sizer_2->Add(btn_2, wxSizerFlags().Border(wxALL));

    box_sizer->Add(box_sizer_2, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer2 = new wxBoxSizer(wxHORIZONTAL);

    m_contents = new wxStaticText(this, wxID_ANY, "C&ontents:");
    box_sizer2->Add(m_contents, wxSizerFlags(1).Bottom().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto* box_sizer3 = new wxBoxSizer(wxHORIZONTAL);

    m_searchCtrl = new wxSearchCtrl(this, wxID_ANY, wxEmptyString);
    m_searchCtrl->ShowSearchButton(true);
    m_searchCtrl->SetMinSize(FromDIP(wxSize(200, -1)));
    box_sizer3->Add(m_searchCtrl, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    box_sizer2->Add(box_sizer3, wxSizerFlags().Border(wxALL));

    box_sizer->Add(box_sizer2, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT, wxSizerFlags::GetDefaultBorder()));

    auto* box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);

    m_scintilla = new wxStyledTextCtrl(this);
    {
        m_scintilla->SetLexer(wxSTC_LEX_XML);
        m_scintilla->SetEOLMode(wxSTC_EOL_LF);
        // Sets text margin scaled appropriately for the current DPI on Windows,
        // 5 on wxGTK or wxOSX

        m_scintilla->SetMarginLeft(wxSizerFlags::GetDefaultBorder());
        m_scintilla->SetMarginRight(wxSizerFlags::GetDefaultBorder());
        m_scintilla->SetProperty("fold", "1");
        m_scintilla->SetMarginWidth(1, 16);
        m_scintilla->SetMarginType(1, wxSTC_MARGIN_SYMBOL);
        m_scintilla->SetMarginMask(1, wxSTC_MASK_FOLDERS);
        m_scintilla->SetMarginSensitive(1, true);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDER, wxSTC_MARK_ARROW);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN, wxSTC_MARK_ARROWDOWN);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDEREND, wxSTC_MARK_ARROW);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB, wxSTC_MARK_BACKGROUND);
        m_scintilla->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL, wxSTC_MARK_BACKGROUND);
        m_scintilla->SetTabWidth(4);
        m_scintilla->SetBackSpaceUnIndents(true);
    }
    box_sizer_3->Add(m_scintilla, wxSizerFlags(1).Expand().Border(wxALL));

    box_sizer->Add(box_sizer_3, wxSizerFlags(1).Expand().Border(wxALL));

    dlg_sizer->Add(box_sizer, wxSizerFlags(1).Expand().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxCLOSE|wxNO_DEFAULT);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetMinSize(FromDIP(wxSize(1200, 1250)));
    if (pos != wxDefaultPosition)
    {
        // Now that the dialog is created, set the scaled position
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        // If default size let the sizer set the dialog's size
        // so that it is large enough to fit it's child controls.
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            // Use the sizer to calculate the missing dimension
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    wxPersistentRegisterAndRestore(this, "XrcPreview");

    // Event handlers
    btn_2->Bind(wxEVT_BUTTON, &XrcPreview::OnClear, this);
    m_btnCompare->Bind(wxEVT_BUTTON, &XrcPreview::OnCompare, this);
    btn3->Bind(wxEVT_BUTTON, &XrcPreview::OnDuplicate, this);
    m_btn__export->Bind(wxEVT_BUTTON, &XrcPreview::OnExport, this);
    btn_3->Bind(wxEVT_BUTTON, &XrcPreview::OnGenerate, this);
    m_btn_preview->Bind(wxEVT_BUTTON, &XrcPreview::OnPreview, this);
    m_btn_import->Bind(wxEVT_BUTTON, &XrcPreview::OnVerify, this);
    Bind(wxEVT_INIT_DIALOG, &XrcPreview::OnInit, this);
    m_searchCtrl->Bind(wxEVT_SEARCHCTRL_SEARCH_BTN, &XrcPreview::OnSearch, this);

// Unimplemented Event handler functions
// Copy any of the following and paste them below the comment block, or to your inherited class.

/*
void XrcPreview::OnClear(
{
    event.Skip();
}
void XrcPreview::OnCompare(
{
    event.Skip();
}
void XrcPreview::OnDuplicate(
{
    event.Skip();
}
void XrcPreview::OnExport(
{
    event.Skip();
}
void XrcPreview::OnGenerate(
{
    event.Skip();
}
void XrcPreview::OnInit(
{
    event.Skip();
}
void XrcPreview::OnPreview(
{
    event.Skip();
}
void XrcPreview::OnSearch(
{
    event.Skip();
}
void XrcPreview::OnVerify(
{
    event.Skip();
}

*/

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

// Handler code is in xrcpreview_handlers.cpp
