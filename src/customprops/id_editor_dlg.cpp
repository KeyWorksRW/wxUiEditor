///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/gbsizer.h>

#include "id_editor_dlg.h"

bool IDEditorDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_radioBtn_Standard = new wxRadioButton(this, wxID_ANY, "&wxWidgets Standard ID", wxDefaultPosition, wxDefaultSize,
        wxRB_SINGLE);
    m_std_id_box = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_radioBtn_Standard), wxVERTICAL);

    m_standard_ids = new wxChoice(m_std_id_box->GetStaticBox(), wxID_ANY);
    m_std_id_box->Add(m_standard_ids, wxSizerFlags().Expand().Border(wxALL));

    m_flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);

    auto* staticText = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "Label:");
    m_flex_grid_sizer->Add(staticText, wxSizerFlags().Border(wxALL));

    m_stock_label = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "stock label");
    m_flex_grid_sizer->Add(m_stock_label, wxSizerFlags().Expand().Border(wxALL));

    auto* staticText_2 = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "Help:");
    m_flex_grid_sizer->Add(staticText_2, wxSizerFlags().Border(wxALL));

    m_help_text = new wxStaticText(m_std_id_box->GetStaticBox(), wxID_ANY, "help text");
    m_flex_grid_sizer->Add(m_help_text, wxSizerFlags().Border(wxALL));
    m_flex_grid_sizer->ShowItems(false);
    m_std_id_box->Add(m_flex_grid_sizer, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(m_std_id_box, wxSizerFlags().Expand().Border(wxALL));

    m_radioBtn_Custom = new wxRadioButton(this, wxID_ANY, "&Custom ID", wxDefaultPosition, wxDefaultSize, wxRB_SINGLE);
    m_cstm_id_box = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_radioBtn_Custom), wxVERTICAL);

    auto* box_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_5 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "&ID:");
    box_sizer->Add(staticText_5, wxSizerFlags().Center().Border(wxALL));

    m_textID = new wxTextCtrl(m_cstm_id_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxTE_PROCESS_ENTER);
    m_textID->SetHint("MYID");
    box_sizer->Add(m_textID, wxSizerFlags(1).Expand().Border(wxALL));

    auto* staticText_4 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "&Value:");
    box_sizer->Add(staticText_4, wxSizerFlags().Center().Border(wxALL));

    m_textValue = new wxTextCtrl(m_cstm_id_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxTE_PROCESS_ENTER);
    m_textValue->SetHint("wxID_HIGHEST + 1");
    box_sizer->Add(m_textValue, wxSizerFlags(1).Border(wxALL));

    m_cstm_id_box->Add(box_sizer, wxSizerFlags().Expand().Border(wxALL));

    auto* grid_bag_sizer = new wxGridBagSizer();

    m_checkAddPrefix = new wxCheckBox(m_cstm_id_box->GetStaticBox(), wxID_ANY, "Add &prefix");
    grid_bag_sizer->Add(m_checkAddPrefix, wxGBPosition(0, 0), wxGBSpan(1, 2), wxALL, 5);

    m_checkAddSuffix = new wxCheckBox(m_cstm_id_box->GetStaticBox(), wxID_ANY, "Add &suffix");
    grid_bag_sizer->Add(m_checkAddSuffix, wxGBPosition(0, 2), wxGBSpan(1, 2), wxALL, 5);

    auto* staticText_8 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "Pr&efix:");
    staticText_8->SetToolTip("The prefix list is edited in the Project\'s id_prefixes property.");
    grid_bag_sizer->Add(staticText_8, wxGBPosition(1, 0), wxGBSpan(1, 1), wxALL, 5);

    m_comboPrefixes = new wxComboBox(m_cstm_id_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        0, nullptr, wxCB_READONLY|wxCB_SORT);
    m_comboPrefixes->Enable(false);
    m_comboPrefixes->SetMinSize(FromDIP(wxSize(150, -1)));
    m_comboPrefixes->SetToolTip("The prefix list is edited in the Project\'s id_prefixes property.");
    grid_bag_sizer->Add(m_comboPrefixes, wxGBPosition(1, 1), wxGBSpan(1, 1), wxALL, 5);

    auto* staticText_9 = new wxStaticText(m_cstm_id_box->GetStaticBox(), wxID_ANY, "S&uffix:");
    staticText_9->SetToolTip("The suffix list is edited in the Project\'s id_suffixes property.");
    grid_bag_sizer->Add(staticText_9, wxGBPosition(1, 2), wxGBSpan(1, 1), wxALL, 5);

    m_comboSuffix = new wxComboBox(m_cstm_id_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
        0, nullptr, wxCB_READONLY|wxCB_SORT);
    m_comboSuffix->Enable(false);
    m_comboSuffix->SetMinSize(FromDIP(wxSize(150, -1)));
    m_comboSuffix->SetToolTip("The suffix list is edited in the Project\'s id_suffixes property.");
    grid_bag_sizer->Add(m_comboSuffix, wxGBPosition(1, 3), wxGBSpan(1, 1), wxALL, 5);

    m_cstm_id_box->Add(grid_bag_sizer, wxSizerFlags().Expand().Border(wxALL));

    dlg_sizer->Add(m_cstm_id_box, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_6 = new wxStaticText(this, wxID_ANY, "New ID:");
    box_sizer_3->Add(staticText_6, wxSizerFlags().Border(wxALL));

    m_final_id = new wxStaticText(this, wxID_ANY, "...");
    box_sizer_3->Add(m_final_id, wxSizerFlags(1).Border(wxALL));

    dlg_sizer->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_UPDATE_UI, &IDEditorDlg::OnAffirmative, this, wxID_OK);
    m_checkAddPrefix->Bind(wxEVT_CHECKBOX,
        [this](wxCommandEvent& event)
        {
            m_comboPrefixes->Enable(m_checkAddPrefix->GetValue());
            OnComboSelect(event);
        });
    m_checkAddSuffix->Bind(wxEVT_CHECKBOX,
        [this](wxCommandEvent& event)
        {
            m_comboSuffix->Enable(m_checkAddSuffix->GetValue());
            OnComboSelect(event);
        });
    m_standard_ids->Bind(wxEVT_CHOICE, &IDEditorDlg::OnStdChange, this);
    m_comboPrefixes->Bind(wxEVT_COMBOBOX, &IDEditorDlg::OnComboSelect, this);
    m_comboSuffix->Bind(wxEVT_COMBOBOX, &IDEditorDlg::OnComboSelect, this);
    Bind(wxEVT_INIT_DIALOG, &IDEditorDlg::OnInit, this);
    m_radioBtn_Custom->Bind(wxEVT_RADIOBUTTON, &IDEditorDlg::OnCustomID, this);
    m_radioBtn_Standard->Bind(wxEVT_RADIOBUTTON, &IDEditorDlg::OnStandardID, this);
    m_textID->Bind(wxEVT_TEXT,
        [this](wxCommandEvent& event)
        {
            OnComboSelect(event);
        });
    m_textValue->Bind(wxEVT_TEXT,
        [this](wxCommandEvent& event)
        {
            OnComboSelect(event);
        });
    m_textValue->Bind(wxEVT_TEXT_ENTER,
        [this](wxCommandEvent& event)
        {
            OnComboSelect(event);
        });
    m_textID->Bind(wxEVT_TEXT_ENTER,
        [this](wxCommandEvent& event)
        {
            OnComboSelect(event);
        });

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Dialog for editing a ID name and optional value
// Author:    Ralph Walden
// Copyright: Copyright (c) 2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include <array>

#include <wx/stockitem.h>  // stock items helpers

#include "id_lists.h"

#include "node.h"             // Node class
#include "node_creator.h"     // NodeCreator -- Class used to create nodes
#include "project_handler.h"  // ProjectHandler class

void IDEditorDlg::OnInit(wxInitDialogEvent& event)
{
    m_standard_ids->Append(list_wx_ids);

    ASSERT_MSG(m_node, "You must call SetNode() before calling OnInit()")

    auto prefixes = Project.getProjectNode()->as_ArrayString(prop_id_prefixes);
    auto suffixes = Project.getProjectNode()->as_ArrayString(prop_id_suffixes);

    if (prefixes.size())
    {
        for (auto& iter: prefixes)
        {
            m_comboPrefixes->Append(iter);
        }
        m_comboPrefixes->SetSelection(0);
    }
    if (suffixes.size())
    {
        for (auto& iter: suffixes)
        {
            m_comboSuffix->Append(iter);
        }
        m_comboSuffix->SetSelection(0);
    }

    if (prefixes.size() || suffixes.size())
    {
        SelectPrefixSuffix(m_node->getForm());
    }

    // Dummy event so that we can call event handlers (which don't actually use the event)
    wxCommandEvent dummy_event;

    // Make a copy of the id, because if it's a custom id, then we need to remove the prefix,
    // suffix and value.
    tt_string cur_id = m_node->as_string(prop_id);
    if (cur_id.starts_with("wxID_"))
    {
        m_standard_ids->SetStringSelection(cur_id);
        OnStandardID(dummy_event);
    }
    else
    {
        if (auto pos = cur_id.find_first_of('='); pos != tt::npos)
        {
            tt_string_view value = tt::find_nonspace(cur_id.substr(pos + 1));
            m_textValue->SetValue(value.make_wxString());
            cur_id.erase(pos);
            cur_id.trim();
        }

        for (auto& iter: prefixes)
        {
            if (cur_id.starts_with(iter))
            {
                m_comboPrefixes->SetStringSelection(iter);
                cur_id.erase(0, iter.size());
                m_checkAddPrefix->SetValue(true);
                break;
            }
        }
        for (auto& iter: suffixes)
        {
            if (cur_id.ends_with(iter))
            {
                m_comboSuffix->SetStringSelection(iter);
                cur_id.erase(cur_id.size() - iter.size());
                m_checkAddSuffix->SetValue(true);
                break;
            }
        }

        m_textID->SetValue(cur_id);

        OnCustomID(dummy_event);
    }

    event.Skip();  // transfer all validator data to their windows and update UI
}

void IDEditorDlg::OnStdChange(wxCommandEvent& WXUNUSED(event))
{
    m_result = m_standard_ids->GetStringSelection();
    m_final_id->SetLabel(m_result);

    for (auto& iter: list_stock_ids)
    {
        if (iter == m_result)
        {
            if (auto stock_id = NodeCreation.getConstantAsInt(iter); stock_id > 0)
            {
                m_flex_grid_sizer->ShowItems(true);
                m_stock_label->SetLabel(wxGetStockLabel(stock_id));
                m_help_text->SetLabel(wxGetStockHelpString(stock_id));
                Fit();
                return;
            }
        }
    }
    m_flex_grid_sizer->ShowItems(false);
    Fit();
}

void IDEditorDlg::OnStandardID(wxCommandEvent& event)
{
    m_radioBtn_Custom->SetValue(false);
    m_cstm_id_box->GetStaticBox()->Enable(false);

    m_std_id_box->GetStaticBox()->Enable(true);
    m_radioBtn_Standard->SetValue(true);

    OnComboSelect(event);
}

void IDEditorDlg::OnCustomID(wxCommandEvent& event)
{
    m_radioBtn_Custom->SetValue(true);
    m_cstm_id_box->GetStaticBox()->Enable(true);

    m_std_id_box->GetStaticBox()->Enable(false);
    m_radioBtn_Standard->SetValue(false);

    m_comboPrefixes->Enable(m_checkAddPrefix->GetValue());
    m_comboSuffix->Enable(m_checkAddSuffix->GetValue());

    OnComboSelect(event);
}

void IDEditorDlg::OnComboSelect(wxCommandEvent& WXUNUSED(event))
{
    wxString complete_id;
    if (m_radioBtn_Custom->GetValue())
    {
        if (m_checkAddPrefix->GetValue())
        {
            complete_id << m_comboPrefixes->GetStringSelection();
        }

        complete_id << m_textID->GetValue();

        if (m_checkAddSuffix->GetValue())
        {
            complete_id << m_comboSuffix->GetStringSelection();
        }

        if (m_textValue->GetValue().size())
        {
            complete_id << " = " << m_textValue->GetValue();
        }
    }
    else
    {
        complete_id = m_standard_ids->GetStringSelection();
    }

    m_final_id->SetLabel(complete_id);
}

void IDEditorDlg::OnAffirmative(wxUpdateUIEvent& event)
{
    m_result.clear();
    if (m_radioBtn_Standard->GetValue())
    {
        m_result = m_standard_ids->GetStringSelection();
    }
    else
    {
        if (m_checkAddPrefix->GetValue())
        {
            m_result << m_comboPrefixes->GetStringSelection();
        }

        m_result << m_textID->GetValue();

        if (m_checkAddSuffix->GetValue())
        {
            m_result << m_comboSuffix->GetStringSelection();
        }

        if (m_textValue->GetValue().size())
        {
            m_result << " = " << m_textValue->GetValue();
        }
    }

    event.Skip();
}

bool IDEditorDlg::SelectPrefixSuffix(Node* node)
{
    if (node->hasProp(prop_id))
    {
        auto& id = node->as_string(prop_id);
        if (!id.starts_with("wxID_"))
        {
            if (!m_prefix_selected)
            {
                tt_string_vector prefixes;
                prefixes.SetString(Project.getProjectNode()->as_string(prop_id_prefixes), '"', tt::TRIM::both);
                for (auto& iter: prefixes)
                {
                    if (id.starts_with(iter))
                    {
                        m_comboPrefixes->SetStringSelection(iter);
                        m_prefix_selected = true;
                        break;
                    }
                }
            }
            if (!m_suffix_selected)
            {
                tt_string_vector suffixes;
                suffixes.SetString(Project.getProjectNode()->as_string(prop_id_prefixes), '"', tt::TRIM::both);
                for (auto& iter: suffixes)
                {
                    if (id.ends_with(iter))
                    {
                        m_comboSuffix->SetStringSelection(iter);
                        m_suffix_selected = true;
                        break;
                    }
                }
            }

            if (m_prefix_selected && m_suffix_selected)
            {
                return true;
            }
        }
    }

    for (auto& iter: node->getChildNodePtrs())
    {
        if (SelectPrefixSuffix(iter.get()))
        {
            return true;
        }
    }

    return false;
}
