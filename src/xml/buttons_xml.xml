inline const char* buttons_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="wxCheckBox" image="wxCheckBox" type="widget">
		<inherits class="Boolean Validator" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_checkBox</property>
		<property name="label" type="string_escapes">My Checkbox</property>
		<property name="checked" type="bool">0</property>
		<property name="style" type="bitlist">
			<option name="wxALIGN_RIGHT"
				help="Aligns the checkbox to the right of the text instead of the left." />
		</property>
		<event name="wxEVT_CHECKBOX" class="wxCommandEvent"
			help="Generated when the checkbox is clicked." />
	</gen>

	<gen class="Check3State" image="check3state" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_checkBox</property>
		<property name="label" type="string_escapes">My Checkbox</property>
		<property name="initial_state" type="option">
			<option name="wxCHK_UNCHECKED"
				help="The checkbox is unchecked." />
			<option name="wxCHK_CHECKED"
				help="The checkbox is checked." />
			<option name="wxCHK_UNDETERMINED"
				help="The checkbox is undetermined." />
			wxCHK_UNCHECKED
		</property>
		<property name="style" type="bitlist">
			<!-- wxALIGN_RIGHT needs to be first for code generation to work properly -->
			<option name="wxALIGN_RIGHT"
				help="Aligns the checkbox to the right of the text instead of the left." />
			<option name="wxCHK_ALLOW_3RD_STATE_FOR_USER"
				help="If selected, the user can set the checkbox to the third state by clicking." />
		</property>
		<event name="wxEVT_CHECKBOX" class="wxCommandEvent"
			help="Generated when the checkbox is clicked." />
	</gen>

	<gen class="wxRadioButton" image="wxRadioButton" type="widget">
		<inherits class="Boolean Validator" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_radioBtn</property>
		<property name="label" type="string_escapes">My RadioBtn</property>
		<property name="checked" type="bool">0</property>
		<property name="style" type="bitlist">
			<option name="wxRB_GROUP"
				help="Marks the beginning of a new group of radio buttons." />
			<option name="wxRB_SINGLE"
				help="Creates a radio button which is not part of any radio button group. When this style is used, no other radio buttons will be turned off automatically when this button is checked." />
			<option name="wxALIGN_RIGHT"
				help="Aligns the radio button to the right of the text instead of the left." />
		</property>
		<event name="wxEVT_RADIOBUTTON" class="wxCommandEvent"
			help="Generated when the radio button is clicked." />
	</gen>

	<gen class="wxButton" image="wxButton" type="widget">
		<inherits class="Bitmaps" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="String Validator" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_btn</property>
		<property name="label" type="string_escapes"
			help="Leave this property blank if you are using a stock id. A stock id will automatically display a label matching the id.">MyButton</property>
		<property name="markup" type="bool"
			help="This can be used to apply fonts or colours to different parts of the label.">0</property>
		<property name="default" type="bool"
			help="Set the button to be the default item in its top-level window">0</property>
		<property name="auth_needed" type="bool"
			help="Sets whether an authentication needed symbol should be displayed on the button. This method doesn't do anything if the platform is not Windows Vista or newer.">0</property>
		<property name="style" type="bitlist">
			<option name="wxBU_BOTTOM"
				help="Aligns the label to the bottom of the button. Windows and GTK+ only." />
			<option name="wxBU_LEFT"
				help="Left-justifies the label. Windows and GTK+ only." />
			<option name="wxBU_RIGHT"
				help="Right-justifies the bitmap label. Windows and GTK+ only." />
			<option name="wxBU_TOP"
				help="Aligns the label to the top of the button. Windows and GTK+ only." />
			<option name="wxBU_EXACTFIT"
				help="By default, all buttons are made of at least the standard button size, even if their contents is small enough to fit into a smaller size. This is done for consistency as most platforms use buttons of the same size in the native dialogs, but can be overridden by specifying this flag. If it is given, the button will be made just big enough for its contents. Notice that under MSW the button will still have at least the standard height, even with this style, if it has a non-empty label." />
			<option name="wxBU_NOTEXT"
				help="Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too." />
			<option name="wxBORDER_NONE"
				help="Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa and OSX/Carbon ports. In OSX/Carbon this only applies to buttons with bitmaps and using bitmap of one of the standard sizes only, namely 128*128, 48*48, 24*24 or 16*16. In all the other cases wxBORDER_NONE is ignored under OSX/Carbon (these restrictions don't exist in OSX/Cocoa however)." />
		</property>
		<event name="wxEVT_BUTTON" class="wxCommandEvent"
			help="Generated when the button is clicked" />
	</gen>

	<gen class="CloseButton" image="close_btn" type="widget">
		<inherits class="wxWindow">
			<!-- <hide name="smart_size" /> -->
			<hide name="variant" />
			<hide name="foreground_colour" />
			<hide name="background_colour" />
			<hide name="font" />
			<hide name="window_name" />
		</inherits>
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">close_btn</property>
		<event name="wxEVT_BUTTON" class="wxCommandEvent"
			help="Generated when the button is clicked" />
	</gen>

	<gen class="wxCommandLinkButton" image="wxCommandLinkButton" type="widget">
		<inherits class="Command Bitmaps" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_btn</property>
		<property name="main_label" type="string_edit"
			help="First line of text on the button, typically the label of an action that will be made when the button is pressed.">MyButton</property>
		<property name="note" type="string_edit_escapes"
			help="Second line of text describing the action performed when the button is pressed.">my note</property>
		<property name="default" type="bool"
			help="If true, this will be the default button (it will be depressed when the return key is pressed)">0</property>
		<property name="auth_needed" type="bool"
			help="Sets whether an authentication needed symbol should be displayed on the button. This method doesn't do anything if the platform is not Windows Vista or newer.">0</property>
		<event name="wxEVT_BUTTON" class="wxCommandEvent"
			help="Generated when the button is clicked" />
	</gen>

	<gen class="wxSpinCtrl" image="spin_ctrl" type="widget">
		<inherits class="Integer Validator" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_spinCtrl</property>
		<property name="min" type="int"
			help="Minimal value.">0</property>
		<property name="max" type="int"
			help="Maximal value.">10</property>
		<property name="initial" type="int"
			help="Initial value.">0</property>
		<property name="inc" type="int"
			help="Increment value.">1</property>
		<property name="style" type="bitlist">
			<option name="wxSP_ARROW_KEYS"
				help="The user can use arrow keys to change the value." />
			<option name="wxSP_WRAP"
				help="The value wraps at the minimum and maximum." />
			<option name="wxTE_PROCESS_ENTER"
				help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)." />
			<option name="wxALIGN_LEFT"
				help="Same as wxTE_LEFT for wxTextCtrl: the text is left aligned." />
			<option name="wxALIGN_CENTER_HORIZONTAL"
				help="Same as wxTE_CENTER for wxTextCtrl: the text is centered." />
			<option name="wxALIGN_RIGHT"
				help="Same as wxTE_RIGHT for wxTextCtrl: the text is right aligned (this is the default)." />
			wxSP_ARROW_KEYS
		</property>
		<property name="hexadecimal" type="bool"
			help="Use hexadecimal as the base to display and enter numbers.">0</property>
		<event name="wxEVT_SPINCTRL" class="wxSpinEvent"
			help="Generated whenever the numeric value of the spinctrl is updated." />
		<event name="wxEVT_TEXT" class="wxCommandEvent"
			help="Generated whenever the user modifies the text in the edit part of the spin control directly." />
		<event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
			help="Generated when enter is pressed in the edit part of the spin control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
	</gen>

	<gen class="wxSpinCtrlDouble" image="spin_ctrl_double" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_spinCtrlDouble</property>
		<property name="value" type="string_escapes" />
		<property name="min" type="float"
			help="Minimal value.">0</property>
		<property name="max" type="float"
			help="Maximal value.">100</property>
		<property name="initial" type="float"
			help="Initial value.">0</property>
		<property name="inc" type="float"
			help="Increment value.">1</property>
		<property name="digits" type="uint"
			help="The number of digits in the display.">0</property>
		<property name="style" type="bitlist">
			<option name="wxSP_ARROW_KEYS"
				help="The user can use arrow keys to change the value." />
			<option name="wxSP_WRAP"
				help="The value wraps at the minimum and maximum." />
			<option name="wxTE_PROCESS_ENTER"
				help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)." />
			<option name="wxALIGN_LEFT"
				help="Same as wxTE_LEFT for wxTextCtrl: the text is left aligned." />
			<option name="wxALIGN_CENTER_HORIZONTAL"
				help="Same as wxTE_CENTER for wxTextCtrl: the text is centered." />
			<option name="wxALIGN_RIGHT"
				help="Same as wxTE_RIGHT for wxTextCtrl: the text is right aligned (this is the default)." />
			wxSP_ARROW_KEYS
		</property>
		<event name="wxEVT_SPINCTRLDOUBLE" class="wxSpinDoubleEvent"
			help="Generated whenever the numeric value of the control is updated." />
		<event name="wxEVT_TEXT" class="wxCommandEvent"
			help="Generated whenever the user modifies the text in the edit part of the spin control directly." />
		<event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
			help="Generated when enter is pressed in the edit part of the spin control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
	</gen>

	<gen class="wxSpinButton" image="spinbtn" type="widget">
		<inherits class="Integer Validator" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_spinBtn</property>
		<property name="min" type="int"
			help="Minimal value.">0</property>
		<property name="max" type="int"
			help="Maximal value.">10</property>
		<property name="initial" type="int"
			help="Initial value.">0</property>
		<property name="inc" type="int"
			help="Increment value.">1</property>
		<property name="style" type="bitlist">
			<option name="wxSP_HORIZONTAL"
				help="Specifies a horizontal spin button (note that this style is not supported in wxGTK)." />
			<option name="wxSP_VERTICAL"
				help="Specifies a vertical spin button." />
			<option name="wxSP_ARROW_KEYS"
				help="The user can use arrow keys to change the value." />
			<option name="wxSP_WRAP"
				help="The value wraps at the minimum and maximum." />
		</property>
		<event name="wxEVT_SPIN" class="wxSpinEvent"
			help="Generated whenever an arrow is pressed." />
		<event name="wxEVT_SPIN_UP" class="wxSpinEvent"
			help="Generated when left/up arrow is pressed." />
		<event name="wxEVT_SPIN_DOWN" class="wxSpinEvent"
			help="Generated when right/down arrow is pressed." />
	</gen>

	<gen class="wxToggleButton" image="toggle_button" type="widget">
		<inherits class="Bitmaps" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="Boolean Validator" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_toggleBtn</property>
		<property name="label" type="string_escapes">MyButton</property>
		<property name="markup" type="bool"
			help="This can be used to apply fonts or colours to different parts of the label.">0</property>
		<property name="pressed" type="bool">0</property>
		<property name="style" type="bitlist">
			<option name="wxBU_LEFT"
				help="Left-justifies the label. Windows and GTK+ only." />
			<option name="wxBU_TOP"
				help="Aligns the label to the top of the button. Windows and GTK+ only." />
			<option name="wxBU_RIGHT"
				help="Right-justifies the bitmap label. Windows and GTK+ only." />
			<option name="wxBU_BOTTOM"
				help="Aligns the label to the bottom of the button. Windows and GTK+ only." />
			<option name="wxBU_EXACTFIT"
				help="By default, all buttons are made of at least the standard button size, even if their contents is small enough to fit into a smaller size. This is done for consistency as most platforms use buttons of the same size in the native dialogs, but can be overridden by specifying this flag. If it is given, the button will be made just big enough for its contents. Notice that under MSW the button will still have at least the standard height, even with this style, if it has a non-empty label." />
			<option name="wxBU_NOTEXT"
				help="Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too." />
			<option name="wxBORDER_NONE"
				help="Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa and OSX/Carbon ports but in the latter only applies to buttons with bitmaps and using bitmap of one of the standard sizes only, namely 128*128, 48*48, 24*24 or 16*16. In all the other cases wxBORDER_NONE is ignored under OSX/Carbon (these restrictions don't exist in OSX/Cocoa however)." />
		</property>
		<event name="wxEVT_TOGGLEBUTTON" class="wxCommandEvent"
			help="" />
	</gen>
</GeneratorDefinitions>)===";
