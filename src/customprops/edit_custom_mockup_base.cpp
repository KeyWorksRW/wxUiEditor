///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/choice.h>
#include <wx/sizer.h>
#include <wx/textctrl.h>
#include <wx/valgen.h>
#include <wx/valnum.h>
#include <wx/valtext.h>

#include "edit_custom_mockup_base.h"

bool EditCustomMockupBase::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto* static_text3 = new wxStaticText(this, wxID_ANY, "Mockup widget");
    dlg_sizer->Add(static_text3, wxSizerFlags().Border(wxALL));

    auto* widget_type = new wxChoice(this, wxID_ANY);
    widget_type->Append("wxBitmap");
    m_widget_type = "wxBitmap";  // set validator variable
    widget_type->SetValidator(wxGenericValidator(&m_widget_type));
    dlg_sizer->Add(widget_type, wxSizerFlags().Expand().Border(wxALL));

    auto* flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);

    m_static_text = new wxStaticText(this, wxID_ANY, "width:");
    flex_grid_sizer->Add(m_static_text, wxSizerFlags().CenterVertical().Border(wxALL));

    auto* width = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    width->SetValidator(wxIntegerValidator<int>(&m_width, -1, 9999));
    flex_grid_sizer->Add(width, wxSizerFlags().Border(wxALL));

    m_static_text2 = new wxStaticText(this, wxID_ANY, "height:");
    flex_grid_sizer->Add(m_static_text2, wxSizerFlags().CenterVertical().Border(wxALL));

    auto* text_ctrl2 = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    text_ctrl2->SetValidator(wxTextValidator(wxFILTER_NONE|wxFILTER_NUMERIC, &m_height));
    flex_grid_sizer->Add(text_ctrl2, wxSizerFlags().Border(wxALL));

    dlg_sizer->Add(flex_grid_sizer, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_BUTTON, &EditCustomMockupBase::OnOK, this, wxID_OK);
    Bind(wxEVT_INIT_DIALOG, &EditCustomMockupBase::OnInit, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

void EditCustomMockupBase::OnInit(wxInitDialogEvent& event)
{
    tt_string_vector parts(m_result.ToStdString(), ';');
    if (parts.size() == 3)
    {
        m_widget_type = parts[0];
        m_width = parts[1].atoi();
        m_height = parts[2];
    }

    event.Skip();
}

void EditCustomMockupBase::OnOK(wxCommandEvent& event)
{
    if (!Validate() || !TransferDataFromWindow())
        return;

    m_result.clear();
    m_result << m_widget_type << ";" << m_width << ";" << m_height;
    event.Skip();
}
