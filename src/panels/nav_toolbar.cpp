///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/bitmap.h>
#include <wx/icon.h>
#include <wx/image.h>

#include "../wxui/ui_images.h"

#include "nav_toolbar.h"

#include "mainframe.h"
#include "project_handler.h"

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

// Convert compressed SVG string into a wxBitmapBundle
#ifdef __cpp_inline_variables
inline wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
#else
static wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
#endif
{
    auto str = std::make_unique<char[]>(size_svg);
    wxMemoryInputStream stream_in(data, size_data);
    wxZlibInputStream zlib_strm(stream_in);
    zlib_strm.Read(str.get(), size_svg);
    return wxBitmapBundle::FromSVG(str.get(), def_size);
};

namespace wxue_img
{
    extern const unsigned char nav_coll_expand_svg[291];  // ../art_src/nav_coll_expand.svg
    extern const unsigned char nav_collapse_svg[214];  // ../art_src/nav_collapse.svg
    extern const unsigned char nav_expand_svg[270];  // ../art_src/nav_expand.svg
}

NavToolbar::NavToolbar(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style,
    const wxString& name) : wxToolBar(parent, id, pos, size, style, name)
{

    AddStretchableSpace();

    AddTool(id_NavCollExpand, wxEmptyString,
        wxueBundleSVG(wxue_img::nav_coll_expand_svg, 291, 562, FromDIP(wxSize(16, 16))), wxNullBitmap, wxITEM_NORMAL,
        "Collapse siblings, expand children", "Expand selected item, collapse all other items at the same level");

    AddTool(id_NavExpand, wxEmptyString,
        wxueBundleSVG(wxue_img::nav_expand_svg, 270, 494, FromDIP(wxSize(16, 16))), wxNullBitmap, wxITEM_NORMAL,
        "Expand all children", "Expand selected item and all of it\'s sub-items");

    AddTool(id_NavCollapse, wxEmptyString,
        wxueBundleSVG(wxue_img::nav_collapse_svg, 214, 340, FromDIP(wxSize(16, 16))), wxNullBitmap, wxITEM_NORMAL,
        "Collapse all siblings", "Collapse selected item and all items at the same level");

    AddSeparator();
    AddTool(id_NavMoveLeft, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_BACK, wxART_MENU), wxNullBitmap,
        wxITEM_NORMAL, "Move Left", "Move the selected item left");

    AddTool(id_NavMoveUp, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_UP, wxART_MENU), wxNullBitmap, wxITEM_NORMAL,
        "Move Up", "Move the selected item up");

    AddTool(id_NavMoveDown, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_DOWN, wxART_MENU), wxNullBitmap,
        wxITEM_NORMAL, "Move Down", "Move the selected item down");

    AddTool(id_NavMoveRight, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_FORWARD, wxART_OTHER), wxNullBitmap,
        wxITEM_NORMAL, "Move Right", "Move the selected item right");

    AddStretchableSpace();

    Realize();
}

namespace wxue_img
{
    // ../art_src/nav_coll_expand.svg
    const unsigned char nav_coll_expand_svg[291] {
        120,218,93,146,221,114,194,32,16,133,251,40,204,94,181,51,74,128,24,163,137,241,9,226,11,120,215,154,53,161,69,
        200,16,52,218,167,47,226,79,77,110,96,191,51,135,221,157,93,86,221,169,38,189,172,92,83,64,204,218,51,144,6,101,
        221,184,7,157,208,118,210,232,2,56,229,64,206,7,165,187,172,67,43,247,5,52,206,181,89,20,245,125,79,131,66,119,
        230,16,1,233,220,69,97,1,123,169,212,212,30,21,102,120,66,109,170,42,223,41,217,14,149,206,89,243,131,83,37,53,
        126,27,169,51,107,142,250,169,30,164,67,171,164,191,50,145,195,122,213,126,186,134,200,170,128,107,192,147,24,136,
        143,55,60,166,124,33,38,34,161,75,182,44,31,196,232,44,73,202,148,166,34,29,2,159,211,5,95,60,124,35,226,52,158,
        199,229,77,28,211,205,41,4,21,105,60,162,123,129,187,115,68,195,190,2,109,55,183,119,215,142,124,146,16,207,40,
        91,242,82,4,105,8,175,174,16,111,7,35,206,108,253,245,206,38,220,59,217,71,254,63,116,109,244,47,90,147,67,180,
        94,89,220,185,48,57,115,244,35,245,91,44,128,1,185,132,243,185,250,215,197,15,43,248,84,24,242,68,254,175,172,223,
        254,0,107,226,156,37
    };
    // ../art_src/nav_collapse.svg
    const unsigned char nav_collapse_svg[214] {
        120,218,85,144,219,110,132,32,16,134,251,40,100,174,218,100,23,145,166,134,69,241,97,170,179,58,45,130,1,60,236,
        219,215,216,216,173,87,147,249,47,190,255,80,197,185,99,11,181,169,55,240,46,198,21,88,143,212,245,233,248,102,
        12,145,188,51,144,243,28,216,58,88,23,117,196,64,119,3,125,74,163,206,178,101,89,248,174,240,198,15,25,176,152,
        30,22,13,220,201,218,107,152,44,106,156,209,249,182,45,27,75,227,89,137,41,248,111,188,90,114,248,229,201,233,224,
        39,247,167,14,148,48,88,218,142,150,37,212,85,87,87,1,155,196,86,3,130,223,138,27,176,199,150,42,231,234,163,128,
        163,129,84,92,20,242,217,161,224,82,169,83,36,29,186,207,87,113,201,165,186,136,183,18,178,186,202,14,48,181,6,
        252,180,153,194,238,177,243,5,60,199,249,63,205,153,233,188,195,95,214,182,102,253,242,3,107,152,108,143
    };
    // ../art_src/nav_expand.svg
    const unsigned char nav_expand_svg[270] {
        120,218,93,145,91,110,195,32,16,69,187,20,52,95,173,148,96,131,147,250,237,21,164,27,232,95,107,79,108,90,2,22,
        224,56,233,234,139,156,71,75,126,128,51,26,221,25,238,173,236,177,39,179,232,220,80,67,18,143,39,32,3,138,126,112,
        55,58,162,177,66,171,26,24,101,64,78,7,169,108,97,209,136,125,13,131,115,99,17,69,243,60,211,165,66,91,125,136,
        128,88,119,150,88,195,94,72,185,54,147,196,2,143,168,116,215,149,173,20,99,88,177,206,232,111,92,75,161,240,75,
        11,85,24,61,169,123,245,32,28,26,41,252,85,240,18,154,106,252,112,3,17,93,13,163,156,44,16,255,120,99,140,102,121,
        178,226,41,205,183,219,221,149,88,70,121,146,239,56,221,166,236,1,24,77,95,217,189,47,32,78,227,141,151,200,40,
        139,211,16,174,125,126,200,134,231,143,116,145,191,117,6,20,110,117,161,247,192,158,194,244,159,207,241,138,241,
        108,21,191,148,127,134,41,173,126,208,232,18,162,166,50,216,186,229,215,122,242,118,248,4,106,136,129,156,151,243,
        30,219,255,208,194,9,94,10,23,157,200,231,220,60,253,2,93,126,142,40
    };

    }

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
