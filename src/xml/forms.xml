<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<!-- combines forms_xml, dialogs_xml, wizard_xml -->
<GeneratorDefinitions>
    <gen class="wxFrame" image="wxFrame" type="frame_form">
        <inherits class="Language Settings"/>
        <inherits class="XRC Settings"/>
        <inherits class="wxTopLevelWindow"/>
        <inherits class="Window Events"/>
        <inherits class="wxWindow">
            <hide name="platforms"/>
        </inherits>
        <property name="class_name" type="string"
            help="The name of the base class.">MyFrameBase</property>
        <property name="title" type="string_escapes"
            help="The text to display on the frame's title bar."/>
        <property name="persist" type="bool">0</property>
        <property name="style" type="bitlist">
            <option name="wxDEFAULT_FRAME_STYLE"
                help="Defined as wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxRESIZE_BORDER | wxSYSTEM_MENU | wxCAPTION | wxCLOSE_BOX | wxCLIP_CHILDREN"/>
			<option
                name="wxCAPTION"
                help="Puts a caption on the frame."/>
			<option name="wxCLOSE_BOX"
                help="Displays a close box on the frame."/>
			<option name="wxFRAME_TOOL_WINDOW"
                help="Causes a frame with a small titlebar to be created; the frame does not appear in the taskbar under Windows or GTK+."/>
			<option
                name="wxFRAME_NO_TASKBAR"
                help="Creates an otherwise normal frame but it does not appear in the taskbar under Windows or GTK+ (note that it will minimize to the desktop window under Windows which may seem strange to the users and thus it might be better to use this style only without wxMINIMIZE_BOX style). In wxGTK, the flag is respected only if GTK+ is at least version 2.2 and the window manager supports _NET_WM_STATE_SKIP_TASKBAR hint. Has no effect under other platforms."/>
			<option
                name="wxFRAME_FLOAT_ON_PARENT"
                help="The frame will always be on top of its parent (unlike wxSTAY_ON_TOP). A frame created with this style must have a non-NULL parent."/>
			<option
                name="wxFRAME_SHAPED"
                help="Windows with this style are allowed to have their shape changed with the SetShape method."/>
			<option
                name="wxICONIZE"
                help="Display the frame iconized (minimized). Windows only."/>
			<option name="wxMAXIMIZE"
                help="Displays the frame maximized. Windows only."/>
			<option name="wxMAXIMIZE_BOX"
                help="Displays a maximize box on the frame."/>
			<option name="wxMINIMIZE"
                help="Identical to wxICONIZE. Windows only."/>
			<option name="wxMINIMIZE_BOX"
                help="Displays a minimize box on the frame."/>
			<option name="wxRESIZE_BORDER"
                help="Displays a resizeable border around the window."/>
			<option name="wxSTAY_ON_TOP"
                help="Stay on top of all other windows, see also wxFRAME_FLOAT_ON_PARENT."/>
			<option name="wxSYSTEM_MENU"
                help="Displays a system menu."/> wxDEFAULT_FRAME_STYLE </property>
        <property name="extra_style" type="bitlist">
            <option name="wxFRAME_EX_CONTEXTHELP"
                help="Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a wxEVT_HELP event if the user clicked on an application window. You cannot use this style together with wxMAXIMIZE_BOX or wxMINIMIZE_BOX."/>
            <option name="wxFRAME_EX_METAL"
                help="On Mac OS X, frames with this style will be shown with a metallic look."/>
        </property>
        <property name="center" type="option"
            help="Centers the window on the desktop in the chosen direction.">
            <option name="no"/>
			<option name="wxHORIZONTAL"/>
			<option name="wxVERTICAL"/>
			<option name="wxBOTH"/> wxBOTH </property>
        <property name="icon" type="image"
            help="Specifies the image to display in the title bar of the frame."/>
        <property name="cpp_conditional" type="string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the Frame's generated code."/>
    </gen>

    <gen class="wxPopupWindow" image="popup_window" type="form">
        <inherits class="Language Settings"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyPopupBase</property>
        <property name="border" type="option"
            help="Specifies the type of border to use for the window.">
            <option name="wxBORDER_NONE"
                help="No border will be displayed."/>
			<option name="wxBORDER_RAISED"
                help="Displays a raised border."/>
			<option name="wxBORDER_SIMPLE"
                help="Displays a thin border around the window."/>
			<option name="wxBORDER_SUNKEN"
                help="Displays a sunken border."/>
			<option name="wxBORDER_THEME"
                help="Displays a native border suitable for a control, on the current platform. On Windows, this will be a themed border; on most other platforms a sunken border will be used."/>
            wxBORDER_NONE </property>
        <property name="style" type="bitlist">
            <option name="wxPU_CONTAINS_CONTROLS"
                help="By default in wxMSW, a popup window will not take focus from its parent window. However many standard controls, including common ones such as wxTextCtrl, need focus to function correctly and will not work when placed on a default popup. This flag can be used to make the popup take focus and let all controls work but at the price of not allowing the parent window to keep focus while the popup is shown, which can also be sometimes desirable. This style is currently only implemented in MSW and simply does nothing under the other platforms. Requires wxWidgets 3.1.3"/>
        </property>
        <property name="variant" type="option" help="Chooses a different variant of the window display to use (calls SetWindowVariant).">
            <option name="normal"
                help="Normal size"/>
            <option name="small"
                help="About 25% smaller than normal."/>
            <option name="mini"
                help="About 33% smaller than normal."/>
            <option name="large"
                help="About 35% larger than normal."/>
            normal
        </property>
        <property name="size" type="wxSize"
            help="Specifies the size of the window. A -1 indicates that the value should be calculated automatically via a top level sizer."/>
		<property name="minimum_size" type="wxSize"
			help="Sets the minimum size of the window. Any positive value will override the automatic size calculation that would normally be done."/>
		<property name="maximum_size" type="wxSize"
			help="Sets the maximum allowable size of the window (limits automatic sizing)."/>
        <property name="foreground_colour" type="wxColour"
            help="Sets the foreground colour of the window."/>
        <property name="background_colour" type="wxColour"
            help="Sets the background colour of the window."/>
        <property name="font" type="wxFont"
            help="Sets the font for this window. This should not be used for a parent window if you don't want its font to be inherited by its children"/>
        <property name="cpp_conditional" type="string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the Window's generated code."/>
        <event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent"
            help="Either provide your own handler function, or add a wxContextMenuEvent to create a popup menu."/>
        <event name="wxEVT_DESTROY" class="wxWindowDestroyEvent"
            help="Sent from the class destructor just before the window is destroyed."/>
    </gen>

    <gen class="wxPopupTransientWindow" image="popup_transient" type="form">
        <inherits class="Language Settings"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyPopupTransientBase</property>
        <property name="border" type="option"
            help="Specifies the type of border to use for the window.">
            <option name="wxBORDER_NONE"
                help="No border will be displayed."/>
			<option name="wxBORDER_RAISED"
                help="Displays a raised border."/>
			<option name="wxBORDER_SIMPLE"
                help="Displays a thin border around the window."/>
			<option name="wxBORDER_SUNKEN"
                help="Displays a sunken border."/>
			<option name="wxBORDER_THEME"
                help="Displays a native border suitable for a control, on the current platform. On Windows, this will be a themed border; on most other platforms a sunken border will be used."/>
            wxBORDER_NONE </property>
        <property name="style" type="bitlist">
            <option name="wxPU_CONTAINS_CONTROLS"
                help="By default in wxMSW, a popup window will not take focus from its parent window. However many standard controls, including common ones such as wxTextCtrl, need focus to function correctly and will not work when placed on a default popup. This flag can be used to make the popup take focus and let all controls work but at the price of not allowing the parent window to keep focus while the popup is shown, which can also be sometimes desirable. This style is currently only implemented in MSW and simply does nothing under the other platforms. Requires wxWidgets 3.1.3"/>
        </property>
        <property name="variant" type="option" help="Chooses a different variant of the window display to use (calls SetWindowVariant).">
            <option name="normal"
                help="Normal size"/>
            <option name="small"
                help="About 25% smaller than normal."/>
            <option name="mini"
                help="About 33% smaller than normal."/>
            <option name="large"
                help="About 35% larger than normal."/>
            normal
        </property>
        <property name="size" type="wxSize"
            help="Specifies the size of the window. A -1 indicates that the value should be calculated automatically via a top level sizer."/>
		<property name="minimum_size" type="wxSize"
			help="Sets the minimum size of the window. Any positive value will override the automatic size calculation that would normally be done."/>
		<property name="maximum_size" type="wxSize"
			help="Sets the maximum allowable size of the window (limits automatic sizing)."/>
        <property name="foreground_colour" type="wxColour"
            help="Sets the foreground colour of the window."/>
        <property name="background_colour" type="wxColour"
            help="Sets the background colour of the window."/>
        <property name="font" type="wxFont"
            help="Sets the font for this window. This should not be used for a parent window if you don't want its font to be inherited by its children"/>
        <property name="cpp_conditional" type="string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the Window's generated code."/>
        <event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent"
            help="Either provide your own handler function, or add a wxContextMenuEvent to create a popup menu."/>
        <event name="wxEVT_DESTROY" class="wxWindowDestroyEvent"
            help="Sent from the class destructor just before the window is destroyed."/>
    </gen>

    <gen class="RibbonBar" image="ribbon_bar" type="ribbonbar_form">
        <inherits class="Language Settings"/>
        <inherits class="XRC Settings"/>
        <inherits class="wxWindow">
            <hide name="platforms"/>
        </inherits>
        <inherits class="Window Events"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyRibbonBarBase</property>
        <property name="theme" type="option"
            help="Select the RibbonBar theme.">
            <option name="Default"
                help="Use Default theme."/>
			<option name="Generic"
                help="Use Generic theme."/>
			<option name="MSW"
                help="Use MSW theme."/> Default </property>
        <property name="style" type="bitlist">
            <option name="wxRIBBON_BAR_DEFAULT_STYLE"
                help="Defined as wxRIBBON_BAR_FLOW_HORIZONTAL | wxRIBBON_BAR_SHOW_PAGE_LABELS | wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS | wxRIBBON_BAR_SHOW_TOGGLE_BUTTON | wxRIBBON_BAR_SHOW_HELP_BUTTON."/>
			<option
                name="wxRIBBON_BAR_FOLDBAR_STYLE"
                help="Defined as wxRIBBON_BAR_FLOW_VERTICAL | wxRIBBON_BAR_SHOW_PAGE_ICONS | wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS | wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS."/>
			<option
                name="wxRIBBON_BAR_SHOW_PAGE_LABELS"
                help="Causes labels to be shown on the tabs in the ribbon bar."/>
			<option
                name="wxRIBBON_BAR_SHOW_PAGE_ICONS"
                help="Causes icons to be shown on the tabs in the ribbon bar."/>
			<option
                name="wxRIBBON_BAR_FLOW_HORIZONTAL"
                help="Causes panels within pages to stack horizontally."/>
			<option name="wxRIBBON_BAR_FLOW_VERTICAL"
                help="Causes panels within pages to stack vertically."/>
			<option
                name="wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS"
                help="Causes extension buttons to be shown on panels (where the panel has such a button)."/>
			<option
                name="wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS"
                help="Causes minimise buttons to be shown on panels (where the panel has such a button)."/>
			<option
                name="wxRIBBON_BAR_SHOW_TOGGLE_BUTTON"
                help="Causes a toggle button to appear on the ribbon bar at top-right corner."/>
			<option
                name="wxRIBBON_BAR_SHOW_HELP_BUTTON"
                help="Causes a help button to appear on the ribbon bar at the top-right corner."/>
            wxRIBBON_BAR_DEFAULT_STYLE </property>
        <property name="cpp_conditional" type="string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the RibbonBar's generated code."/>
        <event name="wxEVT_RIBBONBAR_PAGE_CHANGED" class="wxRibbonBarEvent"
            help="Triggered after the transition from one page being active to a different page being active."/>
        <event name="wxEVT_RIBBONBAR_PAGE_CHANGING" class="wxRibbonBarEvent"
            help="Triggered prior to the transition from one page being active to a different page being active, and can veto the change."/>
        <event name="wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN" class="wxRibbonBarEvent"
            help="Triggered when the middle mouse button is pressed on a tab."/>
        <event name="wxEVT_RIBBONBAR_TAB_MIDDLE_UP" class="wxRibbonBarEvent"
            help="Triggered when the middle mouse button is released on a tab."/>
        <event name="wxEVT_RIBBONBAR_TAB_RIGHT_DOWN" class="wxRibbonBarEvent"
            help="Triggered when the right mouse button is pressed on a tab."/>
        <event name="wxEVT_RIBBONBAR_TAB_RIGHT_UP" class="wxRibbonBarEvent"
            help="Triggered when the right mouse button is released on a tab."/>
        <event name="wxEVT_RIBBONBAR_TAB_LEFT_DCLICK" class="wxRibbonBarEvent"
            help="Triggered when the left mouse button is double clicked on a tab."/>
        <event name="wxEVT_RIBBONBAR_TOGGLED" class="wxRibbonBarEvent"
            help="Triggered when the button triggering the ribbon bar is clicked."/>
        <event name="wxEVT_RIBBONBAR_HELP_CLICKED" class="wxRibbonBarEvent"
            help="Triggered when the help button is clicked."/>
    </gen>

    <gen class="wxDialog" image="wxDialog" type="form">
        <inherits class="Dialog Window Settings"/>
        <inherits class="Language Settings"/>
        <inherits class="XRC Settings"/>
        <inherits class="wxTopLevelWindow"/>
        <inherits class="Window Events"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyDialogBase</property>
        <property name="title" type="string_escapes"
            help="The text to display on the dialog's title bar."/>
        <property name="persist" type="bool">0</property>
        <property name="style" type="bitlist">
            <option name="wxCAPTION"
                help="Puts a caption on the dialog box."/>
			<option name="wxCLOSE_BOX"
                help="Displays a close box on the dialog."/>
			<option name="wxDEFAULT_DIALOG_STYLE"
                help="Equivalent to a combination of wxCAPTION, wxCLOSE_BOX and wxSYSTEM_MENU (the last one is not used under Unix)"/>
			<option
                name="wxDIALOG_NO_PARENT"
                help="By default, a dialog created with a NULL parent window will be given the application's top level window as parent. Use this style to prevent this from happening and create an orphan dialog. Not recommended for modal dialogs."/>
			<option
                name="wxMAXIMIZE_BOX"
                help="Displays a maximize box on the dialog."/>
			<option name="wxMINIMIZE_BOX"
                help="Displays a minimize box on the dialog."/>
			<option name="wxRESIZE_BORDER"
                help="Display a resizeable frame around the window."/>
			<option name="wxSTAY_ON_TOP"
                help="The dialog stays on top of all other windows."/>
			<option name="wxSYSTEM_MENU"
                help="Display a system menu."/>
			<option name="wxWANTS_CHARS"
                help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab."/>
			<option
                name="wxFULL_REPAINT_ON_RESIZE"
                help="Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms."/>
            wxDEFAULT_DIALOG_STYLE </property>
        <property name="extra_style" type="bitlist">
            <option name="wxDIALOG_EX_CONTEXTHELP"
                help="Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a wxEVT_HELP event if the user clicked on an application window. Note: The Project's &quot;help_provider&quot; property must be set for context-sensitive help to work."/>
            <option name="wxDIALOG_EX_METAL"
                help="On Mac OS X, frames with this style will be shown with a metallic look."/>
            <option name="wxWS_EX_BLOCK_EVENTS"
                help="wxCommandEvents are propagated upward to the parent window, it's parent window, etc. Setting this flag blocks this propagation at this window, preventing events from being propagated further upwards."/>
            <option name="wxWS_EX_PROCESS_IDLE"
                help="The dialog should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED."/>
            <option name="wxWS_EX_PROCESS_UI_UPDATES"
                help="The dialog should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is   wxUPDATE_UI_PROCESS_SPECIFIED."/>
            <option name="wxWS_EX_VALIDATE_RECURSIVELY"
                help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows."/>
        </property>
        <property name="center" type="option"
            help="Centers the dialog box on the display in the chosen direction.">
            <option name="no"/>
			<option name="wxHORIZONTAL"/>
			<option name="wxVERTICAL"/>
			<option name="wxBOTH"/> wxBOTH </property>
        <property name="icon" type="image"
            help="Specifies the image to display in the title bar of the dialog."/>
        <property name="cpp_conditional" type="string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the Dialog's generated code."/>
        <event name="wxEVT_INIT_DIALOG" class="wxInitDialogEvent"
            help="Generated when the dialog is being initialized."/>
    </gen>

    <gen class="PanelForm" image="wxPanel" type="panel_form">
        <inherits class="Language Settings"/>
        <inherits class="XRC Settings"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyPanelBase</property>
        <property name="mockup_size" type="wxSize"
            help="This is the minimum size to display the panel in the Mockup Panel. It does not affect the actual size of the panel in your compiled code. Note that for a wxRibbonBar this needs to be as wide as the widest ribbon panel or you will see a question mark for the wxRibbonPage.">200,
            200</property>
        <property name="cpp_conditional" type="string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the Panel's generated code."/>

        <category name="Window Settings">
            <property name="id" type="id"
                help="The identifier for the panel.">wxID_ANY</property>
            <property name="variant" type="option" help="Chooses a different variant of the window display to use (calls SetWindowVariant).">
                <option name="normal"
                    help="Normal size"/>
                <option name="small"
                    help="About 25% smaller than normal."/>
                <option name="mini"
                    help="About 33% smaller than normal."/>
                <option name="large"
                    help="About 35% larger than normal."/>
                normal
            </property>
            <property name="pos" type="wxPoint"
                help="Window position. The default is (-1, -1) which indicates that wxWidgets should generate a default position for the window."/>
            <property name="size" type="wxSize"
                help="Sets the panel size. The default is (-1, -1) which indicates that wxWidgets should generate a default size for the panel, large enough to display all visible elements."/>
            <property name="minimum_size" type="wxSize"
                help="Sets the minimum size of the panel. The default is (-1, -1) which indicates wxWidgets should calculate a minimum size large enough to display all visible elements."/>
            <property name="maximum_size" type="wxSize"
                help="Sets the maximum size of the panel."/>
            <property name="window_style" type="bitlist">
                <option name="wxTRANSPARENT_WINDOW"
                    help="The window is transparent, that is, it will not receive paint events. Windows only."/>
				<option
                    name="wxTAB_TRAVERSAL"
                    help="Setting this will cause the tab key to traverse child windows."/>
				<option name="wxWANTS_CHARS"
                    help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab."/>
				<option
                    name="wxVSCROLL"
                    help="Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don't support scrollbars nor with top-level windows in most ports."/>
				<option
                    name="wxHSCROLL"
                    help="Use this style to enable a horizontal scrollbar. The same limitations as for wxVSCROLL apply to this style."/>
				<option
                    name="wxCLIP_CHILDREN"
                    help="Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only."/>
				<option
                    name="wxFULL_REPAINT_ON_RESIZE"
                    help="Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms."/>
                wxTAB_TRAVERSAL </property>
            <property name="window_extra_style" type="bitlist">
                <option name="wxWS_EX_VALIDATE_RECURSIVELY"
                    help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows."/>
                <option name="wxWS_EX_BLOCK_EVENTS"
                    help="wxCommandEvents are propagated upward to the parent window, it's parent window, etc. Setting this flag blocks this propagation at this window, preventing events from being propagated further upwards."/>
                <option name="wxWS_EX_PROCESS_IDLE"
                    help="This window should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED."/>
                <option name="wxWS_EX_PROCESS_UI_UPDATES"
                    help="This window should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is   wxUPDATE_UI_PROCESS_SPECIFIED."/>
            </property>
            <property name="disabled" type="bool"
                help="Disable the window for user input. Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is.">
                0</property>
            <property name="hidden" type="bool"
                help="Shows or hides the window.">0</property>
            <property name="background_colour" type="wxColour"
                help="Sets the background colour of the window. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list."/>
            <property name="font" type="wxFont"
                help="Sets the font for the panel. This should not be used if you don't want the font to be inherited by its children."/>
            <property name="window_name" type="string_escapes"/>
            <property name="subclass" type="string"
                help="If you have derived a class from wxPanel and you want to use your derived class, then specify that class name here. You will need to add the header file for your class to the base_hdr_includes property."/>
        </category>

        <event name="wxEVT_INIT_DIALOG" class="wxInitDialogEvent"
            help="Generated when the panel is being initialized."/>
        <event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent"/>
        <event name="wxEVT_ERASE_BACKGROUND" class="wxEraseEvent"/>
        <event name="wxEVT_IDLE" class="wxIdleEvent"
            help="Generated when the system becomes idle."/>
        <event name="wxEVT_SHOW" class="wxShowEvent"
            help="Sent when the panel is shown or hidden."/>
        <event name="wxEVT_PAINT" class="wxPaintEvent"/>
        <event name="wxEVT_SIZE" class="wxSizeEvent"/>
        <event name="wxEVT_UPDATE_UI" class="wxUpdateUIEvent"/>
    </gen>

    <gen class="wxPropertySheetDialog" image="prop_sheet_dlg" type="propsheetform">
        <inherits class="Dialog Window Settings">
            <hide name="pos" />
            <hide name="size" />
            <hide name="foreground_colour" />
            <hide name="maximum_size" />
            <hide name="minimum_size" />
        </inherits>
        <inherits class="Language Settings"/>
        <inherits class="XRC Settings"/>
        <inherits class="wxTopLevelWindow"/>
        <inherits class="Window Events"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyPropSheetDlgBase</property>
        <property name="title" type="string_escapes"
            help="The text to display on the PropertySheet's title bar."/>
        <property name="prop_book_type" type="type_option"
            help="The type of book to use.">
            <option name="wxPROPSHEET_NOTEBOOK"/>
            <option name="wxPROPSHEET_CHOICEBOOK"/>
            <option
                name="wxPROPSHEET_LISTBOOK"/>
            <option name="wxPROPSHEET_TOOLBOOK"/>
            <option name="wxPROPSHEET_TREEBOOK"/>
            wxPROPSHEET_NOTEBOOK</property>
        <property name="prop_shrink_to_fit" type="type_bool"
            help="Shrinks the dialog window to fit the currently selected page (common behaviour for property sheets on macOS).">
            0</property>

        <property name="prop_buttons" type="type_bitlist"
            help="Specifies the standard buttons to create.">
            <option name="wxOK"
                help="Create a 'OK' button. Cannot be combined with Yes button."/>
            <option name="wxYES"
                help="Create a 'Yes' button. Cannot be combined with OK button."/>
            <option name="wxAPPLY"
                help="Create a 'Apply' button."/>
            <option name="wxNO"
                help="Create a 'No' button."/>
            <option name="wxCANCEL"
                help="Create a 'Cancel' button. Cannot be combined with Close button."/>
            <option name="wxCLOSE"
                help="Create a 'Close' button. Cannot be combined with Cancel button."/>
            <option name="wxHELP"
                help="Create a 'Help' button."/>wxOK|wxCANCEL</property>
        <property name="prop_outer_border" type="type_int"
            help="Sets the border around the book control only. Size is in dialog units -- igorned if set to -1 (default).">
            -1</property>
        <property name="prop_inner_border" type="type_int"
            help="Sets the border around the whole dialog. Size is in dialog units -- igorned if set to -1 (default).">
            -1</property>
        <property name="prop_persist" type="type_bool">0</property>

        <property name="prop_style" type="type_bitlist">
            <option name="wxCAPTION"
                help="Puts a caption on the dialog box."/>
            <option name="wxCLOSE_BOX"
                help="Displays a close box on the dialog."/>
            <option name="wxDEFAULT_DIALOG_STYLE"
                help="Equivalent to a combination of wxCAPTION, wxCLOSE_BOX and wxSYSTEM_MENU (the last one is not used on Unix)."/>
            <option
                name="wxDIALOG_NO_PARENT"
                help="By default, a dialog created with a NULL parent window will be given the application's top level window as parent. Use this style to prevent this from happening and create an orphan dialog. Not recommended for modal dialogs."/>
            <option
                name="wxMAXIMIZE_BOX"
                help="Displays a maximize box on the dialog."/>
            <option name="wxMINIMIZE_BOX"
                help="Displays a minimize box on the dialog."/>
            <option name="wxRESIZE_BORDER"
                help="Display a resizeable frame around the dialog."/>
            <option name="wxSTAY_ON_TOP"
                help="The dialog stays on top of all other windows."/>
            <option name="wxSYSTEM_MENU"
                help="Display a system menu."/>
            <option name="wxWANTS_CHARS"
                help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab."/>
            wxDEFAULT_DIALOG_STYLE</property>

        <property name="prop_extra_style" type="type_bitlist">
            <option name="wxDIALOG_EX_CONTEXTHELP"
                help="Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a wxEVT_HELP event if the user clicked on an application window. Note: The Project's &quot;help_provider&quot; property must be set for context-sensitive help to work."/>
            <option name="wxDIALOG_EX_METAL"
                help="On Mac OS X, frames with this style will be shown with a metallic look."/>
            <option name="wxWS_EX_BLOCK_EVENTS"
                help="wxCommandEvents are propagated upward to the parent window, it's parent window, etc. Setting this flag blocks this propagation at this window, preventing events from being propagated further upwards."/>
            <option name="wxWS_EX_PROCESS_IDLE"
                help="The dialog should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED."/>
            <option name="wxWS_EX_PROCESS_UI_UPDATES"
                help="The dialog should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is wxUPDATE_UI_PROCESS_SPECIFIED."/>
            <option name="wxWS_EX_VALIDATE_RECURSIVELY"
                help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows."/>
        </property>

        <property name="prop_center" type="type_option"
            help="Centers the dialog box on the display in the chosen direction.">
            <option name="no"/>
            <option name="wxHORIZONTAL"/>
            <option name="wxVERTICAL"/>
            <option name="wxBOTH"/>wxBOTH</property>

        <property name="prop_icon" type="type_image"
            help="Specifies the image to display in the title bar of the dialog."/>
        <property name="prop_cpp_conditional" type="type_string_code_single"
            help="In C++ code, any value in this property will be used to place a conditional (#if/#endif) block around the Dialog's generated code."/>

        <event name="wxEVT_INIT_DIALOG" class="wxInitDialogEvent"
            help="Generated when the dialog is being initialized."/>
        <category name="Click Events">
            <event name="OKButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the OK button is clicked"/>
            <event name="YesButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the Yes button is clicked"/>
            <event name="ApplyButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the Apply the button is clicked"/>
            <event name="NoButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the No button is clicked"/>
            <event name="CancelButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the Cancel button is clicked"/>
            <event name="CloseButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the Close button is clicked"/>
            <event name="HelpButtonClicked" class="wxCommandEvent"
                help="Process a wxEVT_BUTTON event when the Help button is clicked"/>
        </category>
    </gen>

    <gen class="wxWizard" image="wxWizard" type="wizard">
        <inherits class="Language Settings"/>
        <inherits class="XRC Settings"/>
        <inherits class="wxTopLevelWindow"/>
        <inherits class="wxWindow">
            <hide name="minimum_size"/>
            <hide name="maximum_size"/>
            <hide name="size"/>
        </inherits>
        <inherits class="Window Events"/>
        <property name="class_name" type="string"
            help="The name of the base class.">MyWizardBase</property>
        <property name="title" type="string_escapes"
            help="The text to display on the Wizard's title bar."/>
        <property name="style" type="bitlist">
            <option name="wxCAPTION"
                help="Puts a caption on the dialog box."/>
			<option name="wxDEFAULT_DIALOG_STYLE"
                help="Equivalent to a combination of wxCAPTION, wxCLOSE_BOX and wxSYSTEM_MENU (the last one is not used under Unix)"/>
			<option
                name="wxRESIZE_BORDER"
                help="Display a resizeable frame around the window."/>
			<option name="wxSYSTEM_MENU"
                help="Display a system menu."/>
			<option name="wxCLOSE_BOX"
                help="Displays a close box on the dialog."/>
			<option name="wxMAXIMIZE_BOX"
                help="Displays a maximize box on the dialog."/>
			<option name="wxMINIMIZE_BOX"
                help="Displays a minimize box on the dialog."/>
			<option name="wxSTAY_ON_TOP"
                help="The dialog stays on top of all other windows."/>
			<option name="wxDIALOG_NO_PARENT"
                help="By default, a dialog created with a NULL parent window will be given the application's top level window as parent. Use this style to prevent this from happening and create an orphan dialog. This is not recommended for modal dialogs."/>
            wxDEFAULT_DIALOG_STYLE </property>
        <property name="extra_style" type="bitlist">
            <option name="wxWIZARD_EX_HELPBUTTON"
                help="Shows a Help button using wxID_HELP."/>
        </property>
        <property name="border" type="int"
            help="Sets the width of the border around the page area."/>
        <property name="center" type="option"
            help="Centers the dialog box on the display in the chosen direction.">
            <option name="no"/>
			<option name="wxHORIZONTAL"/>
			<option name="wxVERTICAL"/>
			<option name="wxBOTH"/> wxBOTH </property>
        <property name="bitmap" type="image"
            help="Bitmap to display on the left side of the wizard (default: none)."/>
        <property name="bmp_placement" type="bitlist">
            <option name="wxWIZARD_VALIGN_TOP"
                help="The bitmap is vertically aligned at the top."/>
            <option name="wxWIZARD_VALIGN_CENTRE"
                help="The bitmap is centered vertically."/>
            <option name="wxWIZARD_VALIGN_BOTTOM"
                help="The bitmap is vertically aligned at the bottom."/>
            <option name="wxWIZARD_HALIGN_LEFT"
                help="The bitmap is horizontally aligned to the left."/>
            <option name="wxWIZARD_HALIGN_CENTRE"
                help="The bitmap is horizontally aligned in the center."/>
            <option name="wxWIZARD_HALIGN_RIGHT"
                help="The bitmap is horizontally aligned to the right."/>
            <option name="wxWIZARD_TILE"
                help="The bitmap is tiled."/>
        </property>
        <property name="bmp_min_width" type="int"
            help="Sets the minimum width for the bitmap that will be constructed to contain the actual wizard or page bitmap if a non-zero bitmap placement flag has been set. If this is not set when using bitmap placement, the initial layout may be incorrect.">
            -1</property>
        <property name="bmp_background_colour" type="wxColour"
            help="Sets the colour that should be used to fill the area not taken up by the wizard or page bitmap, if a non-zero bitmap placement flag has been set."/>
        <event name="wxEVT_INIT_DIALOG" class="wxInitDialogEvent"
            help="Generated when the Wizard is being initialized."/>
        <event name="wxEVT_WIZARD_PAGE_CHANGED" class="wxWizardEvent"
            help="This event cannot be vetoed."/>
        <event name="wxEVT_WIZARD_PAGE_CHANGING" class="wxWizardEvent"
            help="This event can be vetoed."/>
        <event name="wxEVT_WIZARD_BEFORE_PAGE_CHANGED" class="wxWizardEvent"
            help="Generated after Next is clicked but before GetNext is called. Unlike wxEVT_WIZARD_PAGE_CHANGING, the handler for this function can change state that might affect the return value of GetNext. This event can be vetoed."/>
        <event name="wxEVT_WIZARD_PAGE_SHOWN" class="wxWizardEvent"
            help="The page was shown and laid out (this event cannot be vetoed)."/>
        <event name="wxEVT_WIZARD_CANCEL" class="wxWizardEvent"
            help="The user attempted to cancel the wizard (this event may be vetoed)."/>
        <event name="wxEVT_WIZARD_HELP" class="wxWizardEvent"
            help="Generated when the help button is pressed. "/>
        <event name="wxEVT_WIZARD_FINISHED" class="wxWizardEvent"
            help="Generated when the finish button is pressed."/>
    </gen>

    <gen class="wxWizardPageSimple" image="wxWizardPageSimple" type="wizardpagesimple">
        <inherits class="wxWindow"/>
        <inherits class="Window Events"/>
        <property name="var_name" type="string">wizPage</property>
        <property name="bitmap" type="image"
            help="Page-specific bitmap (default: none)."/>
    </gen>

</GeneratorDefinitions>
