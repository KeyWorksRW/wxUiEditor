inline const char* dialogs_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="wxDialog" image="wxDialog" type="form">
		<inherits class="Dialog Window Settings" />
		<inherits class="C++ Settings" />
		<inherits class="wxPython Settings" />
		<inherits class="wxLua Settings" />
		<inherits class="XRC Settings" />
		<inherits class="wxTopLevelWindow" />
		<inherits class="Window Events" />
		<property name="class_name" type="string"
			help="The name of the base class.">MyDialogBase</property>
		<property name="title" type="string_escapes"
			help="The text to display on the dialog's title bar." />
		<property name="persist" type="bool"
			help="Use wxPersistentRegisterAndRestore to save/restore the size and position of the dialog.">0</property>
		<property name="style" type="bitlist">
			<option name="wxCAPTION"
				help="Puts a caption on the dialog box." />
			<option name="wxCLOSE_BOX"
				help="Displays a close box on the dialog." />
			<option name="wxDEFAULT_DIALOG_STYLE"
				help="Equivalent to a combination of wxCAPTION, wxCLOSE_BOX and wxSYSTEM_MENU (the last one is not used under Unix)" />
			<option name="wxDIALOG_NO_PARENT"
				help="By default, a dialog created with a NULL parent window will be given the application's top level window as parent. Use this style to prevent this from happening and create an orphan dialog. Not recommended for modal dialogs." />
			<option name="wxMAXIMIZE_BOX"
				help="Displays a maximize box on the dialog." />
			<option name="wxMINIMIZE_BOX"
				help="Displays a minimize box on the dialog." />
			<option name="wxRESIZE_BORDER"
				help="Display a resizeable frame around the window." />
			<option name="wxSTAY_ON_TOP"
				help="The dialog stays on top of all other windows." />
			<option name="wxSYSTEM_MENU"
				help="Display a system menu." />
			<option name="wxWANTS_CHARS"
				help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab." />
			wxDEFAULT_DIALOG_STYLE
		</property>
		<property name="extra_style" type="bitlist">
			<option name="wxDIALOG_EX_CONTEXTHELP"
				help="Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a wxEVT_HELP event if the user clicked on an application window. Note: The Project's &quot;help_provider&quot; property must be set for context-sensitive help to work." />
			<option name="wxDIALOG_EX_METAL"
				help="On Mac OS X, frames with this style will be shown with a metallic look." />
			<option name="wxWS_EX_BLOCK_EVENTS"
				help="wxCommandEvents are propagated upward to the parent window, it's parent window, etc. Setting this flag blocks this propagation at this window, preventing events from being propagated further upwards." />
			<option name="wxWS_EX_PROCESS_IDLE"
				help="The dialog should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED." />
			<option name="wxWS_EX_PROCESS_UI_UPDATES"
				help="The dialog should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is   wxUPDATE_UI_PROCESS_SPECIFIED." />
			<option name="wxWS_EX_VALIDATE_RECURSIVELY"
				help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows." />
		</property>
		<property name="center" type="option"
			help="Centers the dialog box on the display in the chosen direction.">
			<option name="no" />
			<option name="wxHORIZONTAL" />
			<option name="wxVERTICAL" />
			<option name="wxBOTH" />
			wxBOTH
		</property>
		<property name="icon" type="image"
			help="Specifies the image to display in the title bar of the dialog." />

		<event name="wxEVT_INIT_DIALOG" class="wxInitDialogEvent"
			help="Generated when the dialog is being initialized." />
	</gen>

	<gen class="PanelForm" image="wxPanel" type="form">
		<property name="class_name" type="string"
			help="The name of the base class.">MyPanelBase</property>
		<property name="mockup_size" type="wxSize"
			help="This is the minimum size to display the panel in the Mockup Panel. It does not affect the actual size of the panel in your compiled code. Note that for a wxRibbonBar this needs to be as wide as the widest ribbon panel or you will see a question mark for the wxRibbonPage.">200, 200</property>

		<!-- We specify the category this way rather than inheriting it so that it appears before the Window Settings category. -->
		<category name="Code Generation" base_name="Code Generation" />

		<category name="Window Settings">
			<property name="id" type="id"
				help="The identifier for the panel.">wxID_ANY</property>
			<property name="pos" type="wxPoint"
				help="Window position. The default is (-1, -1) which indicates that wxWidgets should generate a default position for the window." />
			<property name="size" type="wxSize"
				help="Sets the panel size. The default is (-1, -1) which indicates that wxWidgets should generate a default size for the panel, large enough to display all visible elements." />
			<property name="minimum_size" type="wxSize"
				help="Sets the minimum size of the panel. The default is (-1, -1) which indicates wxWidgets should calculate a minimum size large enough to display all visible elements." />
			<property name="maximum_size" type="wxSize"
				help="Sets the maximum size of the panel." />
			<property name="window_style" type="bitlist">
				<option name="wxTRANSPARENT_WINDOW"
					help="The window is transparent, that is, it will not receive paint events. Windows only." />
				<option name="wxTAB_TRAVERSAL"
					help="Setting this will cause the tab key to traverse child windows." />
				<option name="wxWANTS_CHARS"
					help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab." />
				<option name="wxVSCROLL"
					help="Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don't support scrollbars nor with top-level windows in most ports." />
				<option name="wxHSCROLL"
					help="Use this style to enable a horizontal scrollbar. The same limitations as for wxVSCROLL apply to this style." />
				<option name="wxCLIP_CHILDREN"
					help="Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only." />
				wxTAB_TRAVERSAL
			</property>
			<property name="window_extra_style" type="bitlist">
				<option name="wxWS_EX_VALIDATE_RECURSIVELY"
					help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows." />
				<option name="wxWS_EX_BLOCK_EVENTS"
					help="wxCommandEvents are propagated upward to the parent window, it's parent window, etc. Setting this flag blocks this propagation at this window, preventing events from being propagated further upwards." />
				<option name="wxWS_EX_PROCESS_IDLE"
					help="This window should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED." />
				<option name="wxWS_EX_PROCESS_UI_UPDATES"
					help="This window should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is   wxUPDATE_UI_PROCESS_SPECIFIED." />
			</property>
			<property name="disabled" type="bool"
				help="Disable the window for user input. Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is.">0</property>
			<property name="hidden" type="bool"
				help="Shows or hides the window.">0</property>
			<property name="background_colour" type="wxColour"
				help="Sets the background colour of the window. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list." />
			<property name="window_name" type="string_escapes"
				help="Used to associate a name with the window, allowing the application user to set Motif resource values for individual panel boxes." />
			<property name="derived_class" type="string"
				help="If you have derived a class from wxPanel and you want to use your derived class, then specify that class name here. You will need to add the header file for your class to the base_hdr_includes property." />
		</category>

		<event name="wxEVT_INIT_DIALOG" class="wxInitDialogEvent"
			help="Generated when the panel is being initialized." />
		<event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent" />
		<event name="wxEVT_ERASE_BACKGROUND" class="wxEraseEvent" />
		<event name="wxEVT_IDLE" class="wxIdleEvent"
			help="Generated when the system becomes idle." />
		<event name="wxEVT_SHOW" class="wxShowEvent"
			help="Sent when the panel is shown or hidden." />
		<event name="wxEVT_PAINT" class="wxPaintEvent" />
		<event name="wxEVT_SIZE" class="wxSizeEvent" />
		<event name="wxEVT_UPDATE_UI" class="wxUpdateUIEvent" />
	</gen>
</GeneratorDefinitions>)===";
