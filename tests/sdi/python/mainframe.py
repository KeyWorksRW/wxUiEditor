###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

import wx
import wx.grid
import wx.propgrid
import main_test_dlg
import booktest_dlg
import wizard
import python_dlg
import dlgissue_956
import dlgissue_960

import images
from wx.lib.embeddedimage import PyEmbeddedImage

wxPython_1_5x_png = PyEmbeddedImage(
    b"iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwYAAACr0lE"
    b"QVRIx62Uz0sUYRjHP+sPSOiweEkicEDsIrjToZPQjhc7dGitW6Cup/SwsJt6dj2XTCBk0GFW+gPsbId3"
    b"FSo9OSsIYSwzXrQgdkeUTsbbYV63cXbGVesLL8877/v84P3O83zbiYaeTqcPNU0rdnZ2HtVqtU3+I9K5"
    b"XM6RCpZlSWA+sP4JOuAIIaRhGNKyLCmllLquSyGEFEJIwLxOYo0BtnmCZA5pvjPPHiANw5D1el2Wy+WG"
    b"BYqXTdyh7AST6KT8j8JagaOFIwBc18XzPIQQ9Pb2XpOWDA4fkHwMrFd/Vz6fb7xIf6pLMjiKzpZIqAKr"
    b"TKBxM8arCrxR+0VlZ4EKiVYF2oHvfCXJfQx6Yry6gYdqBfGZfcC+qECbsitY2CxHeCzHRI4AkL0MRWcs"
    b"6Fvw+lnYI0+KOyTpAW413dnsMgq4QFqdVgDvXIGqfzncF91+WUDjAWk0DMYCNzvADAuAwxglALYoscdk"
    b"uE0NoBzzSj9wA40NNE4QTDf5VNhRtL0gyxQeUABoq/rttg88bsXn0BDmdgm0G+pgEJhjntsYVEjwkiIn"
    b"wAAGoF11XuaFQEqJLFZDM5NCNpjI4LDIlaYdQORyOPW6X8D5hdQ3AwXeEtQowSqNYey4IGmSfky6yDIO"
    b"3ceQTCrh6oJkMLIPgHvqa5gikhQaIbfz6MfkOVlSqluuAtk8aGGYzKjkEVg5BPu46TgVNXhtMdJtqGf7"
    b"OjTDeq2G63ngnUK57ttQ+iRzWAwiG3oVU8CX7vNSYSwtUbJtKOxB6SAUsaZoGVFi+APYZx1wO1ryOQ1M"
    b"IcigFX6DfRDhswb8pMCs6qRTbHbJAm4iUhrymDwieWHhKnACfMJlldE4VY3T8yzjWAyqXxfEe2W/sMI3"
    b"XCUx5ZZqGgGDu0zQFeqMCsNqZwdVMw5/ANThGfS+jW3VAAAAAElFTkSuQmCC")

debug_32_png = PyEmbeddedImage(
    b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGV0lE"
    b"QVRYw+2XXYhdVxXHf3ufc+6de28mMxkzU5NxSg02CZMW0VS0ChFrNFXQUOKDoIgPCvokQXyTEEGIT348"
    b"2CCIRasvEkFKLKTUSI1Oa2uSMtZ06IxlaobEzFdu5n6du7+WD+fcc+dmSmzNgy9uWOxz9jln7f9a67/W"
    b"Xgf+x0MBzM/PS71eJ4SA1nrghVhrAmxZv+MIgQCEEG5b7t+Pjo6yb98+FQMsLS1x4sQJKpUKAFqDUpo4"
    b"jgGIIo1SEVGk+shVNKBcxBfXzjm8D0SRxvswsAbQ7XY5efJkZiCAMQbnHNZavvXkM29qlBVwQYh1H0Tv"
    b"3gXJ7v3gN04E8aAiMB7+2RbOf+MIxhiMMZmxANZavMtA9DbrSccLLScYn292bZ7UZvfOQ2qzuRoM8coC"
    b"ToRuyMR4CBoaDq5sBFa7UoTBWtsHwKbLjs+VBymUh5BJ0wTS0gitpx5H11eKjaauvczN584wPvFOvIAP"
    b"mUTAjVT4ez2QbvKOzw0tQuC9xzpHGWh1hSgC8RBuC4NzgqrtZKXbZej1WRZnf89wJaH64Cd5fWmJWjxM"
    b"2/S/utoSNqwM6MjIHPDe9wEURAo+J4ncFsucxbFi1KfUJkpMRSf44VNNlm9c42c/eIbtu7+MSS0mVaQh"
    b"i7f1glIKkWzOrLdYF4pw6x5DIeBzt6c2DIoTUhMwbc9ymvDcmSf55neafODhR2ibiEe/8DIvPn2Gqxuw"
    b"3BHm1jztTsAawXSz2blMevv1MizezAHvHKkJoFXxsgQB+h6p/+40X/zLdZojgfP1v3Lko/fxiZlFxl9a"
    b"4o1Xn+Xy2MeKVNabMibkOnzogxggYW8hNUKr6emmAecEazIpdW7iL/2W8Jtf8Z7GOo9Nf5DXXgv8bc7w"
    b"KSpMri3DE4+zd+lpJpN2YXFPrBG8ky3prfsu0ZRKCcYIPoB10G4LqYG2gfK/XqFx/2f5h4bn84L1NQXf"
    b"3jFKtVzm10NlVp2hvvsQu1YuIR68lUJCyIDEcUwcx6RpOhiCWrVGUirTMbK5ohZjYeTDYIVDjQ0qnZSf"
    b"zPyZ95XKTOzYwfc3bvHxZpNXri8x263wRvIwccg27YVBZ1W/IPpAGjrnWFu/yfC2KjZ3k/VbgXgvfGio"
    b"zPdizQVjOL7RYLnV5Kda0daaz1WrnDeCjjIOZQB66ZeBMcbSarW2AgCwLtBOs92ME0qxwmyK265ym1dL"
    b"ZY51Uh6MY/YHz4FWyvVE84CxzO8Yw1lBeSnOjUCWgs5lYKwzWznQK0YQ6BrBOME6aKXZbB10usLCpQtc"
    b"fP8RfqQ1e52jIaBV4NPG8mOtWNg5weStlzJSW8F7QQKE3Jshz4BeGd5SiJwLtIwQKbCbKpgTaDQ8snKL"
    b"8kNfonP2CZ5dW8UBLRFqCmTXbt71+a/zwosLhOpDqAgIIHn44qSfkpHWW9Mw5KXRdAMbnYDxQscJ9aZn"
    b"7aajaq6xfwIWZZzJr/wSvWOsj358nKmv/pw/1HfzwETCrvhWRjjft7rnEecCfhO7Cx0+BEQ89VSIJXNd"
    b"22XEA7j/HYHn9WMoJ2zc817GvjuDnvsjSaRR04dY726HLtwYepSP1Ja5uradOM7LrxWiRCFhsG8YBOA9"
    b"3gvGSlGSN48/rU1mFdFDFCkWmtuJ3/2ZzI3tvPIpcEpxYfUe4kRl1gdIyrpISV/wIWzlAIDtBuybNCSS"
    b"u1LlSjZ3Rzov3T2LteqX8jjOgIjPAi6hfxIWAHoHg4RA4xePFC1XJIJKEpJYA5oojtFaoXSE1rroE30I"
    b"KMCGgARPJwfr80Ouk5qi3AfJnpVKpT6AqakpTp06VTCz5x6t9UAj+VYb015ze/tcWB3HTE1N9bvitztO"
    b"nz4t1Wp1YLP19XWOHz/+tvXF/w2Aw4cPE/JY1ut1VlZW7u6/4D+NixcvyurqKjt37sQ5R6PRKOq5cw7n"
    b"HKOjo1QqFWq1Gr13Dx48qO4awOXLl2VkZCT/P4iK06m+sTEQguHh4ex5CHiRrM+0lunp6TvucUdWzczM"
    b"yNjYGJFSRGpQT5IkVKtVtm3bxtDQUP88yckWRRG1SoWZmRm5Kw+cPXtW9u/diyiFtZYoigbyuKjv+XqS"
    b"JIVXZmdnOXbsmLprDgCcO3dO5ubmOHDgAPfdey+VWi3zRBxjnaPZbLK4uMiVK1fYs2cPR48eVfx/vIXx"
    b"bzHIEML53VwZAAAAAElFTkSuQmCC")

wxNotebook_png = PyEmbeddedImage(
    b"iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAY0lE"
    b"QVQ4y2NgoCX4jwcU9OwlWgzZTBYY4+bNmzgtnjlzJpqIKlYxZMBEq1CgmcGMsDC+evEkVgXa+uYkGVjY"
    b"u49hQokzIwshhbgsHLCgGDV41OBRg0cNJgbAS7c5e74yDAkAAH7rWT+isfNfAAAAAElFTkSuQmCC")

wxPython_png = PyEmbeddedImage(
    b"iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsTAAALEwEAmpwYAAABQUlE"
    b"QVQ4y42TMVLDQAxFnwMHoKTMDXKDIB/CJb5CTsCgDG3uwBB3OQIUckpmSBF6MzEHIG06UXgd27ET+DOa"
    b"3dXO/pW+JOhCVNWTJDH+idHJYwNYrVYiIq6qDsjfNFOMBS4zcXd3VXUzczOrSS5CWOC8BUsrMzN3d5eZ"
    b"XIziuue5r5Z4E8NzOO8xlkRDBFfAjgPCDWNug3cLTIIR1owIyIcIKErK6JXyPWNNxpoD8M34SABQAiUv"
    b"gAbP7nhXNM5T6FGflEqLFGdBo0sBUpwRKUkw+2kJPKXqj7S1vwA1w91x+QgEzc/aiaJX1lBK98q0aEVR"
    b"p1ulpKOBnrC6lDXyfed4d66VYcojk1DGJfM8rx53CNIQ4f0Qwbib0/wL4k3LkQG70AtP5IBGvZl4GBBm"
    b"C3wCS+KhZurXPm1mIoh2dhZ+Ad+Nn/PyqjymAAAAAElFTkSuQmCC")

wxPython_2x_png = PyEmbeddedImage(
    b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAAElBMVEUBAAAAAAAAuwD//wD////dAABp"
    b"I5D7AAAAAXRSTlMAQObYZgAAAJdJREFUeNp900sKxDAAw9BKTe5/5SFDawjEzVYP0+/1HuD6Oowx+O5L"
    b"1BkYMEabAVda/ShQ5Q+gAoEsnLqZkQ4EtIqcDqp4CA1cEwDqwswSRgBbj3lA7iYgJAuvmJvgzlWQia3f"
    b"ESgF1AlW7xNgwGkC/QTYQbqkCwcAASIYkOfH20U9gXTSA3R74wD9q0o6Cii/V60hHOoPwvkD1WDE+MAA"
    b"AAAASUVORK5CYII=")

wxDialog_png = PyEmbeddedImage(
    b"iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAAsTAAALEwEAmpwYAAACLklE"
    b"QVQ4y7WVQWsTURDHf7vZLompaVPQg+jFa8DiqQe/gMceetNCEQX9Bl5ERBD8AF4qKt562EPqKQfpPSJK"
    b"MBEEb8FcckmTGmmzb8bDvt1skm6bUjqwzHs7782b+c9/3oMLEicevNrtqACoggIqqOrEB6Bi/2PXiCKq"
    b"LLiKKyOeb95yAFyAFzu/tLAA4fdtir5D2HhLMZ/D/HiPND9wuejDz4+UFn2WSnmWSwXKpQLlpSIr5UX8"
    b"zcc4955QLJV4+u6bAngA6nrsf9kGiHRlK5lT2aJvx/2/o4x8I+n/M4yMMzY92/mt11f8TLCcaQ/HinJ0"
    b"FNLu7PP60W3HA8jn4M7VzrkL1nVvcjg4IIEijieo1thYv5voWCqra6c6bTXqXPIdvBxjx9iKp50G1Vry"
    b"709nvmxEBSNCwgpLnnNLDhAj44jVnhJHmNYAvW57LsehCJKOWFTPhGfWmtBIEqSbxjjeEOugWku+aafT"
    b"ayKQSTo0giJqZlqNOpXVNVqN+gwc6epnrRHb7mMoUhjHG06jVgYvEE0VzxgzYV6+cmNmS1zAk2wgmNCk"
    b"WTFLt8+NyXuhuRewdX/jRJsYQW2Q7jTd5pG8by8ah6TToszHHeEdt7HXbdPcC8iyfa0FWfdQIl5WVHHa"
    b"Z7VNOO4PhrSH11CViNIa9b2TopHYOkTJxq+MnauScx2GhwN6B2byqn7w8pOKRE+NiiBqtTFIfKDlvIok"
    b"zRDRS6MXTZTdNw8dLlL+A4iuUQ4KRZVvAAAAAElFTkSuQmCC")

class MainFrame(wx.Frame):

    def __init__(self, parent, id=wx.ID_ANY, title="pytest", pos=
                wx.DefaultPosition, size=wx.Size(500, 300),
                style=wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL,
                name=wx.FrameNameStr):
        wx.Frame.__init__(self)

        if not self.Create(parent, id, title, pos, size, style, name):
            return

        self.splitter = wx.SplitterWindow(self, wx.ID_ANY, wx.DefaultPosition,
            wx.DefaultSize, wx.SP_3D)
        self.splitter.SetSashGravity(0.0)
        self.splitter.SetMinimumPaneSize(150)
        self.splitter.SetMinSize(self.ConvertDialogToPixels(wx.Size(200, 200)))

        self.propertyGridManager = wx.propgrid.PropertyGridManager(self.splitter, wx.ID_ANY,
            wx.DefaultPosition, wx.DefaultSize, wx.propgrid.PG_AUTO_SORT|wx.propgrid.PG_BOLD_MODIFIED|
            wx.propgrid.PG_SPLITTER_AUTO_CENTER|wx.propgrid.PG_DESCRIPTION|wx.propgrid.PG_TOOLBAR|
            wx.propgrid.PG_NO_INTERNAL_BORDER)
        self.propertyGridManager.SetExtraStyle(wx.propgrid.PG_EX_MODE_BUTTONS)

        self.propertyGridPage = self.propertyGridManager.AddPage("Animal Page", wx.BitmapBundle.FromBitmap(
            wxPython_1_5x_png.Bitmap))

        self.propertyGridItem_7 = self.propertyGridPage.Append(wx.propgrid.PropertyCategory
            ("Pets", "Pets"))

        self.propertyGridItem_2 = self.propertyGridPage.Append(wx.propgrid.StringProperty(
        "dog", "Woof!"))

        self.propertyGridItem = self.propertyGridPage.Append(wx.propgrid.StringProperty(
        "cat", "Meow!"))

        self.propertyGridItem_5 = self.propertyGridPage.Append(wx.propgrid.PropertyCategory
            ("Big Animals", "Big Animals"))

        self.propertyGridItem_8 = self.propertyGridPage.Append(wx.propgrid.StringProperty(
        "horses", ""))

        self.propertyGridPage_2 = self.propertyGridManager.AddPage("Number Page", wx.BitmapBundle.FromBitmap(
            images.english_png.Bitmap))

        self.propertyGridItem_6 = self.propertyGridPage_2.Append(wx.propgrid.PropertyCategory
            ("Numbers", "Numbers"))

        self.propertyGridItem_3 = self.propertyGridPage_2.Append(wx.propgrid.IntProperty(
        "1", ""))

        self.propertyGridItem_4 = self.propertyGridPage_2.Append(wx.propgrid.IntProperty(
        "2", ""))

        self.grid = wx.grid.Grid(self.splitter, wx.ID_ANY)
        self.grid.CreateGrid(5, 5)
        self.grid.EnableDragGridSize(False)
        self.grid.SetMargins(0, 0)
        self.grid.SetDefaultCellAlignment(wx.ALIGN_LEFT, wx.ALIGN_TOP)
        self.grid.SetColLabelAlignment(wx.ALIGN_CENTER, wx.ALIGN_CENTER)
        self.grid.SetColLabelSize(wx.grid.GRID_AUTOSIZE)
        self.grid.SetRowLabelAlignment(wx.ALIGN_CENTER, wx.ALIGN_CENTER)
        self.grid.SetRowLabelSize(wx.grid.GRID_AUTOSIZE)
        self.splitter.SplitHorizontally(self.propertyGridManager, self.grid)

        menubar = wx.MenuBar()

        self.menu = wx.Menu()
        menuQuit = wx.MenuItem(self.menu, wx.ID_EXIT)
        entry = wx.AcceleratorEntry()
        if entry.FromString("ALT+X") :
            menuQuit.AddExtraAccel(entry)

        menuQuit.SetBitmap(wx.ArtProvider.GetBitmapBundle(wx.ART_QUIT, wx.ART_MENU))
        self.menu.Append(menuQuit)
        menubar.Append(self.menu, wx.GetStockLabel(wx.ID_FILE))

        menuDialogs = wx.Menu()
        menu_item_3 = wx.MenuItem(menuDialogs, wx.ID_ANY, "MainTestDlg")
        menu_item_3.SetBitmap(wx.BitmapBundle.FromBitmap(debug_32_png.Bitmap))
        menuDialogs.Append(menu_item_3)
        menu_item_4 = wx.MenuItem(menuDialogs, wx.ID_ANY, "BookTestDlg")
        menu_item_4.SetBitmap(wx.BitmapBundle.FromBitmap(wxNotebook_png.Bitmap))
        menuDialogs.Append(menu_item_4)
        menu_item_2 = wx.MenuItem(menuDialogs, wx.ID_ANY, "PythonDlg")
        bitmaps = [ wxPython_png.Bitmap,
                    wxPython_1_5x_png.Bitmap,
                    wxPython_2x_png.Bitmap ]
        menu_item_2.SetBitmap(wx.BitmapBundle.FromBitmaps(bitmaps))
        menuDialogs.Append(menu_item_2)
        menuItem_2 = wx.MenuItem(menuDialogs, wx.ID_ANY, "Common Controls...",
            "Common controls", wx.ITEM_NORMAL)
        menuItem_2.SetBitmap(wx.ArtProvider.GetBitmapBundle(wx.ART_TIP, wx.ART_MENU))
        menuDialogs.Append(menuItem_2)
        menuItem3 = wx.MenuItem(menuDialogs, wx.ID_ANY, "Wizard")
        menuDialogs.Append(menuItem3)
        menuDialogs.AppendSeparator()

        submenu = wx.Menu()
        menu_item_5 = wx.MenuItem(submenu, wx.ID_ANY, "DlgIssue_956")
        menu_item_5.SetBitmap(wx.BitmapBundle.FromBitmap(debug_32_png.Bitmap))
        submenu.Append(menu_item_5)
        submenu_item = menuDialogs.AppendSubMenu(submenu, "Issue Dialogs")
        submenu_item.SetBitmap(wx.BitmapBundle.FromBitmap(wxDialog_png.Bitmap))
        menubar.Append(menuDialogs, "&Dialogs")

        self.SetMenuBar(menubar)

        self.m_toolBar = self.CreateToolBar()
        tool_4 = self.m_toolBar.AddTool(wx.ID_ANY, "MainTestDlg", wx.BitmapBundle.FromBitmap(
            debug_32_png.Bitmap))

        tool_5 = self.m_toolBar.AddTool(wx.ID_ANY, "BookTestDlg", wx.BitmapBundle.FromBitmap(
            wxNotebook_png.Bitmap))

        tool_3 = self.m_toolBar.AddTool(wx.ID_ANY, "PythonDlg", wx.BitmapBundle.FromBitmap(
            wxPython_1_5x_png.Bitmap))

        tool_2 = self.m_toolBar.AddTool(wx.ID_ANY, "Common Controls...",
            wx.ArtProvider.GetBitmapBundle(wx.ART_TIP, wx.ART_TOOLBAR))

        self.m_toolBar.Realize()

        self.m_statusBar = self.CreateStatusBar(2)
        self.m_statusBar.SetStatusWidths([100, -1])
        self.m_statusBar.SetStatusStyles([wx.SB_FLAT, wx.SB_FLAT])


        self.Centre(wx.BOTH)

        # Bind Event handlers
        self.Bind(wx.EVT_MENU, self.OnQuit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.OnMainTestDlg, id=menu_item_3.GetId())
        self.Bind(wx.EVT_MENU, self.OnBookTestDlg, id=menu_item_4.GetId())
        self.Bind(wx.EVT_MENU, self.OnPythonDlg, id=menu_item_2.GetId())
        self.Bind(wx.EVT_MENU, self.OnCommonDialog, id=menuItem_2.GetId())
        self.Bind(wx.EVT_MENU, self.OnWizard, id=menuItem3.GetId())
        self.Bind(wx.EVT_MENU, self.OnDlgIssue_956, id=menu_item_5.GetId())
        self.Bind(wx.EVT_TOOL, self.OnMainTestDlg, id=tool_4.GetId())
        self.Bind(wx.EVT_TOOL, self.OnBookTestDlg, id=tool_5.GetId())
        self.Bind(wx.EVT_TOOL, self.OnPythonDlg, id=tool_3.GetId())
        self.Bind(wx.EVT_TOOL, self.OnCommonDialog, id=tool_2.GetId())

    # Unimplemented Event handler functions
    # Copy any listed and paste them below the comment block, or to your inherited class.
    """
    """

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

    # Event handler functions
    def OnChoicebook(self, event):
        event.Skip()

    def OnCommonDialog(self, event):
        event.Skip()

    def OnImportTest(self, event):
        event.Skip()

    def OnListbook(self, event):
        event.Skip()

    def OnMultiTestDialog(self, event):
        event.Skip()

    def OnNotebook(self, event):
        event.Skip()

    def OnOtherCtrls(self, event):
        event.Skip()

    def OnQuit(self, event):
        self.Close()

    def OnRibbonDialog(self, event):
        event.Skip()

    def OnToolbook(self, event):
        event.Skip()

    def OnTreebook(self, event):
        event.Skip()

    def OnMainTestDlg(self, event):
        dlg = main_test_dlg.MainTestDialog(self, title="Main Dialog Tests")
        dlg.ShowModal()
        dlg.Destroy()

    def OnBookTestDlg(self, event):
        dlg = booktest_dlg.BookTestDlg(self)
        dlg.ShowModal()
        dlg.Destroy()

    def OnWizard(self, event):
        my_wizard = wizard.Wizard(self)
        my_wizard.Run()
        my_wizard.Destroy()

    def OnPythonDlg(self, event):
        dlg = python_dlg.PythonDlg(self, title="PythonDlg")
        dlg.ShowModal()
        dlg.Destroy()

    def OnDlgIssue_956(self, event):
        dlg = DlgIssue_956.PythonDlg(self)
        dlg.ShowModal()
        dlg.Destroy()

class MyApp(wx.App):
    def OnInit(self):
        frame = MainFrame(None)
        self.SetTopWindow(frame)

        frame.Show(True)
        return True

app = MyApp()
app.MainLoop()
