inline const char* textctrls_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="wxStaticText" image="wxStaticText" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="String Validator" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_staticText</property>
		<property name="label" type="string_edit_escapes">MyLabel</property>
		<property name="markup" type="bool"
			help="Simple markup can be used to apply different fonts or colours to different parts of the control label when supported. If markup is not supported by the control or platform, it is simply stripped and SetLabel() is used with the resulting string.\n\nSample: This is <i>italic</i> and this is <span fgcolor='red'>red</span>">0</property>
		<property name="wrap" type="int"
			help="Wraps the control's label so that each of its lines becomes at most this many pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long). If width is negative, no wrapping is done.">-1</property>
		<property name="style" type="bitlist">
			<option name="wxALIGN_LEFT"
				help="Align the text to the left." />
			<option name="wxALIGN_RIGHT"
				help="Align the text to the right." />
			<option name="wxALIGN_CENTER_HORIZONTAL"
				help="Center the text (horizontally)." />
			<option name="wxST_NO_AUTORESIZE"
				help="By default, the control will adjust its size to exactly fit to the size of the text when SetLabel() is called. If this style flag is given, the control will not change its size (this style is especially useful with controls which also have the wxALIGN_RIGHT or the wxALIGN_CENTER_HORIZONTAL style because otherwise they won't make sense any longer after a call to SetLabel())." />
			<option name="wxST_ELLIPSIZE_START"
				help="If the labeltext width exceeds the control width, replace the beginning of the label with an ellipsis; uses wxControl::Ellipsize." />
			<option name="wxST_ELLIPSIZE_MIDDLE"
				help="If the label text width exceeds the control width, replace the middle of the label with an ellipsis; uses wxControl::Ellipsize." />
			<option name="wxST_ELLIPSIZE_END"
				help="If the label text width exceeds the control width, replace the end of the label with an ellipsis; uses wxControl::Ellipsize." />
		</property>
	</gen>

	<gen class="wxTextCtrl" image="wxTextCtrl" type="widget">
		<inherits class="Text Validator" />
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
	</gen>

	<gen class="wxRichTextCtrl" image="richtextctrl" type="widget">
		<inherits class="wxWindow">
			<property name="window_style" type="bitlist">wxVSCROLL|wxHSCROLL|wxWANTS_CHARS</property>
			<property name="minimum_size" type="wxSize"
				help="Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size.">200,100d</property>
		</inherits>
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_richText</property>
		<property name="value" type="string_escapes"
			help="Sets the initial contents of the control." />
		<property name="hint" type="string_escapes"
			help="Sets a hint to be shown when the control is empty and does not have the focus." />
		<property name="style" type="bitlist">
			<option name="wxRE_CENTRE_CARET"
				help="The control will try to keep the caret line centred vertically while editing." />
			<option name="wxRE_READONLY"
				help="The text will not be editable." />
		</property>
		<property name="focus" type="bool"
			help="When checked, this control will be set to receive keyboard input when the parent form is first created.">0</property>
		<event name="wxEVT_TEXT" class="wxCommandEvent"
			help="Generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
		<event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
			help="Generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
		<event name="wxEVT_TEXT_URL" class="wxTextUrlEvent"
			help="Generated when a mouse event occurrs over a URL in the text control (wxMSW and wxGTK2 only)" />

		<event name="wxEVT_RICHTEXT_LEFT_CLICK" class="wxRichTextEvent"
			help="Generated when the user releases the left mouse button over an object." />
		<event name="wxEVT_RICHTEXT_RIGHT_CLICK" class="wxRichTextEvent"
			help="Generated when the user releases the right mouse button over an object." />
		<event name="wxEVT_RICHTEXT_MIDDLE_CLICK" class="wxRichTextEvent"
			help="Generated when the user releases the middle mouse button over an object." />
		<event name="EVT_RICHTEXT_LEFT_DCLICK" class="wxRichTextEvent"
			help="Generated when the user double-clicks an object." />

		<event name="wxEVT_RICHTEXT_CHARACTER" class="wxRichTextEvent"
			help="Generated when the user presses a character key. Valid event functions: GetFlags, GetPosition, GetCharacter." />
		<event name="wxEVT_RICHTEXT_CONSUMING_CHARACTER" class="wxRichTextEvent"
			help="Generated when the user presses a character key but before it is processed and inserted into the control. Call Veto to prevent normal processing." />
		<event name="wxEVT_RICHTEXT_DELETE" class="wxRichTextEvent"
			help="Generated when the user presses the backspace or delete key. Valid event functions: GetFlags, GetPosition." />
		<event name="wxEVT_RICHTEXT_RETURN" class="wxRichTextEvent"
			help="Generated when the user presses the return key. Valid event functions: GetFlags, GetPosition." />

		<event name="wxEVT_RICHTEXT_STYLESHEET_CHANGING" class="wxRichTextEvent"
			help="Generated when the control's stylesheet is about to change." />
		<event name="wxEVT_RICHTEXT_STYLESHEET_CHANGED" class="wxRichTextEvent"
			help="Generated when the control's stylesheet has changed, for example the user added, edited or deleted a style. Valid event functions: GetRange, GetPosition." />
		<event name="wxEVT_RICHTEXT_STYLESHEET_REPLACING" class="wxRichTextEvent"
			help="Generated when the control's stylesheet is about to be replaced, for example when a file is loaded into the control. Valid event functions: Veto, GetOldStyleSheet, GetNewStyleSheet." />
		<event name="wxEVT_RICHTEXT_STYLESHEET_REPLACED" class="wxRichTextEvent"
			help="Generated when the control's stylesheet has been replaced, for example when a file is loaded into the control. Valid event functions: GetOldStyleSheet, GetNewStyleSheet." />

		<event name="wxEVT_RICHTEXT_PROPERTIES_CHANGED" class="wxRichTextEvent"
			help="Generated when properties have been applied to the control. Valid event functions: GetPosition, GetRange." />
		<event name="wxEVT_RICHTEXT_STYLE_CHANGED" class="wxRichTextEvent"
			help="Generated when styling has been applied to the control. Valid event functions: GetPosition, GetRange." />
		<event name="wxEVT_RICHTEXT_CONTENT_INSERTED" class="wxRichTextEvent"
			help="Generated when content has been inserted into the control. Valid event functions: GetPosition, GetRange." />
		<event name="wxEVT_RICHTEXT_CONTENT_DELETED" class="wxRichTextEvent"
			help="Generated when content has been deleted from the control. Valid event functions: GetPosition, GetRange." />
		<event name="wxEVT_RICHTEXT_BUFFER_RESET " class="wxRichTextEvent"
			help="Generated when the buffer has been reset by deleting all content. You can use this to set a default style for the first new paragraph." />
		<event name="wxEVT_RICHTEXT_SELECTION_CHANGED" class="wxRichTextEvent"
			help="Generated when the selection range has changed." />
		<event name="wxEVT_RICHTEXT_FOCUS_OBJECT_CHANGED" class="wxRichTextEvent"
			help="Generated when the current focus object has changed." />
	</gen>
</GeneratorDefinitions>)===";
