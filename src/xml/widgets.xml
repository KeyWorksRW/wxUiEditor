<?xml version="1.0"?>
<GeneratorDefitions>

  <compinfo class="wxStaticText" image="wxStaticText" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="String Validator"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_staticText</property>
    <property name="label" type="string_edit_escapes">MyLabel</property>
    <property name="markup" type="bool"
        help="Simple markup can be used to apply different fonts or colours to different parts of the control label when supported. If markup is not supported by the control or platform, it is simply stripped and SetLabel() is used with the resulting string.">
      0
    </property>
    <property name="wrap" type="int"
        help="Wraps the control's label so that each of its lines becomes at most this many pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long). If width is negative, no wrapping is done.">
      -1
    </property>
    <property name="style" type="bitlist">
      <option name="wxALIGN_LEFT" help="Align the text to the left."/>
      <option name="wxALIGN_RIGHT" help="Align the text to the right."/>
      <option name="wxALIGN_CENTER_HORIZONTAL" help="Center the text (horizontally)."/>
      <option name="wxST_NO_AUTORESIZE"
        help="By default, the control will adjust its size to exactly fit to the size of the text when SetLabel() is called. If this style flag is given, the control will not change its size (this style is especially useful with controls which also have the wxALIGN_RIGHT or the wxALIGN_CENTER_HORIZONTAL style because otherwise they won't make sense any longer after a call to SetLabel())."/>
      <option name="wxST_ELLIPSIZE_START"
        help="If the labeltext width exceeds the control width, replace the beginning of the label with an ellipsis; uses wxControl::Ellipsize."/>
      <option name="wxST_ELLIPSIZE_MIDDLE"
        help="If the label text width exceeds the control width, replace the middle of the label with an ellipsis; uses wxControl::Ellipsize."/>
      <option name="wxST_ELLIPSIZE_END"
        help="If the label text width exceeds the control width, replace the end of the label with an ellipsis; uses wxControl::Ellipsize."/>
    </property>
  </compinfo>

  <compinfo class="wxTextCtrl" image="wxTextCtrl" type="widget">
    <inherits class="Text Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_textCtrl</property>
    <property name="value" type="string_escapes"/>
    <property name="maxlength" type="string"
        help="The maximum length of user-entered text. 0 means no limit. Note that in wxGTK this function may only be used with single line text controls."/>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB"
        help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_MULTILINE" help="The text control allows multiple lines."/>
      <option name="wxTE_PASSWORD" help="The text will be echoed as asterisks."/>
      <option name="wxTE_READONLY" help="The text will not be user-editable."/>
      <option name="wxTE_RICH"
        help="Use rich text control under Windows. This allows having more than 64KB of text in the control. This style is ignored under other platforms."/>
      <option name="wxTE_RICH2"
        help="Use rich text control version 2.0 or 3.0 under Windows. This style is ignored under other platforms."/>
      <option name="wxTE_AUTO_URL"
        help="Highlight the URLs and generate the wxTextUrlEvents when mouse events occur over them. This style is only supported for wxTE_RICH Win32 and multi-line wxGTK2 text controls."/>
      <option name="wxTE_NOHIDESEL"
        help="By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. This style is ignored under other platforms."/>
      <option name="wxHSCROLL"
        help="A horizontal scrollbar will be created and used, so that text won't be wrapped. No effect under wxGTK1."/>
      <option name="wxTE_NO_VSCROLL"
        help="For multiline controls only: a vertical scrollbar will never be created. This limits the amount of text which can be entered into the control to what can be displayed in it under MSW but not under GTK2. Currently not implemented for the other platforms."/>
      <option name="wxTE_LEFT" help="The text in the control will be left-justified (default)."/>
      <option name="wxTE_CENTER" help="The text in the control will be centered (currently Windows and wxGTK2 only). "/>
      <option name="wxTE_RIGHT" help="The text in the control will be right-justified (currently Windows and wxGTK2 only)."/>
      <option name="wxTE_DONTWRAP" help="Same as wxHSCROLL style: don't wrap at all, show horizontal scrollbar instead."/>
      <option name="wxTE_CHARWRAP" help="Wrap the lines too long to be shown entirely at any position (wxUniv and wxGTK2 only)."/>
      <option name="wxTE_WORDWRAP" help="Wrap the lines too long to be shown entirely at word boundaries (wxUniv and wxGTK2 only)."/>
      <option name="wxTE_BESTWRAP"
        help="Wrap the lines at word boundaries or at any other character if there are words longer than the window width (this is the default)."/>
    </property>
    <event name="wxEVT_TEXT" class="wxCommandEvent"
        help="Generated when the text changes. Notice that this event will always be generated when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called.)"/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
        help="Generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)."/>
    <event name="wxEVT_TEXT_URL" class="wxTextUrlEvent"
        help="Generated when the a mouse event occurred over an URL in the text control (Windows and wxGTK2 only)"/>
    <event name="wxEVT_TEXT_MAXLEN" class="wxCommandEvent"
        help="Generated when the user tries to enter more text into the control than the limit set by SetMaxLength."/>
  </compinfo>

  <compinfo class="wxCheckBox" image="wxCheckBox" type="widget">
    <inherits class="Boolean Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">
      m_checkBox
    </property>
    <property name="label" type="string_escapes">
      My Checkbox
    </property>
    <property name="checked" type="bool">0</property>
    <property name="style" type="bitlist">
      <option name="wxALIGN_RIGHT"
        help="Aligns the checkbox to the right of the text instead of the left."/>
    </property>
    <event name="wxEVT_CHECKBOX" class="wxCommandEvent" help="Generated when the checkbox is clicked."/>
  </compinfo>

  <compinfo class="Check3State" image="check3state" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_checkBox</property>
    <property name="label" type="string_escapes">
      My Checkbox
    </property>
    <property name="initial_state" type="option">
      <option name="wxCHK_UNCHECKED" help="The checkbox is unchecked."/>
      <option name="wxCHK_CHECKED" help="The checkbox is checked."/>
      <option name="wxCHK_UNDETERMINED" help="The checkbox is undetermined."/>
      wxCHK_UNCHECKED
    </property>
    <property name="style" type="bitlist">
      <!-- wxALIGN_RIGHT needs to be first for code generation to work properly -->
      <option name="wxALIGN_RIGHT"
        help="Aligns the checkbox to the right of the text instead of the left."/>
      <option name="wxCHK_ALLOW_3RD_STATE_FOR_USER"
        help="If selected, the user can set the checkbox to the third state by clicking."/>
    </property>
    <event name="wxEVT_CHECKBOX" class="wxCommandEvent" help="Generated when the checkbox is clicked."/>
  </compinfo>

  <compinfo class="wxRadioButton" image="wxRadioButton" type="widget">
    <inherits class="Boolean Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_radioBtn</property>
    <property name="label" type="string_escapes">My RadioBtn</property>
    <property name="checked" type="bool">0</property>
    <property name="style" type="bitlist">
      <option name="wxRB_GROUP" help="Marks the beginning of a new group of radio buttons."/>
      <option name="wxRB_SINGLE"
        help="Creates a radio button which is not part of any radio button group. When this style is used, no other radio buttons will be turned off automatically then this button is checked."/>
    </property>
    <event name="wxEVT_RADIOBUTTON" class="wxCommandEvent" help="Generated when the radio button is clicked."/>
  </compinfo>

  <compinfo class="wxButton" image="wxButton" type="widget">
    <inherits class="Bitmaps"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="String Validator"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_btn</property>
    <property name="label" type="string_escapes">MyButton</property>
    <property name="markup" type="bool"
        help="This can be used to apply fonts or colours to different parts of the label.">
      0
    </property>
    <property name="default" type="bool">0</property>
    <property name="auth_needed" type="bool"
        help="Sets whether an authentication needed symbol should be displayed on the button. This method doesn't do anything if the platform is not Windows Vista or newer.">
      0
    </property>
    <property name="style" type="bitlist">
      <option name="wxBU_LEFT" help="Left-justifies the label. Windows and GTK+ only."/>
      <option name="wxBU_TOP" help="Aligns the label to the top of the button. Windows and GTK+ only."/>
      <option name="wxBU_RIGHT" help="Right-justifies the bitmap label. Windows and GTK+ only."/>
      <option name="wxBU_BOTTOM" help="Aligns the label to the bottom of the button. Windows and GTK+ only."/>
      <option name="wxBU_EXACTFIT"
        help="By default, all buttons are made of at least the standard button size, even if their contents is small enough to fit into a smaller size. This is done for consistency as most platforms use buttons of the same size in the native dialogs, but can be overridden by specifying this flag. If it is given, the button will be made just big enough for its contents. Notice that under MSW the button will still have at least the standard height, even with this style, if it has a non-empty label."/>
      <option name="wxBU_NOTEXT"
        help="Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too."/>
      <option name="wxBORDER_NONE"
        help="Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa and OSX/Carbon ports but in the latter only applies to buttons with bitmaps and using bitmap of one of the standard sizes only, namely 128*128, 48*48, 24*24 or 16*16. In all the other cases wxBORDER_NONE is ignored under OSX/Carbon (these restrictions don't exist in OSX/Cocoa however)."/>
    </property>
    <event name="wxEVT_BUTTON" class="wxCommandEvent" help="Generated when the button is clicked"/>
  </compinfo>

  <compinfo class="wxCommandLinkButton" image="wxCommandLinkButton" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_btn</property>
    <property name="main_label" type="string_edit">MyButton</property>
    <property name="note" type="string_edit_escapes"/>
    <property name="default" type="bool" help="If true, this will be the default button (it will be depressed when the return key is pressed)">0</property>
    <event name="wxEVT_BUTTON" class="wxCommandEvent" help="Generated when the button is clicked"/>
  </compinfo>

  <compinfo class="wxComboBox" image="wxComboBox" type="widget">
    <inherits class="Choice Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_comboBox</property>
    <property name="choices" type="stringlist" help="Contents of the Combo Box"></property>
    <property name="selection_string" type="string_escapes"
        help="Selects the item with the specified string in the control. Note that this is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn't have exactly the same case as this string and there is an exact match afterwards."></property>
    <property name="selection_int" type="int"
        help="Sets the selection to the value unless it is -1. Ignored if the selection_string property contains a value.">
      -1
    </property>
    <property name="style" type="bitlist">
      <option name="wxCB_SIMPLE" help="Creates a combobox with a permanently displayed list. Windows only."/>
      <option name="wxCB_DROPDOWN" help="Creates a combobox with a drop-down list. Windows and Motif only."/>
      <option name="wxCB_READONLY"
        help="A combobox with this style behaves like a wxChoice (and may look in the same way as well, although this is platform-dependent). It allows the user to choose from the list of options but doesn't allow the user to enter a value not present in the list."/>
      <option name="wxCB_SORT" help="Sorts the entries alphabetically."/>
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
    </property>
    <event name="wxEVT_COMBOBOX" class="wxCommandEvent"
        help="Generated when an item on the list is selected. Call GetValue() to return the new value of the selection."/>
    <event name="wxEVT_TEXT" class="wxCommandEvent"
        help="Generated when the combobox text changes."/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent" help="Generated when <RETURN> is pressed in the combobox."/>
    <event name="wxEVT_COMBOBOX_DROPDOWN" class="wxCommandEvent"
        help="Generated when the list box part of the combo box is shown (drops down). Notice that this event is only supported by Windows, wxGTK with GTK+ 2.10 or later, and wxOSX/Cocoa."/>
    <event name="wxEVT_COMBOBOX_CLOSEUP" class="wxCommandEvent"
        help="Generated when the list box of the combo box closes up. This event is only generated for the same platforms as wxEVT_COMBOBOX_DROPDOWN above. Also note that only Windows and wxOSX/Cocoa support adding or deleting items in this event."/>
  </compinfo>

  <compinfo class="wxChoice" image="wxChoice" type="widget">
    <inherits class="Choice Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_choice</property>
    <property name="choices" type="stringlist"
        help="Array of strings used to initialise the choice control."/>
    <property name="selection_string" type="string_escapes"
        help="Selects the item with the specified string in the control. Note that this is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn't have exactly the same case as this string and there is an exact match afterwards."></property>
    <property name="selection_int" type="int"
        help="Sets the selection to the value unless it is -1. Ignored if the selection_string property contains a value.">-1</property>
    <property name="style" type="bitlist">
      <option name="wxCB_SORT" help="Sorts the entries alphabetically."/>
    </property>
    <event name="wxEVT_CHOICE" class="wxCommandEvent" help="Generated when an item in the list is selected."/>
  </compinfo>

  <compinfo class="wxListBox" image="wxListBox" type="widget">
    <inherits class="List Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_listBox</property>
    <property name="choices" type="stringlist" help="Contents of the List Box."/>
    <property name="selection_string" type="string_escapes"
        help="Selects the item with the specified string in the control. Note that this is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn't have exactly the same case as this string and there is an exact match afterwards."></property>
    <property name="selection_int" type="int"
        help="Sets the selection to the value unless it is -1. Ignored if the selection_string property contains a value.">-1</property>
    <property name="type" type="option">
      <option name="wxLB_SINGLE" help="Single-selection list."/>
      <option name="wxLB_MULTIPLE"
        help="Multiple-selection list: the user can toggle multiple items on and off. This is the same as wxLB_EXTENDED in wxGTK2 port."/>
      <option name="wxLB_EXTENDED"
        help="Extended-selection list: the user can extend the selection by using SHIFT or CTRL keys together with the cursor movement keys or the mouse."/>
      wxLB_SINGLE
    </property>
    <property name="style" type="bitlist">
      <option name="wxLB_HSCROLL" help="Create a horizontal scrollbar if contents are too wide (Windows only)."/>
      <option name="wxLB_ALWAYS_SB" help="Always show a vertical scrollbar."/>
      <option name="wxLB_NEEDED_SB" help="Only create a vertical scrollbar if needed."/>
      <option name="wxLB_NO_SB" help="Don't create a vertical scrollbar (Windows only)."/>
      <option name="wxLB_SORT" help="The listbox contents are sorted in alphabetical order."/>
    </property>
    <event name="wxEVT_LISTBOX" class="wxCommandEvent" help="Generated when an item in the list is selected."/>
    <event name="wxEVT_LISTBOX_DCLICK" class="wxCommandEvent" help="Generated when the listbox is double-clicked."/>
  </compinfo>

  <compinfo class="wxSimpleHtmlListBox" image="wxSimpleHtmlListBox" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_html_listbox</property>
    <property name="choices" type="stringlist" help="Contents of the HTML list box."/>
    <property name="style" type="bitlist">
      <option name="wxHLB_DEFAULT_STYLE" help="The default style: wxBORDER_SUNKEN."/>
      <option name="wxHLB_MULTIPLE" help="Multiple-selection list: the user can toggle multiple items on and off."/>
      wxHLB_DEFAULT_STYLE
    </property>
    <event name="wxEVT_LISTBOX" class="wxCommandEvent" help="Generated when an item in the list is selected."/>
    <event name="wxEVT_LISTBOX_DCLICK" class="wxCommandEvent" help="Generated when the listbox is double-clicked."/>
    <event name="EVT_HTML_CELL_CLICKED" class="wxHtmlCellEvent" help="A wxHtmlCell was clicked."/>
    <event name="EVT_HTML_CELL_HOVER" class="wxHtmlCellEvent" help="The mouse passed over a wxHtmlCell."/>
    <event name="EVT_HTML_LINK_CLICKED" class="wxHtmlCellEvent" help="A wxHtmlCell which contains a hyperlink was clicked."/>
  </compinfo>

  <compinfo class="wxCheckListBox" image="wxCheckListBox" type="widget">
    <inherits class="List Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_checkList</property>
    <property name="selection_string" type="string_escapes"
        help="Selects the item with the specified string in the control. Note that this is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn't have exactly the same case as this string and there is an exact match afterwards."></property>
    <property name="selection_int" type="int" help="Sets the selection to the value unless it is -1. Ignored if the selection_string property contains a value.">-1</property>
    <property name="choices" type="stringlist" help="List of default values."/>
    <property name="type" type="option">
      <option name="wxLB_SINGLE" help="Single-selection list."/>
      <option name="wxLB_MULTIPLE"
        help="Multiple-selection list: the user can toggle multiple items on and off. This is the same as wxLB_EXTENDED in wxGTK2 port."/>
      <option name="wxLB_EXTENDED"
        help="Extended-selection list: the user can extend the selection by using SHIFT or CTRL keys together with the cursor movement keys or the mouse."/>
      wxLB_SINGLE
    </property>
    <property name="style" type="bitlist">
      <option name="wxLB_HSCROLL" help="Create a horizontal scrollbar if contents are too wide (Windows only)."/>
      <option name="wxLB_ALWAYS_SB" help="Always show a vertical scrollbar."/>
      <option name="wxLB_NEEDED_SB" help="Only create a vertical scrollbar if needed."/>
      <option name="wxLB_NO_SB" help="Don't create a vertical scrollbar (Windows only)."/>
      <option name="wxLB_SORT" help="The listbox contents are sorted in alphabetical order."/></property>
    <event name="wxEVT_CHECKLISTBOX" class="wxCommandEvent" help="Generated when an item in the check list box is checked or unchecked."/>
    <event name="wxEVT_LISTBOX" class="wxCommandEvent" help="Generated when an item in the list is selected."/>
    <event name="wxEVT_LISTBOX_DCLICK" class="wxCommandEvent" help="Generated when the listbox is double-clicked."/>
  </compinfo>

  <compinfo class="wxListView" image="wxListView" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_lstview</property>
    <property name="style" type="bitlist">
      <option name="wxLC_LIST" help="Multicolumn list view, with optional small icons. Columns are computed automatically, i.e. you don't set columns as in wxLC_REPORT. In other words, the list wraps, unlike a wxListBox."/>
      <option name="wxLC_REPORT" help="Single or multicolumn report view, with optional header."/>
      <option name="wxLC_VIRTUAL" help="The application provides items text on demand. May only be used with wxLC_REPORT."/>
      <option name="wxLC_ICON" help="Large icon view, with optional labels."/>
      <option name="wxLC_SMALL_ICON" help="Small icon view, with optional labels."/>
      <option name="wxLC_ALIGN_TOP" help="Icons align to the top. Win32 default, Win32 only."/>
      <option name="wxLC_ALIGN_LEFT" help="Icons align to the left."/>
      <option name="wxLC_AUTOARRANGE" help="Icons arrange themselves. Win32 only."/>
      <option name="wxLC_EDIT_LABELS" help="Labels are editable: the application will be notified when editing starts."/>
      <option name="wxLC_NO_HEADER" help="No header in report mode."/>
      <option name="wxLC_SINGLE_SEL" help="Single selection (default is multiple)."/>
      <option name="wxLC_SORT_ASCENDING" help="Sort in ascending order. (You must still supply a comparison callback in wxListView::SortItems.)"/>
      <option name="wxLC_SORT_DESCENDING" help="Sort in descending order. (You must still supply a comparison callback in wxListView::SortItems.)"/>
      <option name="wxLC_HRULES" help="Draws light horizontal rules between rows in report mode."/>
      <option name="wxLC_VRULES" help="Draws light vertical rules between columns in report mode."/>
      wxLC_ICON
    </property>
    <event name="wxEVT_LIST_BEGIN_DRAG" class="wxListEvent" help="Begin dragging with the left mouse button."/>
    <event name="wxEVT_LIST_BEGIN_RDRAG" class="wxListEvent" help="Begin dragging with the right mouse button."/>
    <event name="wxEVT_LIST_BEGIN_LABEL_EDIT" class="wxListEvent" help="Begin editing a label. This can be prevented by calling Veto()."/>
    <event name="wxEVT_LIST_END_LABEL_EDIT" class="wxListEvent" help="Finish editing a label. This can be prevented by calling Veto()."/>
    <event name="wxEVT_LIST_DELETE_ITEM" class="wxListEvent" help="Delete an item."/>
    <event name="wxEVT_LIST_DELETE_ALL_ITEMS" class="wxListEvent" help="Delete all items."/>
    <event name="wxEVT_LIST_ITEM_SELECTED" class="wxListEvent" help="The item has been selected."/>
    <event name="wxEVT_LIST_ITEM_DESELECTED" class="wxListEvent" help="The item has been deselected."/>
    <event name="wxEVT_LIST_ITEM_ACTIVATED" class="wxListEvent" help="The item has been activated (ENTER or double click)."/>
    <event name="wxEVT_LIST_ITEM_FOCUSED" class="wxListEvent" help="The currently focused item has changed."/>
    <event name="wxEVT_LIST_ITEM_MIDDLE_CLICK" class="wxListEvent" help="The middle mouse button has been clicked on an item."/>
    <event name="wxEVT_LIST_ITEM_RIGHT_CLICK" class="wxListEvent" help="The right mouse button has been clicked on an item."/>
    <event name="wxEVT_LIST_KEY_DOWN" class="wxListEvent" help="A key has been pressed."/>
    <event name="wxEVT_LIST_INSERT_ITEM" class="wxListEvent" help="An item has been inserted."/>
    <event name="wxEVT_LIST_COL_CLICK" class="wxListEvent" help="A column (m_col) has been left-clicked."/>
    <event name="wxEVT_LIST_COL_RIGHT_CLICK" class="wxListEvent" help="A column (m_col) has been right-clicked."/>
    <event name="wxEVT_LIST_COL_BEGIN_DRAG" class="wxListEvent" help="The user started resizing a column - can be vetoed."/>
    <event name="wxEVT_LIST_COL_DRAGGING" class="wxListEvent" help="The divider between columns is being dragged."/>
    <event name="wxEVT_LIST_COL_END_DRAG" class="wxListEvent" help="A column has been resized by the user."/>
    <event name="wxEVT_LIST_CACHE_HINT" class="wxListEvent" help="Prepare cache for a virtual list control."/>
  </compinfo>

  <compinfo class="wxRadioBox" image="radio_box" type="widget">
    <inherits class="Integer Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_radioBox</property>
    <property name="label" type="string_escapes">My Radio Box</property>
    <property name="choices" type="stringlist"
        help="Contents of the Radio Box. On Windows, the last character may be clipped unless you include a trailing space.">
      &quot;Radio Button &quot;
    </property>
    <property name="selection" type="uint"
        help="Zero-based position of the selected button.">
      0
    </property>
    <property name="majorDimension" type="uint"
        help="Specifies the maximum number of rows (if style contains wxRA_SPECIFY_ROWS) or columns (if style contains wxRA_SPECIFY_COLS) for a two-dimensional radiobox. A value of zero will use as many rows or columns as there are radio buttons.">
      0
    </property>
    <property name="style" type="option">
      <option name="wxRA_SPECIFY_ROWS" help="Buttons are arranged vertically (in rows)."/>
      <option name="wxRA_SPECIFY_COLS" help="Buttons are arranged horizontally (in columns).."/>
      wxRA_SPECIFY_COLS
    </property>
    <event name="wxEVT_RADIOBOX" class="wxCommandEvent" help="Generated when a radio button in the box is clicked."/>
  </compinfo>

  <compinfo class="wxStaticBitmap" image="static_bitmap" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">bmp</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      none
    </property>
    <property name="scale_mode" type="option">
      <option name="None" help="Do not scale the image."/>
      <option name="Fill" help="Requires version 3.1. Scale the bitmap to fill the size of the control."/>
      <option name="AspectFit" help="Requires version 3.1. Scale the bitmap to fit the size of the control by maintaining the aspect ratio."/>
      <option name="AspectFill" help ="Requires version 3.1. Scale the bitmap to fit the size of the control by changing the aspect ratio of the bitmap if necessary."/>
      None
    </property>
    <property name="bitmap" type="image"/>
  </compinfo>

  <compinfo class="wxStaticLine" image="static_line" type="widget" flags="no_win_events">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">static_line</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      none
    </property>
    <property name="style" type="option">
      <option name="wxLI_HORIZONTAL" help="Creates a horizontal line."/>
      <option name="wxLI_VERTICAL" help="Creates a vertical line."/>
      wxLI_HORIZONTAL
    </property>
  </compinfo>

  <compinfo class="wxSlider" image="slider" type="widget">
    <inherits class="Integer Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_slider</property>
    <property name="position" type="int"
        help="Initial position for the slider.">
      50
    </property>
    <property name="minValue" type="int"
        help="Minimum slider position.">
      0
    </property>
    <property name="maxValue" type="int"
        help="Maximum slider position.">
      100
    </property>
    <property name="maxValue" type="int"
        help="Maximum slider position.">
      100
    </property>
    <property name="line_size" type="int"
        help="If >0, sets the number of steps the slider moves when the user moves up or down a line.">
      0
    </property>
    <property name="page_size" type="int"
        help="If >0, sets the number of steps the slider moves when the user pages up or down.">
      0
    </property>
    <property name="tick_frequency" type="int"
        help="If >0, sets tick frequency and position. Only usable on Windows.">
      0
    </property>
    <property name="thumb_length" type="int"
        help="If >0, sets the slider thumb length. Only usable on Windows.">
      0
    </property>
    <property name="orientation" type="option">
      <option name="wxSL_HORIZONTAL" help="Create a horizontal gauge."/>
      <option name="wxSL_VERTICAL" help="Create a vertical gauge."/>
      wxSL_HORIZONTAL
    </property>
    <property name="style" type="bitlist">
      <option name="wxSL_AUTOTICKS" help="Displays tick marks when running on Windows."/>
      <option name="wxSL_MIN_MAX_LABELS" help="Displays minimum, maximum labels."/>
      <option name="wxSL_VALUE_LABEL" help="Displays value label."/>
      <option name="wxSL_LABELS"
        help="Displays minimum, maximum and value labels (same as wxSL_VALUE_LABEL and wxSL_MIN_MAX_LABELS together)."/>
      <option name="wxSL_LEFT" help="Displays ticks on the left and forces the slider to be vertical."/>
      <option name="wxSL_RIGHT" help="Displays ticks on the right and forces the slider to be vertical."/>
      <option name="wxSL_TOP" help="Displays ticks on the top."/>
      <option name="wxSL_BOTTOM" help="Displays ticks on the bottom (this is the default)."/>
      <option name="wxSL_BOTH" help="Displays ticks on both sides."/>
      <option name="wxSL_SELRANGE" help="Allows the user to select a range on the slider. Windows only."/>
      <option name="wxSL_INVERSE" help="Inverses the mininum and maximum endpoints on the slider. Not compatible with wxSL_SELRANGE."/>
    </property>
    <event name="wxEVT_SLIDER" class="wxCommandEvent" help="Generated after any change of wxSlider position."/>
    <event name="wxEVT_SCROLL_TOP" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_BOTTOM" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_LINEUP" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_LINEDOWN" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_PAGEUP" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_PAGEDOWN" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_THUMBTRACK" class="wxScrollEvent" help="Generated as the user drags the thumbtrack."/>
    <event name="wxEVT_SCROLL_THUMBRELEASE" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_CHANGED" class="wxScrollEvent" help="Generated on Windows only."/>
  </compinfo>

  <compinfo class="wxGauge" image="gauge" type="widget">
    <inherits class="Integer Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_gauge</property>
    <property name="position" type="uint" help="Initial position for the gauge.">0</property>
    <property name="range" type="uint" help="Integer range (maximum value) of the gauge.">100</property>
    <property name="orientation" type="option">
      <option name="wxGA_HORIZONTAL" help="Create a horizontal gauge."/>
      <option name="wxGA_VERTICAL" help="Create a vertical gauge."/>
      wxGA_HORIZONTAL
    </property>
    <property name="style" type="bitlist">
      <option name="wxGA_SMOOTH" help="Create a smooth progress bar with one pixel wide update step (not supported by all platforms)."/>
      <option name="wxGA_TEXT"
        help="Display the current value in percents in the gauge itself. This style is only supported in wxQt and ignored under the other platforms. Requires wxWidgets 3.1 or higher."/>
      <option name="wxGA_PROGRESS"
        help="Display the value of the gauge in the application taskbar button under Windows 7 and later and the dock icon under OS X. Ignored under the other platforms. Requires wxWidgets 3.1 or higher."/>
    </property>
  </compinfo>

  <compinfo class="wxFilePickerCtrl" image="filePicker" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_filePicker</property>
    <property name="initial_path" type="string_escapes"/>
    <property name="message" type="string_escapes"/>
    <property name="wildcard" type="string_escapes"/>
    <property name="style" type="bitlist">
      <option name="wxFLP_USE_TEXTCTRL"
        help="Creates a text control to the left of the picker button which is completely managed by the wxFilePickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxFLP_OPEN"
        help="Creates a picker which allows the user to select a file to open."/>
      <option name="wxFLP_SAVE"
        help="Creates a picker which allows the user to select a file to save."/>
      <option name="wxFLP_OVERWRITE_PROMPT"
        help="Can be combined with wxFLP_SAVE only: ask confirmation to the user before selecting a file."/>
      <option name="wxFLP_FILE_MUST_EXIST" help="Can be combined with wxFLP_OPEN only: the selected file must be an existing file."/>
      <option name="wxFLP_CHANGE_DIR" help="Change current working directory on each user file selection change."/>
      <option name="wxFLP_SMALL"
        help="Use smaller version of the control with a small &quot;...&quot; button instead of the normal &quot;Browse&quot; one."/>
      wxFLP_USE_TEXTCTRL|wxFLP_OPEN|wxFLP_FILE_MUST_EXIST
    </property>
    <event name="wxEVT_FILEPICKER_CHANGED" class="wxFileDirPickerEvent"
        help="Generated when the user changes the file selected in the control either using the button or using text control (see wxFLP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing file path if wxFLP_FILE_MUST_EXIST was given)."/>
  </compinfo>

  <compinfo class="wxDirPickerCtrl" image="dirPicker" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_dirPicker</property>
    <property name="initial_path" type="string_escapes"/>
    <property name="message" type="string_escapes"/>
    <property name="style" type="bitlist">
      <option name="wxDIRP_DEFAULT_STYLE" help="The default style is wxDIRP_DIR_MUST_EXIST and wxDIRP_USE_TEXTCTRL."/>
      <option name="wxDIRP_USE_TEXTCTRL"
        help="Creates a text control to the left of the picker button which is completely managed by the wxDirPickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxDIRP_DIR_MUST_EXIST"
        help="Creates a picker which allows to select only existing directories. wxGTK control always adds this flag internally as it does not support its absence."/>
      <option name="wxDIRP_CHANGE_DIR" help="Change current working directory on each user directory selection change."/>
      <option name="wxDIRP_SMALL"
        help="Use smaller version of the control with a small &quot;...&quot; button instead of the normal &quot;Browse&quot; one."/>
      wxDIRP_DEFAULT_STYLE
    </property>
    <event name="wxEVT_DIRPICKER_CHANGED" class="wxFileDirPickerEvent"
        help="Generated when the user changes the directory selected in the control either using the button or using text control (see wxDIRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing directory path)."/>
  </compinfo>

  <compinfo class="wxFontPickerCtrl" image="fontPicker" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">
      m_fontPicker
    </property>
    <property name="initial_font" type="wxFont"/>
    <property name="min_point_size" type="uint"
        help="Sets the minimum point size value allowed for the user-chosen font">
        0
    </property>
    <property name="max_point_size" type="uint"
        help="Sets the maximum point size value allowed for the user-chosen font. The default value is 100. Note that big fonts can require a lot of memory and CPU time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see wxFNTP_USE_TEXTCTRL), it's a good idea to put a limit to the maximum font size when huge fonts do not make much sense.">
      100
    </property>
    <property name="style" type="bitlist">
      <option name="wxFNTP_DEFAULT_STYLE"
        help="The default style: wxFNTP_FONTDESC_AS_LABEL | wxFNTP_USEFONT_FOR_LABEL."/>
      <option name="wxFNTP_USE_TEXTCTRL"
        help="Creates a text control to the left of the picker button which is completely managed by the wxFontPickerCtrl and which can be used by the user to specify a font (see SetSelectedFont). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxFNTP_FONTDESC_AS_LABEL"
        help="Keeps the label of the button updated with the fontface name and the font size. E.g. choosing &quot;Times New Roman bold, italic with size 10&quot; from the fontdialog, will update the label (overwriting any previous label) with the &quot;Times New Roman, 10&quot; text."/>
      <option name="wxFNTP_USEFONT_FOR_LABEL" help="Uses the currently selected font to draw the label of the button."/>
      wxFNTP_DEFAULT_STYLE
    </property>
    <event name="wxEVT_FONTPICKER_CHANGED" class="wxFontPickerEvent"
        help="Generated when the user changs the font selected in the control either using the button or using text control (see wxFNTP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)."/>
  </compinfo>

  <compinfo class="wxColourPickerCtrl" image="colourPickerIcon" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_colourPicker</property>
    <property name="colour" type="wxColour"/>
    <property name="style" type="bitlist">
      <option name="wxCLRP_DEFAULT_STYLE" help="The default style: 0."/>
      <option name="wxCLRP_USE_TEXTCTRL"
        help="Creates a text control to the left of the picker button which is completely managed by the wxColourPickerCtrl and which can be used by the user to specify a colour. The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
      <option name="wxCLRP_SHOW_LABEL"
        help="Shows the colour in HTML form (AABBCC) as colour button label (instead of no label at all)."/>
      wxCLRP_DEFAULT_STYLE
    </property>
    <event name="wxEVT_COLOURPICKER_CHANGED" class="wxColourPickerEvent"
        help="Generated when the user changes the colour selected in the control either using the button or using text control (see wxCLRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)."/>
  </compinfo>

  <compinfo class="wxDatePickerCtrl" image="datepicker" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_datePicker</property>
    <property name="style" type="bitlist">
      <option name="wxDP_SPIN"
        help="Creates a control without a month calendar drop down but with spin-control-like arrows to change individual date components. This style is not supported by the generic version."/>
      <option name="wxDP_DROPDOWN"
        help="Creates a control with a month calendar drop-down part from which the user can select a date. This style is not supported in OSX/Cocoa native version."/>
      <option name="wxDP_SHOWCENTURY"
        help="Forces display of the century in the default date format. Without this style the century could be displayed, or not, depending on the default date representation in the system. This style is not supported in OSX/Cocoa native version currently."/>
      <option name="wxDP_ALLOWNONE"
        help="With this style, the control allows the user to not enter any valid date at all. Without it - the default - the control always has some valid date. This style is not supported in OSX/Cocoa native version."/>
      <option name="wxDP_DEFAULT"
        help="Creates a control with the style that is best supported for the current platform (currently wxDP_SPIN under Windows and OSX/Cocoa and wxDP_DROPDOWN elsewhere)."/>
      wxDP_DEFAULT|wxDP_SHOWCENTURY
    </property>
    <event name="wxEVT_DATE_CHANGED" class="wxDateEvent" help="Generated when the user changes the current selection in the control."/>
  </compinfo>

  <compinfo class="wxTimePickerCtrl" image="timepicker" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_timePicker</property>
    <property name="style" type="bitlist">
      <option name="wxTP_DEFAULT"
        help="Creates a control with the style that is best supported for the current platform (currently wxDP_SPIN under Windows and wxDP_DROPDOWN elsewhere)."/>
      wxTP_DEFAULT
    </property>
    <event name="wxEVT_TIME_CHANGED" class="wxDateEvent" help="Generated when the user changes the current selection in the control."/>
  </compinfo>

  <compinfo class="wxScrollBar" image="scrollbar" type="widget">
    <inherits class="Integer Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_scrollBar</property>
    <property name="position" help="The position of the scrollbar in scroll units." type="uint">
      0
    </property>
    <property name="range" help="The maximum position of the scrollbar." type="uint">100</property>
    <property name="thumbsize"
        help="The size of the thumb, or visible portion of the scrollbar, in scroll units." type="uint">
      1
    </property>
    <property name="pagesize"
        help="This is the number of scroll units that will be scrolled when the user pages up or down." type="uint">
      1
    </property>
    <property name="style" type="option">
      <option name="wxSB_HORIZONTAL" help="Specifies a horizontal scrollbar."/>
      <option name="wxSB_VERTICAL" help="Specifies a vertical scrollbar."/>
      wxSB_HORIZONTAL
    </property>
    <event name="AllScrollEvents" class="wxScrollEvent" help="Process all scroll events."/>
    <event name="wxEVT_SCROLL_TOP" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_BOTTOM" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_LINEUP" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_LINEDOWN" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_PAGEUP" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_PAGEDOWN" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_THUMBTRACK" class="wxScrollEvent" help="Generated as the user drags the thumbtrack."/>
    <event name="wxEVT_SCROLL_THUMBRELEASE" class="wxScrollEvent" help=""/>
    <event name="wxEVT_SCROLL_CHANGED" class="wxScrollEvent" help="Generated on Windows only."/>
  </compinfo>

  <compinfo class="wxSpinCtrl" image="spin_ctrl" type="widget">
    <inherits class="Integer Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_spinCtrl</property>
    <property name="min" type="int" help="Minimal value.">0</property>
    <property name="max" type="int" help="Maximal value.">10</property>
    <property name="initial" type="int" help="Initial value.">0</property>
    <property name="style" type="bitlist">
      <option name="wxSP_ARROW_KEYS" help="The user can use arrow keys to change the value."/>
      <option name="wxSP_WRAP" help="The value wraps at the minimum and maximum."/>
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxALIGN_LEFT" help="Same as wxTE_LEFT for wxTextCtrl: the text is left aligned."/>
      <option name="wxALIGN_CENTER_HORIZONTAL" help="Same as wxTE_CENTER for wxTextCtrl: the text is centered."/>
      <option name="wxALIGN_RIGHT" help="Same as wxTE_RIGHT for wxTextCtrl: the text is right aligned (this is the default)."/>
      wxSP_ARROW_KEYS
    </property>
    <event name="wxEVT_SPINCTRL" class="wxSpinEvent" help="Generated whenever the numeric value of the spinctrl is updated."/>
    <event name="wxEVT_TEXT" class="wxCommandEvent"
        help="Generated whenever the user modifies the text in the edit part of the spin control directly."/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
        help="Generated when enter is pressed in the edit part of the spin control (which must have wxTE_PROCESS_ENTER style for this event to be generated)."/>
  </compinfo>

  <compinfo class="wxSpinCtrlDouble" image="spin_ctrl_double" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_spinCtrlDouble</property>
    <property name="value" type="string_escapes"></property>
    <property name="min" type="float" help="Minimal value.">
      0
    </property>
    <property name="max" type="float" help="Maximal value.">
      100
    </property>
    <property name="initial" type="float" help="Initial value.">
      0
    </property>
    <property name="inc" type="float" help="Increment value.">
      1
    </property>
    <property name="digits" type="uint" help="The number of digits in the display.">
      0
    </property>
    <property name="style" type="bitlist">
      <option name="wxSP_ARROW_KEYS" help="The user can use arrow keys to change the value."/>
      <option name="wxSP_WRAP" help="The value wraps at the minimum and maximum."/>
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxALIGN_LEFT" help="Same as wxTE_LEFT for wxTextCtrl: the text is left aligned."/>
      <option name="wxALIGN_CENTER_HORIZONTAL"
        help="Same as wxTE_CENTER for wxTextCtrl: the text is centered."/>
      <option name="wxALIGN_RIGHT" help="Same as wxTE_RIGHT for wxTextCtrl: the text is right aligned (this is the default)."/>
      wxSP_ARROW_KEYS
    </property>
    <event name="wxEVT_SPINCTRLDOUBLE" class="wxSpinDoubleEvent" help="Generated whenever the numeric value of the control is updated."/>
    <event name="wxEVT_TEXT" class="wxCommandEvent"
        help="Generated whenever the user modifies the text in the edit part of the spin control directly."/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
        help="Generated when enter is pressed in the edit part of the spin control (which must have wxTE_PROCESS_ENTER style for this event to be generated)."/>
  </compinfo>

  <compinfo class="wxSpinButton" image="spinbtn" type="widget">
    <inherits class="Integer Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_spinBtn</property>
    <property name="style" type="bitlist">
      <option name="wxSP_HORIZONTAL" help="Specifies a horizontal spin button (note that this style is not supported in wxGTK)."/>
      <option name="wxSP_VERTICAL" help="Specifies a vertical spin button."/>
      <option name="wxSP_ARROW_KEYS" help="The user can use arrow keys to change the value."/>
      <option name="wxSP_WRAP" help="The value wraps at the minimum and maximum."/>
    </property>
    <event name="wxEVT_SPIN" class="wxSpinEvent" help="Generated whenever an arrow is pressed."/>
    <event name="wxEVT_SPIN_UP" class="wxSpinEvent" help="Generated when left/up arrow is pressed."/>
    <event name="wxEVT_SPIN_DOWN" class="wxSpinEvent" help="Generated when right/down arrow is pressed."/>
  </compinfo>

  <compinfo class="wxToggleButton" image="toggle_button" type="widget">
    <inherits class="Bitmaps"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="Boolean Validator"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_toggleBtn</property>
    <property name="label" type="string_escapes">MyButton</property>
    <property name="markup" type="bool"
        help="This can be used to apply fonts or colours to different parts of the label.">
      0
    </property>
    <property name="pressed" type="bool">0</property>
    <property name="style" type="bitlist">
      <option name="wxBU_LEFT" help="Left-justifies the label. Windows and GTK+ only."/>
      <option name="wxBU_TOP" help="Aligns the label to the top of the button. Windows and GTK+ only."/>
      <option name="wxBU_RIGHT" help="Right-justifies the bitmap label. Windows and GTK+ only."/>
      <option name="wxBU_BOTTOM" help="Aligns the label to the bottom of the button. Windows and GTK+ only."/>
      <option name="wxBU_EXACTFIT"
        help="By default, all buttons are made of at least the standard button size, even if their contents is small enough to fit into a smaller size. This is done for consistency as most platforms use buttons of the same size in the native dialogs, but can be overridden by specifying this flag. If it is given, the button will be made just big enough for its contents. Notice that under MSW the button will still have at least the standard height, even with this style, if it has a non-empty label."/>
      <option name="wxBU_NOTEXT"
        help="Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too."/>
      <option name="wxBORDER_NONE"
        help="Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa and OSX/Carbon ports but in the latter only applies to buttons with bitmaps and using bitmap of one of the standard sizes only, namely 128*128, 48*48, 24*24 or 16*16. In all the other cases wxBORDER_NONE is ignored under OSX/Carbon (these restrictions don't exist in OSX/Cocoa however)."/>
    </property>
    <event name="wxEVT_TOGGLEBUTTON" class="wxCommandEvent" help=""/>
  </compinfo>

  <compinfo class="wxBitmapComboBox" image="bmp_combo_box" type="widget">
    <inherits class="Choice Validator"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_bmpComboBox</property>
    <property name="choices" type="stringlist" help="Contents of the Combo Box"></property>
    <property name="selection_string" type="string_escapes"
        help="Selects the item with the specified string in the control. Note that this is case-insensitive, i.e. the string is compared with all the elements of the control case-insensitively and the first matching entry is selected, even if it doesn't have exactly the same case as this string and there is an exact match afterwards.">
    </property>
    <property name="selection_int" type="int"
        help="Sets the selection to the value unless it is -1. Ignored if the selection_string property contains a value.">
      -1
    </property>
    <property name="style" type="bitlist">
      <option name="wxCB_READONLY"
        help="Creates a combobox without a text editor. On some platforms the control may appear very different when this style is used."/>
      <option name="wxCB_SORT" help="Sorts the entries alphabetically."/>
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls). Windows only."/>
    </property>
    <event name="wxEVT_COMBOBOX" class="wxCommandEvent"
        help="Generated when an item in the list is selected. Calling GetValue() to return the new value of the selection."/>
    <event name="wxEVT_TEXT" class="wxCommandEvent" help="Generated when the combobox text changes."/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent" help="Generated when <RETURN> is pressed in the combobox."/>
  </compinfo>

  <compinfo class="wxHyperlinkCtrl" image="hyperlink_ctrl" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_hyperlink</property>
    <property name="label" type="string_escapes"
        help="Text of the hyperlink">
      GitHub Website
    </property>
    <property name="url" type="string_escapes"
        help="Target of the hyperlink">
      https://github.com/
    </property>
    <property name="hover_color" type="wxColour"
        help="The colour used to print the label of the hyperlink when the mouse is over the control."/>
    <property name="normal_color" type="wxColour"
        help="The colour used to print the label when the link has never been clicked before (i.e. the link has not been visited) and the mouse is not over the control."/>
    <property name="visited_color" type="wxColour"
        help="The colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been visited)."/>
    <property name="style" type="bitlist">
      <option name="wxHL_ALIGN_LEFT" help="Align the text to the left."/>
      <option name="wxHL_ALIGN_RIGHT" help="Align the text to the right."/>
      <option name="wxHL_ALIGN_CENTRE" help="Center the text (horizontally)."/>
      <option name="wxHL_CONTEXTMENU"
        help="Pop up a context menu when the hyperlink is right-clicked. The context menu contains a &quot;Copy URL&quot; menu item which is automatically handled by the hyperlink and which just copies in the clipboard the URL (not the label) of the control."/>
      <option name="wxHL_DEFAULT_STYLE"
        help="The default style for wxHyperlinkCtrl: wxNO_BORDER | wxHL_CONTEXTMENU | wxHL_ALIGN_CENTRE."/>
      wxHL_DEFAULT_STYLE
    </property>
    <event name="wxEVT_HYPERLINK" class="wxHyperlinkEvent"
        help="If this event is not handled (or it's skipped; see wxEvent::Skip), then a call to wxLaunchDefaultBrowser is done with the hyperlink's URL."/>
  </compinfo>

  <compinfo class="wxSearchCtrl" image="search" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_searchCtrl</property>
    <property name="value" type="string_escapes" help="Initial value"/>
    <property name="search_button" type="bool" help="Shows or hides the search button.">1</property>
    <property name="cancel_button" type="bool" help="Shows or hides the cancel button.">0</property>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB"
        help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_NOHIDESEL"
        help="By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms."/>
      <option name="wxTE_LEFT" help="The text in the control will be left-justified (default)."/>
      <option name="wxTE_CENTER" help="The text in the control will be centered (currently wxMSW and wxGTK2 only). "/>
      <option name="wxTE_RIGHT" help="The text in the control will be right-justified (currently wxMSW and wxGTK2 only)."/>
    </property>
    <event name="wxEVT_TEXT" class="wxCommandEvent"
        help="Generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)"/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
        help="Generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)."/>
    <event name="wxEVT_SEARCHCTRL_SEARCH_BTN" class="wxCommandEvent"
        help="Generated when the search button is clicked. Note that this does not initiate a search on its own, you need to perform the appropriate action in your event handler. You may use event.GetString() to retrieve the string to search for in the event handler code."/>
    <event name="wxEVT_SEARCHCTRL_CANCEL_BTN" class="wxCommandEvent" help="Generated when the cancel button is clicked."/>
  </compinfo>

  <compinfo class="wxHtmlWindow" image="htmlwin" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_htmlWin</property>
    <property name="style" type="bitlist">
      <option name="wxHW_SCROLLBAR_NEVER" help="Never display scrollbars, not even when the page is larger than the window."/>
      <option name="wxHW_SCROLLBAR_AUTO" help="Display scrollbars only if page's size exceeds window's size."/>
      <option name="wxHW_NO_SELECTION" help="Don't allow the user to select text."/>
      wxHW_SCROLLBAR_AUTO
    </property>
    <event name="wxEVT_HTML_CELL_CLICKED" class="wxHtmlCellEvent" help=""/>
    <event name="wxEVT_HTML_CELL_HOVER" class="wxHtmlCellEvent" help=""/>
    <event name="wxEVT_HTML_LINK_CLICKED" class="wxHtmlLinkEvent" help=""/>
  </compinfo>

  <compinfo class="wxRichTextCtrl" image="richtextctrl" type="expanded_widget">
    <inherits class="wxWindow">
      <property name="window_style">wxVSCROLL | wxHSCROLL | wxNO_BORDER | wxWANTS_CHARS</property>
    </inherits>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_richText</property>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER"
        help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB"
        help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_READONLY" help="The text will not be user-editable."/>
      <option name="wxTE_AUTO_URL" help="Highlight the URLs and generate the wxTextUrl events when mouse events occur over them."/>
    </property>
    <event name="wxEVT_TEXT" class="wxCommandEvent"
        help="Generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)"/>
    <event name="wxEVT_TEXT_ENTER" class="wxCommandEvent"
        help="Generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)."/>
    <event name="wxEVT_TEXT_URL" class="wxTextUrlEvent" help="Generated when a mouse event occurrs over a URL in the text control (wxMSW and wxGTK2 only)"/>
    <event name="wxEVT_TEXT_MAXLEN" class="wxCommandEvent"
        help="Generated when the user tries to enter more text into the control than the limit set by SetMaxLength."/>
    <event name="wxEVT_RICHTEXT_CHARACTER" class="wxCommandEvent"
        help="Generated when the user presses a character key. Valid event functions: GetFlags, GetPosition, GetCharacter."/>
    <event name="wxEVT_RICHTEXT_DELETE" class="wxCommandEvent"
        help="Generated when the user presses the backspace or delete key. Valid event functions: GetFlags, GetPosition."/>
    <event name="wxEVT_RICHTEXT_RETURN" class="wxCommandEvent"
        help="Generated when the user presses the return key. Valid event functions: GetFlags, GetPosition."/>
    <event name="wxEVT_RICHTEXT_STYLE_CHANGED" class="wxCommandEvent"
        help="Generated when styling has been applied to the control. Valid event functions: GetPosition, GetRange."/>
    <event name="wxEVT_RICHTEXT_STYLESHEET_CHANGED" class="wxCommandEvent"
        help="Generated when the control's stylesheet has changed, for example the user added, edited or deleted a style. Valid event functions: GetRange, GetPosition."/>
    <event name="wxEVT_RICHTEXT_STYLESHEET_REPLACING" class="wxCommandEvent"
        help="Generated when the control's stylesheet is about to be replaced, for example when a file is loaded into the control. Valid event functions: Veto, GetOldStyleSheet, GetNewStyleSheet."/>
    <event name="wxEVT_RICHTEXT_STYLESHEET_REPLACED" class="wxCommandEvent"
        help="Generated when the control's stylesheet has been replaced, for example when a file is loaded into the control. Valid event functions: GetOldStyleSheet, GetNewStyleSheet."/>
    <event name="wxEVT_RICHTEXT_CONTENT_INSERTED" class="wxCommandEvent"
        help="Generated when content has been inserted into the control. Valid event functions: GetPosition, GetRange."/>
    <event name="wxEVT_RICHTEXT_CONTENT_DELETED" class="wxCommandEvent"
        help="Generated when content has been deleted from the control. Valid event functions: GetPosition, GetRange."/>
  </compinfo>

  <compinfo class="wxStyledTextCtrl" image="scintilla" type="expanded_widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string" >m_scintilla</property>
    <property name="folding" type="bool" help="Enable folding.">1</property>
    <property name="line_numbers" type="bool" help="Show line numbers.">1</property>
    <property name="indentation_guides" type="bool" help="Show indentation guides.">1</property>
    <property name="use_tabs" type="bool"
        help="Use tabs for indenting, instead of spaces.">
      1
    </property>
    <property name="tab_width" type="string"
        help="The number of spaces per tab character.">
      4
    </property>
    <property name="tab_indents" type="bool"
        help="The tab key always indents, use tabs or spaces, instead of always inserting a tab character.">
      1
    </property>
    <property name="backspace_unindents" type="bool"
        help="The backspace key unindents, instead of just deleting one space.">
      1
    </property>
    <property name="view_eol" type="bool"
        help="Show end of line characters.">
      0
    </property>
    <property name="view_whitespace" type="bool"
        help="Show whitespace characters.">
      0
    </property>
    <property name="read_only" type="bool"
        help="Set ReadOnly Mode. Disables editing if set to true.">
      0
    </property>
    <event name="wxEVT_STC_AUTOCOMP_CANCELLED" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_AUTOCOMP_CHAR_DELETED" class="wxStyledTextEvent" help="Generated when the user deleted a character while autocompletion list was active."/>
    <event name="wxEVT_STC_AUTOCOMP_COMPLETED" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_AUTOCOMP_SELECTION" class="wxStyledTextEvent" help="Generated when the user has selected an item in an autocompletion list. The event is sent before the selection is inserted."/>
    <event name="wxEVT_STC_AUTOCOMP_SELECTION_CHANGE" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_CALLTIP_CLICK" class="wxStyledTextEvent" help="Generated when the user clicks on a calltip. This event can be used to display the next function prototype when a function name is overloaded with different arguments."/>
    <event name="wxEVT_STC_CHANGE" class="wxStyledTextEvent" help="Generated when the text (not the style) of the document changes. "/>
    <event name="wxEVT_STC_CHARADDED" class="wxStyledTextEvent" help="Generated when the user types an ordinary text character (as opposed to a command character) that is entered into the text. You can use this to decide to display a call tip or an auto completion list."/>
    <event name="wxEVT_STC_CLIPBOARD_COPY" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_CLIPBOARD_PASTE" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_DOUBLECLICK" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_DO_DROP" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_DRAG_OVER" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_DWELLEND" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_DWELLSTART" class="wxStyledTextEvent" help="Generated when the user keeps the mouse in one position for the dwell period."/>
    <event name="wxEVT_STC_HOTSPOT_CLICK" class="wxStyledTextEvent" help="Generated when the user clicks on text that is in a style with the hotspot attribute set."/>
    <event name="wxEVT_STC_HOTSPOT_DCLICK" class="wxStyledTextEvent" help="Generated when the user double clicks on text that is in a style with the hotspot attribute set."/>
    <event name="wxEVT_STC_HOTSPOT_RELEASE_CLICK" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_INDICATOR_CLICK" class="wxStyledTextEvent" help="Generated when the user clicks the mouse on text that has an indicator."/>
    <event name="wxEVT_STC_INDICATOR_RELEASE" class="wxStyledTextEvent" help="Generated when the user releases the mouse on text that has an indicator."/>
    <event name="wxEVT_STC_MACRORECORD" class="wxStyledTextEvent" help="Generated each time a recordable change occurs,"/>
    <event name="wxEVT_STC_MARGINCLICK" class="wxStyledTextEvent" help="Generated when the mouse was clicked inside a margin that was marked as sensitive."/>
    <event name="wxEVT_STC_MARGIN_RIGHT_CLICK" class="wxStyledTextEvent" help="Generated when the mouse was right clicked inside a margin that was marked as sensitive."/>
    <event name="wxEVT_STC_MODIFIED" class="wxStyledTextEvent" help="Generated when the text or styling of the document changes or is about to change."/>
    <event name="wxEVT_STC_NEEDSHOWN" class="wxStyledTextEvent" help="Generated when a range of lines that is currently invisible should be made visible. "/>
    <event name="wxEVT_STC_PAINTED" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_ROMODIFYATTEMPT" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_SAVEPOINTLEFT" class="wxStyledTextEvent" help="Generated when the save point is left."/>
    <event name="wxEVT_STC_SAVEPOINTREACHED" class="wxStyledTextEvent" help="Generated when the save point is entered."/>
    <event name="wxEVT_STC_START_DRAG" class="wxStyledTextEvent"/>
    <event name="wxEVT_STC_STYLENEEDED" class="wxStyledTextEvent" help="Generated when about to display or print text that requires styling."/>
    <event name="wxEVT_STC_UPDATEUI" class="wxStyledTextEvent" help="Generated when either the text or styling of the document has changed or the selection range or scroll position has changed."/>
    <event name="wxEVT_STC_USERLISTSELECTION" class="wxStyledTextEvent" help="Generated when the user has selected an item in a user list. "/>
    <event name="wxEVT_STC_ZOOM" class="wxStyledTextEvent" help="Generated when the user zooms the display using the keyboard."/>
  </compinfo>

  <compinfo class="wxCalendarCtrl" image="calendar" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_calendar</property>
    <property name="style" type="bitlist">
      <option name="wxCAL_SUNDAY_FIRST" help="Show Sunday as the first day in the week (not in wxGTK)"/>
      <option name="wxCAL_MONDAY_FIRST" help="Show Monday as the first day in the week (not in wxGTK)"/>
      <option name="wxCAL_SHOW_HOLIDAYS" help="Highlight holidays in the calendar (only generic)"/>
      <option name="wxCAL_NO_YEAR_CHANGE" help="Disable the year changing (deprecated, only generic)"/>
      <option name="wxCAL_NO_MONTH_CHANGE" help="Disable the month (and, implicitly, the year) changing"/>
      <option name="wxCAL_SHOW_SURROUNDING_WEEKS"
        help="Show the neighbouring weeks in the previous and next months (only generic, always on for the native controls)"/>
      <option name="wxCAL_SEQUENTIAL_MONTH_SELECTION"
        help="Use alternative, more compact, style for the month and year selection controls (only generic)"/>
      <option name="wxCAL_SHOW_WEEK_NUMBERS" help="Show week numbers on the left side of the calendar (not in generic)"/>
      wxCAL_SHOW_HOLIDAYS
    </property>
    <event name="wxEVT_CALENDAR_DOUBLECLICKED" class="wxCalendarEvent" help="A day was double clicked in the calendar."/>
    <event name="wxEVT_CALENDAR_SEL_CHANGED" class="wxCalendarEvent" help="The selected date changed."/>
    <event name="wxEVT_CALENDAR_PAGE_CHANGED" class="wxCalendarEvent" help="The selected month (and/or year) changed."/>
    <event name="wxEVT_CALENDAR_DAY_CHANGED" class="wxCalendarEvent" help="The selected day changed."/>
    <event name="wxEVT_CALENDAR_MONTH_CHANGED" class="wxCalendarEvent" help="The selected month changed."/>
    <event name="wxEVT_CALENDAR_YEAR_CHANGED" class="wxCalendarEvent" help="The selected year changed."/>
    <event name="EVT_CALENDAR_WEEK_CLICKED" class="wxCalendarEvent" help="User clicked on the week day header (only generic)."/>
    <event name="wxEVT_CALENDAR_WEEK_CLICKED" class="wxCalendarEvent" help="User clicked on the week of the year number (only generic)."/>
  </compinfo>

  <compinfo class="wxGenericDirCtrl" image="genericdir_ctrl" type="expanded_widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_genericDirCtrl</property>
    <property name="defaultfolder" type="string_escapes" help="Initial Directory."/>
    <property name="filter" type="string_escapes"
        help="A filter string, using the same syntax as that for wxFileDialog. This may be empty if filters are not being used. Example: &quot;All files (*.*)|*.*|JPEG files (*.jpg)|*.jpg&quot;."/>
    <property name="defaultfilter" type="uint"
        help="The zero-indexed default filter setting.">
      0
    </property>
    <property name="show_hidden" type="bool"
        help="Show hidden files">
      0
    </property>
    <property name="style" type="bitlist">
      <option name="wxDIRCTRL_DIR_ONLY" help="Only show directories, and not files."/>
      <option name="wxDIRCTRL_3D_INTERNAL" help="Use 3D borders for internal controls."/>
      <option name="wxDIRCTRL_SELECT_FIRST" help="When setting the default path, select the first file in the directory."/>
      <option name="wxDIRCTRL_SHOW_FILTERS" help="Show the drop-down filter list."/>
      <option name="wxDIRCTRL_EDIT_LABELS" help="Allow the folder and file labels to be editable."/>
      <option name="wxDIRCTRL_MULTIPLE" help="Allows multiple files and folders to be selected simultaneously"/>
      wxDIRCTRL_3D_INTERNAL
    </property>
    <event name="wxEVT_DIRCTRL_SELECTIONCHANGED" class="wxCommandEvent"
        help="Selected directory has changed. Notice that this event is generated even for the changes done by the program itself and not only those done by the user."/>
    <event name="wxEVT_DIRCTRL_FILEACTIVATED" class="wxCommandEvent" help="The user activated a file by double-clicking or pressing Enter."/>
  </compinfo>

  <compinfo class="wxFileCtrl" image="wxFileCtrl" type="expanded_widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_fileCtrl</property>
    <property name="initial_folder" type="string_escapes" help="Initial folder."/>
    <property name="initial_filename" type="string_escapes" help="Initial file name."/>
    <property name="wildcard" type="string_escapes"
        help="Sets the wildcard, which can contain multiple file types, for example: &quot;BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif&quot;."/>
    <property name="filter_index" type="uint"
        help="Sets the current filter (wildcard) index, starting from zero."/>
    <property name="style" type="bitlist">
      <option name="wxFC_OPEN"
        help="Creates a file control suitable for opening files. Cannot be used with wxFC_SAVE."/>
      <option name="wxFC_SAVE"
        help="Creates an file control suitable for saving files. Cannot be used with wxFC_OPEN."/>
      <option name="wxFC_MULTIPLE"
        help="For wxFC_OPEN control only. Allows selecting multiple files. Cannot be combined with wxFC_SAVE."/>
      <option name="wxFC_NOSHOWHIDDEN"
        help="Hides the &quot;Show Hidden Files&quot; checkbox. Ignored on wxGTK"/>
      wxFC_OPEN
    </property>
    <property name="show_hidden" type="bool"
        help="Show hidden files">
      0
    </property>
    <event name="wxEVT_FILECTRL_FILEACTIVATED" class="wxCommandEvent"
        help="The user activated a file(by double-clicking or pressing Enter)."/>
    <event name="wxEVT_FILECTRL_SELECTIONCHANGED" class="wxCommandEvent"
        help="The user changed the current selection(by selecting or deselecting a file) ."/>
    <event name="wxEVT_FILECTRL_FOLDERCHANGED" class="wxCommandEvent"
        help="The current folder of the file control has been changed."/>
    <event name="wxEVT_FILECTRL_FILTERCHANGED" class="wxCommandEvent"
        help="The current file filter of the file control has been changed."/>
</compinfo>

  <compinfo class="wxTreeCtrl" image="tree_ctrl" type="widget">
    <inherits class="wxTreeCtrlBase"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_treeCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxTR_EDIT_LABELS" help="Use this style if you wish the user to be able to edit labels in the tree control."/>
      <option name="wxTR_NO_BUTTONS" help="For convenience to document that no buttons are to be drawn."/>
      <option name="wxTR_HAS_BUTTONS" help="Use this style to show + and - buttons to the left of parent items."/>
      <option name="wxTR_TWIST_BUTTONS" help="Selects alternative style of +/- buttons and shows rotating (&quot;twisting&quot;) arrows instead. Currently this style is only implemented under Microsoft Windows Vista and later Windows versions and is ignored under the other platforms. Notice that under Vista this style results in the same appearance as used by the tree control in Explorer and other built-in programs and so using it may be preferable to the default style."/>
      <option name="wxTR_NO_LINES" help="Use this style to hide vertical level connectors."/>
      <option name="wxTR_FULL_ROW_HIGHLIGHT" help="Use this style to have the background colour and the selection highlight extend over the entire horizontal row of the tree control window. (This flag is ignored under Windows unless you specify wxTR_NO_LINES as well.)"/>
      <option name="wxTR_LINES_AT_ROOT" help="Use this style to show lines between root nodes. Only applicable if wxTR_HIDE_ROOT is set and wxTR_NO_LINES is not set."/>
      <option name="wxTR_HIDE_ROOT" help="Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes."/>
      <option name="wxTR_ROW_LINES" help="Use this style to draw a contrasting border between displayed rows."/>
      <option name="wxTR_HAS_VARIABLE_ROW_HEIGHT" help="Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset. Generic only."/>
      <option name="wxTR_SINGLE" help="For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default."/>
      <option name="wxTR_MULTIPLE" help="Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected."/>
      <option name="wxTR_DEFAULT_STYLE" help="The set of flags that are closest to the defaults for the native control for a particular toolkit."/>
      wxTR_DEFAULT_STYLE
    </property>
    <event name="wxEVT_TREE_GET_INFO" class="wxTreeEvent" help="Request information from the application."/>
    <event name="wxEVT_TREE_SET_INFO" class="wxTreeEvent" help="Information is being supplied."/>
    <event name="wxEVT_TREE_ITEM_GETTOOLTIP" class="wxTreeEvent" help="The opportunity to set the item tooltip is being given to the application (call wxTreeEvent::SetToolTip). Windows only."/>
    <event name="wxEVT_TREE_STATE_IMAGE_CLICK" class="wxTreeEvent" help="The state image has been clicked. Windows only."/>
  </compinfo>

  <compinfo class="wxGrid" image="grid" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_grid</property>
    <category name="Grid">
      <property name="rows" type="uint" help="Number of Rows.">5</property>
      <property name="cols" type="uint" help="Number of Columns.">5</property>
      <property name="editing" type="bool" help="Allow editing grid contents.">1</property>
      <property name="grid_lines" type="bool" help="Show grid lines.">1</property>
      <property name="grid_line_color" type="wxColour" help="The colour used to draw grid lines."/>
      <property name="drag_grid_size" type="bool" help="Allow sizing rows and columns by dragging gridlines.">0</property>
      <property name="margin_width" type="uint" help="A grid may occupy more space than needed for its columns. This function allows to set how big this extra space is.">0</property>
      <property name="margin_height" type="uint" help="A grid may occupy more space than needed for its rows. This function allows to set how big this extra space is.">0</property>
    </category>
    <category name="Columns">
      <property name="column_sizes" type="uintlist" help="Comma separated list of column sizes. Note: wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large."/>
      <property name="autosize_cols" type="bool" help="Automatically sizes all columns to fit their contents. wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large.">0</property>
      <property name="drag_col_move" type="bool" help="Allow moving columns by dragging.">0</property>
      <property name="drag_col_size" type="bool" help="Allow sizing columns by dragging.">1</property>
      <property name="col_label_size" type="uint" help="Height of column labels">30</property>
      <property name="col_label_values" type="stringlist" help="List of column labels."></property>
      <property name="col_label_horiz_alignment" type="option" help="Horizontal alignment of column label text.">
        <option name="wxALIGN_LEFT" help="Align labels left."/>
        <option name="wxALIGN_CENTER" help="Align labels centered."/>
        <option name="wxALIGN_RIGHT" help="Align labels right."/>
        wxALIGN_CENTER
      </property>
      <property name="col_label_vert_alignment" type="option" help="Vertical alignment of column label text.">
        <option name="wxALIGN_TOP" help="Align labels top."/>
        <option name="wxALIGN_CENTER" help="Align labels centered."/>
        <option name="wxALIGN_BOTTOM" help="Align labels bottom."/>
        wxALIGN_CENTER
      </property>
    </category>
    <category name="Rows">
      <property name="row_sizes" type="uintlist" help="Comma separated list of row sizes. Note: wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large."/>
      <property name="autosize_rows" type="bool" help="Automatically sizes all rows to fit their contents. wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large.">0</property>
      <property name="drag_row_size" type="bool" help="Allow sizing rows by dragging.">1</property>
      <property name="row_label_size" type="uint" help="Width of row labels">80</property>
      <property name="row_label_values" type="stringlist" help="List of row labels."></property>
      <property name="row_label_horiz_alignment" type="option" help="Horizontal alignment of row label text.">
        <option name="wxALIGN_LEFT" help="Align labels left."/>
        <option name="wxALIGN_CENTER" help="Align labels centered."/>
        <option name="wxALIGN_RIGHT" help="Align labels right."/>
        wxALIGN_CENTER
      </property>
      <property name="row_label_vert_alignment" type="option" help="Vertical alignment of row label text.">
        <option name="wxALIGN_TOP" help="Align labels top."/>
        <option name="wxALIGN_CENTER" help="Align labels centered."/>
        <option name="wxALIGN_BOTTOM" help="Align labels bottom."/>
        wxALIGN_CENTER
      </property>
    </category>
      <category name="Label Appearance">
      <property name="label_bg" type="wxColour" help="Background color for row and column labels."/>
      <property name="label_font" type="wxFont" help="Font for row and column labels."/>
      <property name="label_text" type="wxColour" help="Colour for row and column label text."/>
    </category>
    <category name="Cell Defaults">
      <property name="cell_bg" type="wxColour" help="Default cell background color."/>
      <property name="cell_font" type="wxFont" help="Default cell font."/>
      <property name="cell_text" type="wxColour" help="Default cell text color."/>
      <property name="cell_horiz_alignment" type="option" help="Default horizontal alignment of cell values.">
        <option name="wxALIGN_LEFT" help="Align left."/>
        <option name="wxALIGN_CENTER" help="Align centered."/>
        <option name="wxALIGN_RIGHT" help="Align right."/>
        wxALIGN_LEFT
      </property>
      <property name="cell_vert_alignment" type="option" help="Default vertical alignment of cell values.">
        <option name="wxALIGN_TOP" help="Align top."/>
        <option name="wxALIGN_CENTER" help="Align centered."/>
        <option name="wxALIGN_BOTTOM" help="Align bottom."/>
        wxALIGN_TOP
      </property>
    </category>
    <event name="wxEVT_GRID_CELL_LEFT_CLICK" class="wxGridEvent" help="The user clicked a cell with the left mouse button."/>
    <event name="wxEVT_GRID_CELL_RIGHT_CLICK" class="wxGridEvent" help="The user clicked a cell with the right mouse button."/>
    <event name="wxEVT_GRID_CELL_LEFT_DCLICK" class="wxGridEvent" help="The user double-clicked a cell with the left mouse button."/>
    <event name="wxEVT_GRID_CELL_RIGHT_DCLICK" class="wxGridEvent" help="The user double-clicked a cell with the right mouse button."/>
    <event name="wxEVT_GRID_LABEL_LEFT_CLICK" class="wxGridEvent" help="The user clicked a label with the left mouse button."/>
    <event name="wxEVT_GRID_LABEL_RIGHT_CLICK" class="wxGridEvent" help="The user clicked a label with the right mouse button."/>
    <event name="wxEVT_GRID_LABEL_LEFT_DCLICK" class="wxGridEvent" help="The user double-clicked a label with the left mouse button."/>
    <event name="wxEVT_GRID_LABEL_RIGHT_DCLICK" class="wxGridEvent" help="The user double-clicked a label with the right mouse button."/>
    <event name="wxEVT_GRID_CELL_CHANGED" class="wxGridEvent" help="The user changed the data in a cell."/>
    <event name="wxEVT_GRID_SELECT_CELL" class="wxGridEvent" help="The user moved to, and selected a cell."/>
    <event name="wxEVT_GRID_EDITOR_HIDDEN" class="wxGridEvent" help="The editor for a cell was hidden."/>
    <event name="wxEVT_GRID_EDITOR_SHOWN" class="wxGridEvent" help="The editor for a cell was shown."/>
    <event name="wxEVT_GRID_COL_SIZE" class="wxGridSizeEvent" help="The user resized a column by dragging it."/>
    <event name="wxEVT_GRID_ROW_SIZE" class="wxGridSizeEvent" help="The user resized a row by dragging it."/>
    <event name="wxEVT_GRID_RANGE_SELECT" class="wxGridRangeSelectEvent" help="The user selected a group of contiguous cells."/>
    <event name="wxEVT_GRID_EDITOR_CREATED" class="wxGridEditorCreatedEvent" help="The editor for a cell was created."/>
  </compinfo>

  <compinfo class="wxTreeListCtrl" image="treelistctrl" type="treelistctrl">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_treeListCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxTL_SINGLE" help="Single selection, this is the default."/>
      <option name="wxTL_MULTIPLE" help="Allow multiple selection."/>
      <option name="wxTL_CHECKBOX" help="Show the usual, 2 state, checkboxes for the items in the first column."/>
      <option name="wxTL_3STATE" help="Show the checkboxes that can possibly be set by the program, but not the user, to a third, undetermined, state, for the items in the first column. Implies wxTL_CHECKBOX."/>
      <option name="wxTL_USER_3STATE" help="Same as wxTL_3STATE but the user can also set the checkboxes to the undetermined state. Implies wxTL_3STATE."/>
      <option name="wxTL_DEFAULT_STYLE" help="Style used by the control by default, just wxTL_SINGLE currently."/>
      wxTL_DEFAULT_STYLE
    </property>
    <event name="wxEVT_TREELIST_SELECTION_CHANGED" class="wxTreeListEvent" help="In the single selection case the item indicated by the event has been selected and previously selected item, if any, was deselected. In multiple selection case, the selection of this item has just changed (it may have been either selected or deselected) but notice that the selection of other items could have changed as well, use wxTreeListCtrl::GetSelections() to retrieve the new selection if necessary."/>
    <event name="wxEVT_TREELIST_ITEM_EXPANDING" class="wxTreeListEvent" help="This event is sent before the expansion occurs and can be vetoed to prevent it from happening."/>
    <event name="wxEVT_TREELIST_ITEM_EXPANDED" class="wxTreeListEvent" help="This event is sent after the expansion occurs and can't be vetoed."/>
    <event name="wxEVT_TREELIST_ITEM_CHECKED" class="wxTreeListEvent" help="You can use wxTreeListCtrl::GetCheckedState() to retrieve the new item state and wxTreeListEvent::GetOldCheckedState() to get the previous one."/>
    <event name="wxEVT_TREELIST_ITEM_ACTIVATED" class="wxTreeListEvent" help="Generated when the user double clicks the item or activating it from the keyboard."/>
    <event name="wxEVT_TREELIST_ITEM_CONTEXT_MENU" class="wxTreeListEvent" help=""/>
    <event name="wxEVT_TREELIST_COLUMN_SORTED" class="wxTreeListEvent" help="The event doesn't carry the sort direction, use GetSortColumn() method if you need to know it."/>
  </compinfo>

  <compinfo class="TreeListCtrlColumn" image="treelistctrlcolumn" type="treelistctrlcolumn">
    <property name="var_name" type="string_escapes" help="The column label.">Column</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="width" type="editoption" help="The width of the column in pixels or the special wxCOL_WIDTH_AUTOSIZE value indicating that the column should adjust to its contents. Notice that the first column is special and will be always resized to fill all the space not taken by the other columns, i.e. the width specified here is ignored for it.">
      <option name="wxCOL_WIDTH_DEFAULT" help="Special value used for column width meaning unspecified or default."/>
      <option name="wxCOL_WIDTH_AUTOSIZE" help="Size the column automatically to fit all values.&#10;&#10;Note:&#10;On OS X, this style is only implemented in the Cocoa build on OS X >= 10.5; it behaves identically to wxCOL_WIDTH_DEFAULT otherwise."/>
      wxCOL_WIDTH_DEFAULT
    </property>
    <property name="alignment" type="option" help="Alignment of both the column header and its items.">
      <option name="wxALIGN_LEFT" help="Align the item to the left."/>
      <option name="wxALIGN_RIGHT" help="Align the item to the right."/>
      <option name="wxALIGN_CENTER" help="Align the item to the center."/>
      wxALIGN_LEFT
    </property>
    <property name="flag" type="bitlist">
      <option name="wxCOL_RESIZABLE" help="Column can be resized (included in default flags)."/>
      <option name="wxCOL_SORTABLE" help="Column can be clicked to toggle the sort order by its contents."/>
      <option name="wxCOL_REORDERABLE" help="Column can be dragged to change its order (included in default)."/>
      <option name="wxCOL_HIDDEN" help="Column is not shown at all."/>
      wxCOL_RESIZABLE
    </property>
  </compinfo>

  <compinfo class="wxDataViewCtrl" image="dataviewtree_ctrl" type="dataviewctrl" >
    <inherits class="wxControl"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_dataViewCtrl</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="style" type="bitlist">
      <option name="wxDV_SINGLE" help="Single selection mode. This is the default."/>
      <option name="wxDV_MULTIPLE" help="Multiple selection mode."/>
      <option name="wxDV_ROW_LINES" help="Use alternating colours for rows if supported by platform and theme. Currently only supported by the native GTK and OS X implementations but not by the generic one."/>
      <option name="wxDV_HORIZ_RULES" help="Display the separator lines between rows"/>
      <option name="wxDV_VERT_RULES" help="Display the separator lines between columns."/>
      <option name="wxDV_VARIABLE_LINE_HEIGHT" help="Allow variable line heights. This can be inefficient when displaying large number of items."/>
      <option name="wxDV_NO_HEADER" help="Do not show column headers (which are shown by default)."/>
    </property>
    <template name="generated_event_handlers"></template>
    <event name="wxEVT_DATAVIEW_SELECTION_CHANGED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_ACTIVATED" class="wxDataViewEvent" help="This event is triggered by double clicking an item or pressing some special key (usually 'Enter') when it is focused."/>
    <event name="wxEVT_DATAVIEW_ITEM_START_EDITING" class="wxDataViewEvent" help="This event can be vetoed in order to prevent editing on an item by item basis."/>
    <event name="wxEVT_DATAVIEW_ITEM_EDITING_STARTED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EDITING_DONE" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_COLLAPSING" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_COLLAPSED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EXPANDING" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EXPANDED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_VALUE_CHANGED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_CONTEXT_MENU" class="wxDataViewEvent" help="Generated when the user right clicks inside the control. Notice that this menu is generated even if the click didn't occur on any valid item, in this case wxDataViewEvent::GetItem() simply returns an invalid item."/>
    <event name="wxEVT_DATAVIEW_COLUMN_HEADER_CLICK" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK" class="wxDataViewEvent" help="Notice that currently this event is not generated in the native OS X versions of the control."/>
    <event name="wxEVT_DATAVIEW_COLUMN_SORTED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_COLUMN_REORDERED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_BEGIN_DRAG" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_DROP" class="wxDataViewEvent" help=""/>
  </compinfo>

  <compinfo class="wxDataViewTreeCtrl" image="dataviewtree_ctrl" type="dataviewtreectrl" >
    <inherits class="wxControl"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_dataViewTreeCtrl</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="style" type="bitlist">
      <option name="wxDV_SINGLE" help="Single selection mode. This is the default."/>
      <option name="wxDV_MULTIPLE" help="Multiple selection mode."/>
      <option name="wxDV_ROW_LINES" help="Use alternating colours for rows if supported by platform and theme. Currently only supported by the native GTK and OS X implementations but not by the generic one."/>
      <option name="wxDV_HORIZ_RULES" help="Display the separator lines between rows"/>
      <option name="wxDV_VERT_RULES" help="Display the separator lines between columns."/>
      <option name="wxDV_VARIABLE_LINE_HEIGHT" help="Allow variable line heights. This can be inefficient when displaying large number of items."/>
      <option name="wxDV_NO_HEADER" help="Do not show column headers (which are shown by default)."/>
    </property>
    <template name="generated_event_handlers"></template>
    <event name="wxEVT_DATAVIEW_SELECTION_CHANGED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_ACTIVATED" class="wxDataViewEvent" help="This event is triggered by double clicking an item or pressing some special key (usually 'Enter') when it is focused."/>
    <event name="wxEVT_DATAVIEW_ITEM_START_EDITING" class="wxDataViewEvent" help="This event can be vetoed in order to prevent editing on an item by item basis."/>
    <event name="wxEVT_DATAVIEW_ITEM_EDITING_STARTED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EDITING_DONE" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_COLLAPSING" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_COLLAPSED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EXPANDING" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EXPANDED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_VALUE_CHANGED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_CONTEXT_MENU" class="wxDataViewEvent" help="Generated when the user right clicks inside the control. Notice that this menu is generated even if the click didn't occur on any valid item, in this case wxDataViewEvent::GetItem() simply returns an invalid item."/>
    <event name="wxEVT_DATAVIEW_COLUMN_HEADER_CLICK" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK" class="wxDataViewEvent" help="Notice that currently this event is not generated in the native OS X versions of the control."/>
    <event name="wxEVT_DATAVIEW_COLUMN_SORTED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_COLUMN_REORDERED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_BEGIN_DRAG" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_DROP" class="wxDataViewEvent" help=""/>
  </compinfo>

  <compinfo class="wxDataViewListCtrl" image="dataviewlist_ctrl" type="dataviewlistctrl" >
    <inherits class="wxControl"/>
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_dataViewListCtrl</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="style" type="bitlist">
      <option name="wxDV_SINGLE" help="Single selection mode. This is the default."/>
      <option name="wxDV_MULTIPLE" help="Multiple selection mode."/>
      <option name="wxDV_ROW_LINES" help="Use alternating colours for rows if supported by platform and theme. Currently only supported by the native GTK and OS X implementations but not by the generic one."/>
      <option name="wxDV_HORIZ_RULES" help="Display the separator lines between rows"/>
      <option name="wxDV_VERT_RULES" help="Display the separator lines between columns."/>
      <option name="wxDV_VARIABLE_LINE_HEIGHT" help="Allow variable line heights. This can be inefficient when displaying large number of items."/>
      <option name="wxDV_NO_HEADER" help="Do not show column headers (which are shown by default)."/>
    </property>
    <template name="generated_event_handlers"></template>
    <event name="wxEVT_DATAVIEW_SELECTION_CHANGED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_ACTIVATED" class="wxDataViewEvent" help="This event is triggered by double clicking an item or pressing some special key (usually 'Enter') when it is focused."/>
    <event name="wxEVT_DATAVIEW_ITEM_START_EDITING" class="wxDataViewEvent" help="This event can be vetoed in order to prevent editing on an item by item basis."/>
    <event name="wxEVT_DATAVIEW_ITEM_EDITING_STARTED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EDITING_DONE" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_COLLAPSING" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_COLLAPSED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EXPANDING" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_EXPANDED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_VALUE_CHANGED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_CONTEXT_MENU" class="wxDataViewEvent" help="Generated when the user right clicks inside the control. Notice that this menu is generated even if the click didn't occur on any valid item, in this case wxDataViewEvent::GetItem() simply returns an invalid item."/>
    <event name="wxEVT_DATAVIEW_COLUMN_HEADER_CLICK" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK" class="wxDataViewEvent" help="Notice that currently this event is not generated in the native OS X versions of the control."/>
    <event name="wxEVT_DATAVIEW_COLUMN_SORTED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_COLUMN_REORDERED" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_BEGIN_DRAG" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE" class="wxDataViewEvent" help=""/>
    <event name="wxEVT_DATAVIEW_ITEM_DROP" class="wxDataViewEvent" help=""/>
  </compinfo>

  <compinfo class="dataViewColumn" image="dataviewlist_column" type="dataviewcolumn" >
    <property name="var_name" type="string">m_dataViewColumn</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="label" type="string_escapes">Name</property>
    <property name="model_column" type="uint">0</property>
    <property name="type" type="option">
      <option name="Text" help="Appends a text column to the control and the store."/>
      <option name="Bitmap" help="Appends a column for rendering a bitmap."/>
      <option name="Date" help="Appends a column for rendering a date."/>
      <option name="Toggle" help="Appends a toggle column to the control and the store."/>
      <option name="Progress" help="Appends a progress column to the control and the store."/>
      <option name="IconText" help="Appends an icon-and-text column to the control and the store."/>
      Text
    </property>
    <property name="mode" type="option">
      <option name="wxDATAVIEW_CELL_INERT" help="The cell only displays information and cannot be manipulated or otherwise interacted with in any way."/>
      <option name="wxDATAVIEW_CELL_ACTIVATABLE" help="Indicates that the cell can be activated by clicking it or using keyboard."/>
      <option name="wxDATAVIEW_CELL_EDITABLE" help="Indicates that the user can edit the data in-place in an inline editor control that will show up when the user wants to edit the cell."/>
      wxDATAVIEW_CELL_INERT
    </property>
    <property name="width" type="int">-1</property>
    <property name="align" type="bitlist">
      <option name="wxALIGN_LEFT" help="Align the item to the left."/>
      <option name="wxALIGN_TOP" help="Align the item to the top."/>
      <option name="wxALIGN_RIGHT" help="Align the item to the right."/>
      <option name="wxALIGN_BOTTOM" help="Align the item to the bottom."/>
      <option name="wxALIGN_CENTER" help="Align the item to the center."/>
      <option name="wxALIGN_CENTER_HORIZONTAL" help="Align the item to the horizontal center."/>
      <option name="wxALIGN_CENTER_VERTICAL" help="Align the item to the vertical."/>
      wxALIGN_LEFT
    </property>
    <property name="flags" type="bitlist">
      <option name="wxDATAVIEW_COL_RESIZABLE" help="Column can be resized."/>
      <option name="wxDATAVIEW_COL_SORTABLE" help="Column can be clicked to toggle the sort order by its contents."/>
      <option name="wxDATAVIEW_COL_REORDERABLE" help="Column can be dragged to change its order."/>
      <option name="wxDATAVIEW_COL_HIDDEN" help="Column is not shown at all."/>
      wxDATAVIEW_COL_RESIZABLE
    </property>
    <property name="ellipsize" type="option">
      <option name=""/>
      <option name="wxELLIPSIZE_NONE" help="Don't ellipsize the text at all."/>
      <option name="wxELLIPSIZE_START" help="Put the ellipsis at the start of the string, if the string needs ellipsization."/>
      <option name="wxELLIPSIZE_MIDDLE" help="Put the ellipsis in the middle of the string, if the string needs ellipsization."/>
      <option name="wxELLIPSIZE_END" help="Put the ellipsis at the end of the string, if the string needs ellipsization."/>
    </property>
  </compinfo>

  <compinfo class="dataViewListColumn" image="dataviewlist_column" type="dataviewlistcolumn" >
    <property name="var_name" type="string">m_dataViewListColumn</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="label" type="string_escapes">Name</property>
    <property name="type" type="option">
      <option name="Text" help="Appends a text column to the control and the store."/>
      <option name="Toggle" help="Appends a toggle column to the control and the store."/>
      <option name="Progress" help="Appends a progress column to the control and the store."/>
      <option name="IconText" help="Appends an icon-and-text column to the control and the store."/>
      Text
    </property>
    <property name="mode" type="option">
      <option name="wxDATAVIEW_CELL_INERT" help="The cell only displays information and cannot be manipulated or otherwise interacted with in any way."/>
      <option name="wxDATAVIEW_CELL_ACTIVATABLE" help="Indicates that the cell can be activated by clicking it or using keyboard."/>
      <option name="wxDATAVIEW_CELL_EDITABLE" help="Indicates that the user can edit the data in-place in an inline editor control that will show up when the user wants to edit the cell."/>
      wxDATAVIEW_CELL_INERT
    </property>
    <property name="width" type="int">-1</property>
    <property name="align" type="bitlist">
      <option name="wxALIGN_LEFT" help="Align the item to the left."/>
      <option name="wxALIGN_TOP" help="Align the item to the top."/>
      <option name="wxALIGN_RIGHT" help="Align the item to the right."/>
      <option name="wxALIGN_BOTTOM" help="Align the item to the bottom."/>
      <option name="wxALIGN_CENTER" help="Align the item to the center."/>
      <option name="wxALIGN_CENTER_HORIZONTAL" help="Align the item to the horizontal center."/>
      <option name="wxALIGN_CENTER_VERTICAL" help="Align the item to the vertical."/>
      wxALIGN_LEFT
    </property>
    <property name="flags" type="bitlist">
      <option name="wxDATAVIEW_COL_RESIZABLE" help="Column can be resized."/>
      <option name="wxDATAVIEW_COL_SORTABLE" help="Column can be clicked to toggle the sort order by its contents."/>
      <option name="wxDATAVIEW_COL_REORDERABLE" help="Column can be dragged to change its order."/>
      <option name="wxDATAVIEW_COL_HIDDEN" help="Column is not shown at all."/>
      wxDATAVIEW_COL_RESIZABLE
    </property>
    <property name="ellipsize" type="option">
      <option name=""/>
      <option name="wxELLIPSIZE_NONE" help="Don't ellipsize the text at all."/>
      <option name="wxELLIPSIZE_START" help="Put the ellipsis at the start of the string, if the string needs ellipsization."/>
      <option name="wxELLIPSIZE_MIDDLE" help="Put the ellipsis in the middle of the string, if the string needs ellipsization."/>
      <option name="wxELLIPSIZE_END" help="Put the ellipsis at the end of the string, if the string needs ellipsization."/>
    </property>
  </compinfo>

  <compinfo class="wxPropertyGrid" image="wxPropertyGrid" type="propgrid">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_propertyGrid</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="include_advanced" type="bool" help="Include Advanced Properties">1</property>
    <property name="bitmap" type="image" help="This is the bitmap shown in the default state, it must be always valid while all the other bitmaps are optional and don't have to be set."/>
    <property name="style" type="bitlist">
      <option name="wxPG_AUTO_SORT" help="This will cause Sort() automatically after an item is added. When inserting a lot of items in this mode, it may make sense to use Freeze() before operations and Thaw() afterwards to increase performance."/>
      <option name="wxPG_HIDE_CATEGORIES" help="Categories are not initially shown (even if added)."/>
      <option name="wxPG_ALPHABETIC_MODE" help="This style combines non-categoric mode and automatic sorting."/>
      <option name="wxPG_BOLD_MODIFIED" help="Modified values are shown in bold font."/>
      <option name="wxPG_SPLITTER_AUTO_CENTER" help="When wxPropertyGrid is resized, splitter moves to the center. This behaviour stops once the user manually moves the splitter."/>
      <option name="wxPG_TOOLTIPS" help="Display tooltips for cell text that cannot be shown completely. If wxUSE_TOOLTIPS is 0, then this doesn't have any effect."/>
      <option name="wxPG_HIDE_MARGIN" help="Disables margin and hides all expand/collapse buttons that would appear outside the margin (for sub-properties). Toggling this style automatically expands all collapsed items."/>
      <option name="wxPG_STATIC_SPLITTER" help="This style prevents user from moving the splitter."/>
      <option name="wxPG_STATIC_LAYOUT" help="Combination of other styles that make it impossible for user to modify the layout."/>
      <option name="wxPG_LIMITED_EDITING" help="Disables wxTextCtrl based editors for properties which can be edited in another way."/>
      <option name="wxPG_DEFAULT_STYLE" help="Combines various styles."/>
      <option name="wxTAB_TRAVERSAL" help="wxTAB_TRAVERSAL allows using Tab/Shift-Tab to travel between properties in grid. Travelling forwards from last property will navigate to the next control, and backwards from first will navigate to the previous one."/>
      wxPG_DEFAULT_STYLE
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxPG_EX_INIT_NOCAT" help="Speeds up switching to wxPG_HIDE_CATEGORIES mode. Initially, if wxPG_HIDE_CATEGORIES is not defined, the non-categorized data storage is not activated, and switching the mode first time becomes somewhat slower. wxPG_EX_INIT_NOCAT activates the non-categorized data storage right away. IMPORTANT NOTE: If you do plan not switching to non-categoric mode, or if you don't plan to use categories at all, then using this style will result in waste of resources."/>
      <option name="wxPG_EX_HELP_AS_TOOLTIPS" help="Show property help strings as tool tips instead as text on the status bar."/>
      <option name="wxPG_EX_NATIVE_DOUBLE_BUFFERING" help="Allows relying on native double-buffering."/>
      <option name="wxPG_EX_AUTO_UNSPECIFIED_VALUES" help="Set this style to let user have ability to set values of properties to unspecified state. Same as setting wxPG_PROP_AUTO_UNSPECIFIED for all properties."/>
      <option name="wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES" help="If this style is used, built-in attributes (such as wxPG_FLOAT_PRECISION and wxPG_STRING_PASSWORD) are not stored into property's attribute storage (thus they are not readable). Note that this option is global, and applies to all wxPG property containers."/>
      <option name="wxPG_EX_MULTIPLE_SELECTION" help="Allows multiple properties to be selected by user (by pressing SHIFT when clicking on a property, or by dragging with left mouse button down)."/>
      <option name="wxPG_EX_ENABLE_TLP_TRACKING" help="This enables top-level window tracking which allows wxPropertyGrid to notify the application of last-minute property value changes by user. This style is not enabled by default because it may cause crashes when wxPropertyGrid is used in with wxAUI or similar system. If you are not in fact using any system that may change wxPropertyGrid's top-level parent window on its own, then you are recommended to enable this style."/>
    </property>
    <event name="wxEVT_PG_CHANGING" class="wxPropertyGridEvent" help="Property value is about to be changed. Use wxPropertyGridEvent::GetValue() to take a peek at the pending value, and wxPropertyGridEvent::Veto() to prevent change from taking place, if necessary."/>
    <event name="wxEVT_PG_CHANGED" class="wxPropertyGridEvent" help="Property value is modified."/>
  </compinfo>

  <compinfo class="wxPropertyGridManager" image="wxPropertyGridManager" type="propgridman">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_propertyGridManager</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="include_advanced" type="bool" help="Include Advanced Properties">1</property>
    <property name="style" type="bitlist">
      <option name="wxPG_AUTO_SORT" help="This will cause Sort() automatically after an item is added. When inserting a lot of items in this mode, it may make sense to use Freeze() before operations and Thaw() afterwards to increase performance."/>
      <option name="wxPG_HIDE_CATEGORIES" help="Categories are not initially shown (even if added)."/>
      <option name="wxPG_ALPHABETIC_MODE" help="This style combines non-categoric mode and automatic sorting."/>
      <option name="wxPG_BOLD_MODIFIED" help="Modified values are shown in bold font."/>
      <option name="wxPG_SPLITTER_AUTO_CENTER" help="When wxPropertyGrid is resized, splitter moves to the center. This behaviour stops once the user manually moves the splitter."/>
      <option name="wxPG_TOOLTIPS" help="Display tooltips for cell text that cannot be shown completely. If wxUSE_TOOLTIPS is 0, then this doesn't have any effect."/>
      <option name="wxPG_HIDE_MARGIN" help="Disables margin and hides all expand/collapse buttons that would appear outside the margin (for sub-properties). Toggling this style automatically expands all collapsed items."/>
      <option name="wxPG_STATIC_SPLITTER" help="This style prevents user from moving the splitter."/>
      <option name="wxPG_STATIC_LAYOUT" help="Combination of other styles that make it impossible for user to modify the layout."/>
      <option name="wxPG_LIMITED_EDITING" help="Disables wxTextCtrl based editors for properties which can be edited in another way."/>
      <option name="wxTAB_TRAVERSAL" help="wxTAB_TRAVERSAL allows using Tab/Shift-Tab to travel between properties in grid. Travelling forwards from last property will navigate to the next control, and backwards from first will navigate to the previous one."/>
      <option name="wxPG_COMPACTOR" help="Show compactor button that toggles hidden state of low-priority properties."/>
      <option name="wxPGMAN_DEFAULT_STYLE" help="Combines various styles."/>
      <option name="wxPG_DESCRIPTION" help="Show adjustable text box showing description or help text, if available, for currently selected property."/>
      <option name="wxPG_TOOLBAR" help="Show toolbar for mode and page selection."/>
      <option name="wxPG_NO_INTERNAL_BORDER" help="Don't show an internal border around the property grid. Recommended if you use a header."/>
      wxPGMAN_DEFAULT_STYLE
    </property>
    <property name="extra_style" type="bitlist">
      <option name="wxPG_EX_INIT_NOCAT" help="Speeds up switching to wxPG_HIDE_CATEGORIES mode. Initially, if wxPG_HIDE_CATEGORIES is not defined, the non-categorized data storage is not activated, and switching the mode first time becomes somewhat slower. wxPG_EX_INIT_NOCAT activates the non-categorized data storage right away. IMPORTANT NOTE: If you do plan not switching to non-categoric mode, or if you don't plan to use categories at all, then using this style will result in waste of resources."/>
      <option name="wxPG_EX_NO_FLAT_TOOLBAR" help="Extended window style that sets wxPropertyGridManager toolbar to not use flat style."/>
      <option name="wxPG_EX_MODE_BUTTONS" help="Shows alphabetic/categoric mode buttons from toolbar."/>
      <option name="wxPG_EX_HELP_AS_TOOLTIPS" help="Show property help strings as tool tips instead as text on the status bar."/>
      <option name="wxPG_EX_NATIVE_DOUBLE_BUFFERING" help="Allows relying on native double-buffering."/>
      <option name="wxPG_EX_AUTO_UNSPECIFIED_VALUES" help="Set this style to let user have ability to set values of properties to unspecified state. Same as setting wxPG_PROP_AUTO_UNSPECIFIED for all properties."/>
      <option name="wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES" help="If this style is used, built-in attributes (such as wxPG_FLOAT_PRECISION and wxPG_STRING_PASSWORD) are not stored into property's attribute storage (thus they are not readable). Note that this option is global, and applies to all wxPG property containers."/>
      <option name="wxPG_EX_HIDE_PAGE_BUTTONS" help="Hides page selection buttons from tool bar."/>
      <option name="wxPG_EX_MULTIPLE_SELECTION" help="Allows multiple properties to be selected by user (by pressing SHIFT when clicking on a property, or by dragging with left mouse button down)."/>
      <option name="wxPG_EX_ENABLE_TLP_TRACKING" help="This enables top-level window tracking which allows wxPropertyGrid to notify the application of last-minute property value changes by user. This style is not enabled by default because it may cause crashes when wxPropertyGrid is used in with wxAUI or similar system. If you are not in fact using any system that may change wxPropertyGrid's top-level parent window on its own, then you are recommended to enable this style."/>
      <option name="wxPG_EX_NO_TOOLBAR_DIVIDER" help="Don't show divider above toolbar, on Windows."/>
      <option name="wxPG_EX_TOOLBAR_SEPARATOR" help="Show a separator below the toolbar."/>
      wxPG_EX_MODE_BUTTONS
    </property>
    <event name="wxEVT_PG_CHANGING" class="wxPropertyGridEvent" help="Property value is about to be changed. Use wxPropertyGridEvent::GetValue() to take a peek at the pending value, and wxPropertyGridEvent::Veto() to prevent change from taking place, if necessary."/>
    <event name="wxEVT_PG_CHANGED" class="wxPropertyGridEvent" help="Property value is modified."/>
  </compinfo>

  <compinfo class="propGridPage" image="propgridpage" type="propgridpage">
    <property name="var_name" type="string" help="Instance name.">m_propertyGridPage</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="label" type="string_escapes" help="Label shown as a tooltip of the manager's tool button.">Page</property>
    <property name="bitmap" type="image" help="Bitmap shown in the property manager's header."/>
  </compinfo>

  <compinfo class="propGridItem" image="propgriditem" type="propgriditem">
    <property name="var_name" type="string" help="Instance name and an internal name of the property item.">m_propertyGridItem</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
    <property name="label" type="string_escapes" help="Label shown in parent property grid/page.">Name</property>
    <property name="type" type="option" help="Type of the property item.">
      <option name="Category" help="Append properties category."/>
      <option name="Bool" help="Append Boolean property to the parent property grid (page)."/>
      <option name="Colour" help="Append Colour property to the parent property grid (page)."/>
      <option name="Cursor" help="Append Cursor property to the parent property grid (page)."/>
      <option name="Date" help="Append Date property to the parent property grid (page)."/>
      <option name="Dir" help="Append Dir property to the parent property grid (page)."/>
      <option name="EditEnum" help="Append EditEnum property to the parent property grid (page)."/>
      <option name="Enum" help="Append Enum property to the parent property grid (page)."/>
      <option name="File" help="Append File property to the parent property grid (page)."/>
      <option name="Flags" help="Append Flags property to the parent property grid (page)."/>
      <option name="Float" help="Append Float property to the parent property grid (page)."/>
      <option name="Font" help="Append Font property to the parent property grid (page)."/>
      <option name="ImageFile" help="Append ImageFile property to the parent property grid (page)."/>
      <option name="Int" help="Append Int property to the parent property grid (page)."/>
      <option name="LongString" help="Append LongString property to the parent property grid (page)."/>
      <option name="MultiChoice" help="Append MultiChoice property to the parent property grid (page)."/>
      <option name="String" help="Append String property to the parent property grid (page)."/>
      <option name="SystemColour" help="Append SystemColour property to the parent property grid (page)."/>
      <option name="UInt" help="Append UInt property to the parent property grid (page)."/>
      String
    </property>
    <property name="help" type="string_escapes" help="Property item's name."></property>
  </compinfo>

  <compinfo class="wxActivityIndicator" image="wxActivityIndicator" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_indicator</property>
    <property name="class_access" type="option">
      <option name="none"/>
      <option name="protected:"/>
      <option name="public:"/>
      protected:
    </property>
  </compinfo>

  <compinfo class="wxBannerWindow" image="wxBannerWindow" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="Window Events"/>
    <inherits class="sizer_child"/>
    <property name="var_name" type="string">m_banner</property>
    <property name="title" type="string_escapes"
      help = "Title is rendered in bold and should be a single line."/>
    <property name="message" type="string_edit_escapes"
      help="The message can have multiple lines but is not wrapped automatically. Include explicit line breaks in the string if you want to have multiple lines."/>
    <property name="bitmap" type="image"
        help="Specifies a bitmap to use as the background."/>
    <property name="start_colour" type="wxColour"
        help="Specifies the starting colour of a gradient. Ignored if a bitmap is specified."/>
    <property name="end_colour" type="wxColour"
        help="Specifies the ending colour of a gradient. Ignored if a bitmap is specified"/>
    <property name="direction" type="option"
        help="Determines the placement of the banner and the direction of any text.">
      <option name="wxTOP"/>
      <option name="wxBOTTOM"/>
      <option name="wxLEFT"/>
      <option name="wxRIGHT"/>
      wxTOP
    </property>
  </compinfo>

</GeneratorDefitions>
