///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/bitmap.h>
#include <wx/icon.h>
#include <wx/image.h>

#include "../wxui/ui_images.h"

#include "nav_toolbar.h"

#include "mainframe.h"
#include "project_handler.h"

#include <wx/mstream.h>  // memory stream classes
#include <wx/zstream.h>  // zlib stream classes

#include <memory>  // for std::make_unique

// Convert compressed SVG string into a wxBitmapBundle
#ifdef __cpp_inline_variables
inline wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
#else
static wxBitmapBundle wxueBundleSVG(const unsigned char* data,
    size_t size_data, size_t size_svg, wxSize def_size)
#endif
{
    auto str = std::make_unique<char[]>(size_svg);
    wxMemoryInputStream stream_in(data, size_data);
    wxZlibInputStream zlib_strm(stream_in);
    zlib_strm.Read(str.get(), size_svg);
    return wxBitmapBundle::FromSVG(str.get(), def_size);
};

namespace wxue_img
{
    extern const unsigned char nav_coll_expand_svg[147];
    extern const unsigned char nav_collapse_svg[210];
    extern const unsigned char nav_expand_svg[137];
}

NavToolbar::NavToolbar(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style,
    const wxString& name) : wxToolBar(parent, id, pos, size, style, name)
{

    AddStretchableSpace();

    AddTool(id_NavCollExpand, wxEmptyString,
        wxueBundleSVG(wxue_img::nav_coll_expand_svg, 147, 214, FromDIP(wxSize(16, 16))), wxNullBitmap, wxITEM_NORMAL,
        "Collapse siblings, expand children", "Expand selected item, collapse all other items at the same level");

    AddTool(id_NavExpand, wxEmptyString,
        wxueBundleSVG(wxue_img::nav_expand_svg, 137, 189, FromDIP(wxSize(16, 16))), wxNullBitmap, wxITEM_NORMAL,
        "Expand all children", "Expand selected item and all of it\'s sub-items");

    AddTool(id_NavCollapse, wxEmptyString,
        wxueBundleSVG(wxue_img::nav_collapse_svg, 210, 317, FromDIP(wxSize(16, 16))), wxNullBitmap, wxITEM_NORMAL,
        "Collapse all siblings", "Collapse selected item and all items at the same level");

    AddSeparator();
    AddTool(id_NavMoveLeft, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_BACK, wxART_MENU), wxNullBitmap,
        wxITEM_NORMAL, "Move Left", "Move the selected item left");

    AddTool(id_NavMoveUp, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_UP, wxART_MENU), wxNullBitmap, wxITEM_NORMAL,
        "Move Up", "Move the selected item up");

    AddTool(id_NavMoveDown, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_DOWN, wxART_MENU), wxNullBitmap,
        wxITEM_NORMAL, "Move Down", "Move the selected item down");

    AddTool(id_NavMoveRight, wxEmptyString, wxArtProvider::GetBitmapBundle(wxART_GO_FORWARD, wxART_OTHER), wxNullBitmap,
        wxITEM_NORMAL, "Move Right", "Move the selected item right");

    AddStretchableSpace();

    Realize();
}

namespace wxue_img
{

    const unsigned char nav_coll_expand_svg[147] {
        120,218,77,143,91,14,130,48,16,69,93,74,83,127,59,48,165,21,42,20,118,224,6,248,51,17,149,100,4,3,104,162,171,183,
        15,162,254,157,115,103,238,36,99,231,231,165,177,247,227,114,101,253,169,230,30,228,78,113,230,248,176,79,148,82,
        34,67,66,1,154,64,11,8,152,37,121,94,144,22,107,30,212,9,160,208,33,117,16,87,98,35,228,177,228,180,189,129,17,
        32,149,63,253,59,38,205,58,254,43,127,179,150,179,121,121,81,87,243,115,79,84,110,17,13,34,86,94,96,122,80,87,14,
        227,240,238,166,177,226,105,99,83,255,207,230,3,97,195,54,160
    };

    const unsigned char nav_collapse_svg[210] {
        120,218,101,208,93,106,195,48,12,0,224,29,197,168,47,27,180,138,28,91,118,210,197,121,219,5,118,131,178,58,137,
        33,73,135,99,182,230,246,115,91,104,41,67,47,250,65,232,67,205,242,211,183,77,47,194,209,193,199,244,157,214,221,
        167,255,74,32,22,31,67,183,191,119,197,173,155,226,97,94,186,83,156,28,76,135,20,195,249,85,110,233,18,104,173,
        169,107,206,169,69,169,140,228,55,104,155,152,119,196,217,1,129,88,29,72,131,204,10,196,111,56,166,193,129,42,65,
        12,62,244,67,202,35,70,173,109,62,154,214,209,59,232,194,56,238,231,211,236,223,161,104,155,226,234,251,127,153,
        176,102,195,218,94,1,37,18,51,155,12,49,70,42,86,219,157,212,72,165,173,158,28,168,169,186,89,20,150,245,131,34,
        115,165,30,156,60,52,234,89,179,33,170,136,232,14,42,46,111,123,249,3,23,44,87,245
    };

    const unsigned char nav_expand_svg[137] {
        120,218,179,41,46,75,183,179,41,72,44,201,80,200,76,177,85,42,200,41,45,86,82,0,50,124,45,244,76,76,140,117,140,
        12,114,116,13,116,116,205,245,12,141,76,115,116,205,244,44,140,205,116,12,114,128,34,38,122,230,166,57,16,190,46,
        178,26,19,61,83,83,115,176,18,8,31,89,9,88,15,146,33,80,83,161,90,162,148,20,138,75,42,115,82,109,149,210,50,115,
        114,172,148,13,12,44,12,12,12,172,65,28,221,162,210,156,84,171,188,252,188,170,212,162,124,107,37,125,59,27,125,
        144,179,25,0,152,253,48,197
    };

}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************
