///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/valgen.h>
#include <wx/valtext.h>

#include "new_ribbon.h"

bool NewRibbon::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_3 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_3 = new wxStaticText(this, wxID_ANY,
        "These are initial values -- all of them can be changed after the ribbon bar is created.");
    staticText_3->Wrap(300);
    box_sizer_3->Add(staticText_3, wxSizerFlags().Border(wxALL));

    m_infoBar = new wxInfoBar(this);
    m_infoBar->SetShowHideEffects(wxSHOW_EFFECT_NONE, wxSHOW_EFFECT_NONE);
    m_infoBar->SetEffectDuration(500);
    box_sizer_3->Add(m_infoBar, wxSizerFlags().Expand().Border(wxALL));

    box_sizer->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    m_class_sizer = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText = new wxStaticText(this, wxID_ANY, "&Base class name:");
    staticText->SetToolTip("Change this to something unique to your project.");
    m_class_sizer->Add(staticText, wxSizerFlags().Center().Border(wxALL));

    m_classname = new wxTextCtrl(this, wxID_ANY, "MyRibbonBarBase");
    m_classname->SetValidator(wxTextValidator(wxFILTER_NONE, &m_base_class));
    m_classname->SetToolTip("Change this to something unique to your project.");
    m_class_sizer->Add(m_classname, wxSizerFlags(1).Border(wxALL));

    box_sizer->Add(m_class_sizer, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer_2 = new wxBoxSizer(wxHORIZONTAL);

    m_staticText = new wxStaticText(this, wxID_ANY, "&Type:");
    box_sizer_2->Add(m_staticText, wxSizerFlags().Center().Border(wxALL));

    m_comboBox = new wxChoice(this, wxID_ANY);
    m_comboBox->Append("Tool");
    m_comboBox->Append("Button");
    m_comboBox->Append("Gallery");
    m_panel_type = "Tool";  // set validator variable
    m_comboBox->SetValidator(wxGenericValidator(&m_panel_type));
    box_sizer_2->Add(m_comboBox, wxSizerFlags().Border(wxALL));

    box_sizer->Add(box_sizer_2, wxSizerFlags().Border(wxALL));

    auto* box_sizer_4 = new wxBoxSizer(wxHORIZONTAL);

    auto* staticText_4 = new wxStaticText(this, wxID_ANY, "&Pages:");
    box_sizer_4->Add(staticText_4, wxSizerFlags().Center().Border(wxLEFT|wxTOP|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_spinCtrlPages = new wxSpinCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 7,
        3);
    m_spinCtrlPages->SetValidator(wxGenericValidator(&m_num_pages));
    box_sizer_4->Add(m_spinCtrlPages, wxSizerFlags().Border(wxALL));

    box_sizer->Add(box_sizer_4, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    box_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(box_sizer);
    }
    else
    {
        SetSizer(box_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &NewRibbon::OnInit, this);
    m_classname->Bind(wxEVT_TEXT,
        [this](wxCommandEvent&)
        {VerifyClassName();
        });

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Dialog for creating a new wxRibbonBar
// Author:    Ralph Walden
// Copyright: Copyright (c) 2021-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "../panels/nav_panel.h"     // NavigationPanel -- Navigation Panel
#include "../panels/ribbon_tools.h"  // RibbonPanel -- Displays component tools in a wxRibbonBar
#include "mainframe.h"               // MainFrame -- Main window frame
#include "new_common.h"              // Contains code common between all new_ dialogs
#include "node.h"                    // Node class
#include "node_creator.h"            // NodeCreator -- Class used to create nodes
#include "project_handler.h"         // ProjectHandler class
#include "undo_cmds.h"               // InsertNodeAction -- Undoable command classes derived from UndoAction

void NewRibbon::OnInit(wxInitDialogEvent& event)
{
    if (!m_is_form)
    {
        for (size_t idx = 0; idx < m_class_sizer->GetItemCount(); ++idx)
        {
            m_class_sizer->GetItem(idx)->GetWindow()->Hide();
        }
    }

    event.Skip();  // transfer all validator data to their windows and update UI
}

void NewRibbon::createNode()
{
    NodeSharedPtr bar_node;
    if (m_is_form)
    {
        bar_node = NodeCreation.createNode(gen_RibbonBar, Project.getProjectNode()).first;
        ASSERT(bar_node);
    }
    else
    {
        bar_node = NodeCreation.createNode(gen_wxRibbonBar, wxGetFrame().getSelectedNode()).first;
        if (!bar_node)
        {
            wxMessageBox("You need to have a sizer selected before you can create a wxRibbonBar.", "Create wxRibbonBar");
            return;
        }
    }

    for (int count = 0; count < m_num_pages; ++count)
    {
        auto ribbon_page = NodeCreation.createNode(gen_wxRibbonPage, bar_node.get()).first;
        bar_node->adoptChild(ribbon_page);
        tt_string label("Page ");
        label << count + 1;
        ribbon_page->set_value(prop_label, label);

        auto ribbon_panel = NodeCreation.createNode(gen_wxRibbonPanel, ribbon_page.get()).first;
        ribbon_page->adoptChild(ribbon_panel);
        label << ", panel 1";
        ribbon_panel->set_value(prop_label, label);

        if (m_panel_type == "Tool")
        {
            auto tool_bar = NodeCreation.createNode(gen_wxRibbonToolBar, ribbon_panel.get()).first;
            ribbon_panel->adoptChild(tool_bar);
            auto tool = NodeCreation.createNode(gen_ribbonTool, tool_bar.get()).first;
            tool_bar->adoptChild(tool);
        }
        else if (m_panel_type == "Button")
        {
            auto button_bar = NodeCreation.createNode(gen_wxRibbonButtonBar, ribbon_panel.get()).first;
            ribbon_panel->adoptChild(button_bar);
            auto button = NodeCreation.createNode(gen_ribbonButton, button_bar.get()).first;
            button_bar->adoptChild(button);
        }
        else if (m_panel_type == "Gallery")
        {
            auto gallery_bar = NodeCreation.createNode(gen_wxRibbonGallery, ribbon_panel.get()).first;
            ribbon_panel->adoptChild(gallery_bar);
            auto item = NodeCreation.createNode(gen_ribbonGalleryItem, gallery_bar.get()).first;
            gallery_bar->adoptChild(item);
        }
    }

    if (!m_is_form)
    {
        auto parent = wxGetFrame().getSelectedNode();
        auto pos = parent->findInsertionPos(parent);
        tt_string undo_str("New wxRibbonBar");
        wxGetFrame().PushUndoAction(std::make_shared<InsertNodeAction>(bar_node.get(), parent, undo_str, pos));
    }
    else
    {
        bar_node->set_value(prop_class_name, m_base_class.utf8_string());
        if (bar_node->as_string(prop_class_name) != bar_node->getPropDefaultValue(prop_class_name))
        {
            UpdateFormClass(bar_node.get());
        }

        auto parent_node = wxGetFrame().getSelectedNode();
        if (!parent_node)
        {
            parent_node = Project.getProjectNode();
        }
        else
        {
            parent_node = parent_node->getValidFormParent();
        }

        wxGetFrame().SelectNode(parent_node);

        tt_string undo_str("New wxRibbonBar");
        wxGetFrame().PushUndoAction(std::make_shared<InsertNodeAction>(bar_node.get(), parent_node, undo_str, -1));
    }

    wxGetFrame().FireCreatedEvent(bar_node);
    wxGetFrame().SelectNode(bar_node, evt_flags::fire_event | evt_flags::force_selection);
    wxGetFrame().getNavigationPanel()->ChangeExpansion(bar_node.get(), true, true);

    // This probably already is activated, but let's be sure
    wxGetFrame().getRibbonPanel()->ActivateBarPage();
}

bool NewRibbon::IsCreatable(bool notify_user)
{
    auto parent = wxGetFrame().getSelectedNode();
    if (parent->isSizer())
        return true;

    if (notify_user)
    {
        wxMessageBox("You need to have a sizer selected before you can create a wxRibbonBar.", "Create wxRibbonBar");
    }

    return false;
}

// Called whenever m_classname changes
void NewRibbon::VerifyClassName()
{
    if (!m_is_form)
        return;

    if (!IsClassNameUnique(m_classname->GetValue()))
    {
        if (!m_is_info_shown)
        {
            m_infoBar->ShowMessage("This class name is already in use.", wxICON_WARNING);
            FindWindow(GetAffirmativeId())->Disable();
            Fit();
            m_is_info_shown = true;
        }
        return;
    }

    else if (m_is_info_shown)
    {
        m_is_info_shown = false;
        m_infoBar->Dismiss();
        FindWindow(GetAffirmativeId())->Enable();
        Fit();
    }
}
