///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/artprov.h>
#include <wx/checkbox.h>
#include <wx/gbsizer.h>
#include <wx/panel.h>
#include <wx/sizer.h>

#include "images.h"

#include "dlgmultitest.h"

#include <wx/mstream.h>  // memory stream classes

// Convert a data array into a wxImage
inline wxImage wxueImage(const unsigned char* data, size_t size_data)
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

namespace wxue_img
{
    extern const unsigned char focus_png[517];
    extern const unsigned char no_hour_png[347];
    extern const unsigned char normal_png[508];
    extern const unsigned char wiztest_png[1239];
}

bool DlgMultiTest::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;
    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    auto* box_sizer_2 = new wxBoxSizer(wxVERTICAL);

    m_notebook = new wxNotebook(this, wxID_ANY);
    box_sizer_2->Add(m_notebook, wxSizerFlags(1).Expand().Border(wxALL));

    auto* page_2 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_2, "Buttons");

    auto* box_sizer_3 = new wxBoxSizer(wxVERTICAL);

    auto* grid_bag_sizer = new wxGridBagSizer();

    m_btn = new wxButton(page_2, wxID_ANY, "Normal");
    m_btn->SetToolTip("A normal button");
    grid_bag_sizer->Add(m_btn, wxGBPosition(0, 0), wxGBSpan(1, 1), wxALL, 5);

    m_btn_2 = new wxButton(page_2, wxID_ANY, wxEmptyString);
    m_btn_2->SetLabelMarkup("<b><span foreground=\'red\'>Markup</span></b>");
    m_btn_2->SetToolTip("Text should be Bold and Red.");
    grid_bag_sizer->Add(m_btn_2, wxGBPosition(0, 1), wxGBSpan(1, 1), wxALL, 5);

    m_btn_bitmaps = new wxButton(page_2, wxID_ANY, "Bitmaps");
#if wxCHECK_VERSION(3, 1, 6)
    {
        m_btn_bitmaps->SetBitmap(wxBitmapBundle::FromBitmap(wxueImage(wxue_img::normal_png, sizeof(wxue_img::normal_png))));
        m_btn_bitmaps->SetBitmapDisabled(wxBitmapBundle::FromBitmap(wxueImage(wxue_img::no_hour_png, sizeof(wxue_img::no_hour_png))));
        m_btn_bitmaps->SetBitmapCurrent(wxBitmapBundle::FromBitmap(wxueImage(wxue_img::focus_png, sizeof(wxue_img::focus_png))));
    }
#else
    m_btn_bitmaps->SetBitmap(wxueImage(wxue_img::normal_png, sizeof(wxue_img::normal_png)));
    m_btn_bitmaps->SetBitmapDisabled(wxueImage(wxue_img::no_hour_png, sizeof(wxue_img::no_hour_png)));
    m_btn_bitmaps->SetBitmapCurrent(wxueImage(wxue_img::focus_png, sizeof(wxue_img::focus_png)));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_btn_bitmaps->SetToolTip("Bitmap should change when mouse is over button, or button is disabled.");
    grid_bag_sizer->Add(m_btn_bitmaps, wxGBPosition(0, 2), wxGBSpan(1, 1), wxALL, 5);

    m_btn_4 = new wxButton(page_2, wxID_ANY, "Right");
    m_btn_4->SetBitmapPosition(wxRIGHT);
#if wxCHECK_VERSION(3, 1, 6)
        m_btn_4->SetBitmap(wxBitmapBundle::FromBitmap(wxueImage(wxue_img::normal_png, sizeof(wxue_img::normal_png))));
#else
    m_btn_4->SetBitmap(wxueImage(wxue_img::normal_png, sizeof(wxue_img::normal_png)));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_btn_4->SetToolTip("Bitmap should be on the right side.");
    grid_bag_sizer->Add(m_btn_4, wxGBPosition(0, 3), wxGBSpan(1, 1), wxALL, 5);

    m_toggleBtn = new wxToggleButton(page_2, wxID_ANY, "Toggle", wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    m_toggleBtn->SetToolTip("Style set to exact fit, so it should be a bit smaller than usual.");
    grid_bag_sizer->Add(m_toggleBtn, wxGBPosition(0, 4), wxGBSpan(1, 1), wxALL, 5);

    auto* disable_bitmaps = new wxCheckBox(page_2, wxID_ANY, "Disable");
    grid_bag_sizer->Add(disable_bitmaps, wxGBPosition(2, 2), wxGBSpan(1, 1), wxALL, 5);

    box_sizer_3->Add(grid_bag_sizer, wxSizerFlags().Border(wxALL));

    auto* box_sizer_7 = new wxBoxSizer(wxHORIZONTAL);

    m_btn_5 = new wxCommandLinkButton(page_2, wxID_ANY, "Command", "wxCommandLinkButton");
#if wxCHECK_VERSION(3, 1, 6)
        m_btn_5->SetBitmap(wxArtProvider::GetBitmapBundle(wxART_GO_FORWARD, wxART_OTHER));
#else
    m_btn_5->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_FORWARD, wxART_OTHER));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_btn_5->SetToolTip("The bitmap for this is from Art Provider.");
    box_sizer_7->Add(m_btn_5, wxSizerFlags().Border(wxALL));

    box_sizer_3->Add(box_sizer_7, wxSizerFlags().Border(wxALL));
    page_2->SetSizerAndFit(box_sizer_3);

    auto* page_3 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_3, "Banners");

    auto* box_sizer_4 = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_8 = new wxBoxSizer(wxHORIZONTAL);

    m_banner_left = new wxBannerWindow(page_3, wxLEFT);
    m_banner_left->SetText("Left Banner", wxEmptyString);
    box_sizer_8->Add(m_banner_left, wxSizerFlags().Border(wxALL));

    m_banner_top = new wxBannerWindow(page_3, wxTOP);
    m_banner_top->SetGradient(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION),
        wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_banner_top->SetText("Top Banner", "This is the top banner message");
    box_sizer_8->Add(m_banner_top, wxSizerFlags().Border(wxALL));

    m_banner_right = new wxBannerWindow(page_3, wxRIGHT);
    m_banner_right->SetText("Right Banner", wxEmptyString);
    box_sizer_8->Add(m_banner_right, wxSizerFlags().Border(wxALL));

    box_sizer_4->Add(box_sizer_8, wxSizerFlags(1).Border(wxALL));

    auto* box_sizer_9 = new wxBoxSizer(wxHORIZONTAL);

    m_banner = new wxBannerWindow(page_3, wxLEFT);
#if wxCHECK_VERSION(3, 1, 6)
        m_banner->SetBitmap(wxue_img::bundle_wiztest_png());
#else
    m_banner->SetBitmap(wxueImage(wxue_img::wiztest_png, sizeof(wxue_img::wiztest_png)));
#endif  // wxCHECK_VERSION(3, 1, 6)
    m_banner->SetText("This is a long title", wxEmptyString);
    box_sizer_9->Add(m_banner, wxSizerFlags().Border(wxALL));

    box_sizer_4->Add(box_sizer_9, wxSizerFlags().Border(wxALL));
    page_3->SetSizerAndFit(box_sizer_4);

    auto* page_4 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_4, "Lists");

    auto* box_sizer_5 = new wxBoxSizer(wxVERTICAL);

    auto* flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);

    auto* box_sizer_10 = new wxBoxSizer(wxVERTICAL);

    m_staticText_2 = new wxStaticText(page_4, wxID_ANY, "wxRearrangeCtrl");
    box_sizer_10->Add(m_staticText_2, wxSizerFlags().Expand().Border(wxALL));

    m_rearrange = new wxRearrangeCtrl(page_4, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxArrayInt(), wxArrayString());
    box_sizer_10->Add(m_rearrange, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_10, wxSizerFlags().Border(wxALL));

    auto* box_sizer_11 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_3 = new wxStaticText(page_4, wxID_ANY, "wxCheckListBox");
    box_sizer_11->Add(staticText_3, wxSizerFlags().Expand().Border(wxALL));

    m_checkList = new wxCheckListBox(page_4, wxID_ANY);
    box_sizer_11->Add(m_checkList, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_11, wxSizerFlags().Border(wxALL));

    auto* box_sizer_12 = new wxBoxSizer(wxVERTICAL);

    m_staticText_3 = new wxStaticText(page_4, wxID_ANY, "wxListView");
    box_sizer_12->Add(m_staticText_3, wxSizerFlags().Border(wxALL));

    m_listview = new wxListView(page_4, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_SINGLE_SEL|wxLC_REPORT);
    {
        m_listview->AppendColumn("name");
        m_listview->AppendColumn("value");
        auto info = wxListItem();
        info.Clear();
        info.SetId(0);
        auto idx = m_listview->InsertItem(info);
        m_listview->SetItem(idx, 0, "meaning");
        m_listview->SetItem(idx, 1, "42");
    }
    m_listview->SetToolTip("Separate content columns with a semi-colon (;)");
    box_sizer_12->Add(m_listview, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_12, wxSizerFlags().Border(wxALL));

    auto* box_sizer_13 = new wxBoxSizer(wxHORIZONTAL);

    m_edit_listbox = new wxEditableListBox(page_4, wxID_ANY, "My Editable ListBox", wxDefaultPosition, wxDefaultSize,
        wxEL_ALLOW_NEW|wxEL_ALLOW_EDIT|wxEL_ALLOW_DELETE);
    box_sizer_13->Add(m_edit_listbox, wxSizerFlags().Border(wxALL));

    flex_grid_sizer->Add(box_sizer_13, wxSizerFlags().Border(wxALL));

    box_sizer_5->Add(flex_grid_sizer, wxSizerFlags().Border(wxALL));
    page_4->SetSizerAndFit(box_sizer_5);

    auto* page_5 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page_5, "Tab 4");

    auto* box_sizer_6 = new wxBoxSizer(wxVERTICAL);

    m_staticText_5 = new wxStaticText(page_5, wxID_ANY, "TODO: replace this control with something more useful...");
    m_staticText_5->Wrap(200);
    box_sizer_6->Add(m_staticText_5, wxSizerFlags().Border(wxALL));
    page_5->SetSizerAndFit(box_sizer_6);

    auto* page = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page, "Tab 5");

    auto* box_sizer = new wxBoxSizer(wxVERTICAL);

    m_staticText = new wxStaticText(page, wxID_ANY, "TODO: replace this control with something more useful...");
    m_staticText->Wrap(200);
    box_sizer->Add(m_staticText, wxSizerFlags().Border(wxALL));
    page->SetSizerAndFit(box_sizer);

    auto* stdBtn = CreateStdDialogButtonSizer(wxCLOSE|wxNO_DEFAULT);
    stdBtn->GetCancelButton()->SetDefault();
    box_sizer_2->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(box_sizer_2);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &DlgMultiTest::OnInit, this);
    disable_bitmaps->Bind(wxEVT_CHECKBOX,
        [this](wxCommandEvent& event)
        {
            m_btn_bitmaps->Enable(!event.IsChecked());
        } );

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Multiple Tests dialog
// Author:    Ralph Walden
// Copyright: Copyright (c) 2020-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include "mainframe.h"  // MainFrame -- Main window

void MainFrame::OnMultiTestDialog(wxCommandEvent& WXUNUSED(event))
{
    DlgMultiTest dlg(this);
    dlg.ShowModal();
}

void DlgMultiTest::OnInit(wxInitDialogEvent& event)
{
    auto sel = m_listview->FindItem(-1, "meaning");
    if (sel >= 0)
        m_listview->Select(sel);

    event.Skip();
}
