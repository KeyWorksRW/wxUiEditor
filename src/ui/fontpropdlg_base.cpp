////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include <wx/button.h>
#include <wx/sizer.h>
#include <wx/statbox.h>

#include "fontpropdlg_base.h"

bool FontPropDlgBase::Create(wxWindow *parent, wxWindowID id, const wxString &title,
        const wxPoint&pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_radioCustom = new wxRadioButton(this, wxID_ANY, "Custom Font");
    auto static_box_2 = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_radioCustom), wxVERTICAL);
    dlg_sizer->Add(static_box_2, wxSizerFlags().Expand().DoubleBorder(wxALL));

    m_staticText = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString);
    m_staticText->SetLabelMarkup("Leave Facename set to <b>default</b> to create a font that isn't dependent on a user's installed fonts.");
    m_staticText->Wrap(300);
    static_box_2->Add(m_staticText, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    static_box_2->Add(box_sizer_3, wxSizerFlags().Expand().Border(wxALL));

    auto box_sizer = new wxBoxSizer(wxVERTICAL);
    box_sizer_3->Add(box_sizer, wxSizerFlags().Border(wxALL));

    auto staticText = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "&Family:");
    box_sizer->Add(staticText, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_comboFamily = new wxComboBox(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxCB_READONLY);
    m_comboFamily->Append("default");
    m_comboFamily->Append("decorative");
    m_comboFamily->Append("roman");
    m_comboFamily->Append("script");
    m_comboFamily->Append("swiss");
    m_comboFamily->Append("modern");
    m_comboFamily->Append("teletype");
    m_comboFamily->Append(wxEmptyString);
    m_comboFamily->SetSelection(0);
    box_sizer->Add(m_comboFamily, wxSizerFlags().Border(wxALL));

    auto box_sizer_2 = new wxBoxSizer(wxVERTICAL);
    box_sizer_3->Add(box_sizer_2, wxSizerFlags().Border(wxALL));

    auto staticText_2 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "&Style:");
    box_sizer_2->Add(staticText_2, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_comboStyles = new wxComboBox(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxCB_READONLY);
    m_comboStyles->Append("normal");
    m_comboStyles->Append("italic");
    m_comboStyles->Append("slant");
    m_comboStyles->SetSelection(0);
    box_sizer_2->Add(m_comboStyles, wxSizerFlags().Border(wxALL));

    auto box_sizer_4 = new wxBoxSizer(wxVERTICAL);
    box_sizer_3->Add(box_sizer_4, wxSizerFlags().Border(wxALL));

    auto staticText_3 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "&Weight:");
    box_sizer_4->Add(staticText_3, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_comboWeight = new wxComboBox(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxCB_READONLY);
    m_comboWeight->Append("thin");
    m_comboWeight->Append("extra light");
    m_comboWeight->Append("light");
    m_comboWeight->Append("normal");
    m_comboWeight->Append("medium");
    m_comboWeight->Append("semi-bold");
    m_comboWeight->Append("bold");
    m_comboWeight->Append("extra bold");
    m_comboWeight->Append("heavy");
    m_comboWeight->Append("extra heavy");
    m_comboWeight->SetStringSelection("normal");
    box_sizer_4->Add(m_comboWeight, wxSizerFlags().Border(wxALL));

    auto box_sizer_8 = new wxBoxSizer(wxVERTICAL);
    box_sizer_3->Add(box_sizer_8, wxSizerFlags(1).Expand().Border(wxALL));

    auto staticText_5 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Face&name:");
    box_sizer_8->Add(staticText_5, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_comboFacenames = new wxComboBox(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxCB_READONLY);
    m_comboFacenames->Append("default");
    m_comboFacenames->SetStringSelection("default");
    box_sizer_8->Add(m_comboFacenames, wxSizerFlags().Expand().Border(wxALL));

    auto box_sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    static_box_2->Add(box_sizer_5, wxSizerFlags().Expand().Border(wxALL));

    auto box_sizer_6 = new wxBoxSizer(wxVERTICAL);
    box_sizer_5->Add(box_sizer_6, wxSizerFlags().Border(wxALL));

    auto staticText_4 = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "&Point Size:");
    box_sizer_6->Add(staticText_4, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_spinCtrlPointSIze = new wxSpinCtrlDouble(static_box_2->GetStaticBox(), wxID_ANY, wxEmptyString,
            wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 4, 72, 9, 0.5);
    m_spinCtrlPointSIze->SetDigits(1);
    box_sizer_6->Add(m_spinCtrlPointSIze, wxSizerFlags().Border(wxALL));

    auto box_sizer_7 = new wxBoxSizer(wxVERTICAL);
    box_sizer_5->Add(box_sizer_7, wxSizerFlags().Border(wxALL));

    box_sizer_7->AddSpacer(4);

    m_checkUnderlined = new wxCheckBox(static_box_2->GetStaticBox(), wxID_ANY, "&Underlined");
    box_sizer_7->Add(m_checkUnderlined, wxSizerFlags().Border(wxALL));

    m_checkStrikethrough = new wxCheckBox(static_box_2->GetStaticBox(), wxID_ANY, "S&trikethrough");
    box_sizer_7->Add(m_checkStrikethrough, wxSizerFlags().Border(wxALL));

    auto box_sizer_9 = new wxBoxSizer(wxVERTICAL);
    box_sizer_5->Add(box_sizer_9, wxSizerFlags(1).Expand().Border(wxALL));

    m_staticCustomSample = new wxStaticText(static_box_2->GetStaticBox(), wxID_ANY, "Sample");
    box_sizer_9->Add(m_staticCustomSample, wxSizerFlags(1).Center().Border(wxALL));

    m_radioSystem = new wxRadioButton(this, wxID_ANY, "System Font");
    auto static_box = new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, m_radioSystem), wxHORIZONTAL);
    dlg_sizer->Add(static_box, wxSizerFlags().Expand().DoubleBorder(wxALL));

    auto box_sizer_10 = new wxBoxSizer(wxVERTICAL);
    static_box->Add(box_sizer_10, wxSizerFlags().Border(wxALL));

    auto staticText_6 = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "F&ont:");
    box_sizer_10->Add(staticText_6, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_comboFonts = new wxComboBox(static_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxCB_READONLY);
    m_comboFonts->Append("Default GUI");
    m_comboFonts->Append("ANSI fixed");
    m_comboFonts->Append("OEM fixed");
    m_comboFonts->Append("ANSI variable");
    m_comboFonts->Append("system");
    m_comboFonts->Append("device default");
    m_comboFonts->SetStringSelection("Default GUI");
    box_sizer_10->Add(m_comboFonts, wxSizerFlags().Border(wxALL));

    auto box_sizer_11 = new wxBoxSizer(wxVERTICAL);
    static_box->Add(box_sizer_11, wxSizerFlags().Border(wxALL));

    auto staticText_7 = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "Point Si&ze:");
    box_sizer_11->Add(staticText_7, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_spinCtrlSystem = new wxSpinCtrlDouble(static_box->GetStaticBox(), wxID_ANY, wxEmptyString,
            wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 4, 72, 9, 0.5);
    m_spinCtrlSystem->SetDigits(1);
    box_sizer_11->Add(m_spinCtrlSystem, wxSizerFlags().Border(wxALL));

    auto box_sizer_12 = new wxBoxSizer(wxVERTICAL);
    static_box->Add(box_sizer_12, wxSizerFlags(1).Expand().Border(wxALL));

    m_staticSystemSample = new wxStaticText(static_box->GetStaticBox(), wxID_ANY, "Sample");
    box_sizer_12->Add(m_staticSystemSample, wxSizerFlags(1).Center().Border(wxALL));

    auto stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    m_radioCustom->Bind(wxEVT_RADIOBUTTON, &FontPropDlgBase::OnCustomRadio, this);
    m_comboFamily->Bind(wxEVT_COMBOBOX, &FontPropDlgBase::OnFamily, this);
    m_comboStyles->Bind(wxEVT_COMBOBOX, &FontPropDlgBase::OnStyle, this);
    m_comboWeight->Bind(wxEVT_COMBOBOX, &FontPropDlgBase::OnWeight, this);
    m_comboFacenames->Bind(wxEVT_COMBOBOX, &FontPropDlgBase::OnFacename, this);
    m_spinCtrlPointSIze->Bind(wxEVT_SPINCTRLDOUBLE, &FontPropDlgBase::OnPointSize, this);
    m_checkUnderlined->Bind(wxEVT_CHECKBOX, &FontPropDlgBase::OnUnderlined, this);
    m_checkStrikethrough->Bind(wxEVT_CHECKBOX, &FontPropDlgBase::OnStrikeThrough, this);
    m_radioSystem->Bind(wxEVT_RADIOBUTTON, &FontPropDlgBase::OnSystemRadio, this);
    m_comboFonts->Bind(wxEVT_COMBOBOX, &FontPropDlgBase::OnSysFont, this);
    m_spinCtrlSystem->Bind(wxEVT_SPINCTRLDOUBLE, &FontPropDlgBase::OnSysPointSize, this);

    return true;
}
