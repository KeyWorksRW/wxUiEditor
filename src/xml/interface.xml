<?xml version="1.0"?>
<GeneratorDefinitions>

<gen class="wxTopLevelWindow" type="interface">
    <event name="wxEVT_ACTIVATE" class="wxActivateEvent"
        help="An activate event is sent when a window or application is being activated or deactivated." />
    <event name="wxEVT_CLOSE_WINDOW" class="wxCloseEvent"
        help="" />
    <event name="wxEVT_ICONIZE" class="wxIconizeEvent"
        help="Only available for the wxMSW, wxGTK ports." />
    <event name="wxEVT_MAXIMIZE" class="wxMaximizeEvent"
        help="Currently this event is only generated in wxMSW, wxGTK and wxOSX/Cocoa ports." />
    <event name="wxEVT_MOVE" class="wxMoveEvent"
        help="Generated when a window is moved." />
    <event name="wxEVT_MOVING" class="wxMoveEvent"
        help="Generated while the user is moving the window. These events are currently only generated by wxMSW port." />
    <event name="wxEVT_MOVE_START" class="wxMoveEvent"
        help="Generated when the user starts to move or size a window. These events are currently only generated by wxMSW port." />
    <event name="wxEVT_MOVE_END" class="wxMoveEvent"
        help="Generated when the user stops moving or sizing a window. These events are currently only generated by wxMSW port." />
    <event name="wxEVT_SHOW" class="wxShowEvent"
        help="Only available for the wxMSW, wxGTK ports." />
    <event name="wxEVT_IDLE" class="wxIdleEvent"
        help="" />
</gen>

<gen class="UserCode" type="interface">
    <property name="enable_user_code" type="bool">0</property>
    <property name="user_cpp_code" type="string_edit" />
</gen>

<gen class="wxWindow" type="interface">
    <property name="id" type="id">
      wxID_ANY
      </property>
    <property name="pos" type="wxPoint"
        help="Window position. The default is (-1, -1) which indicates that wxWidgets should generate a default position for the window." />
    <property name="size" type="wxSize"
        help="Window size. The default is (-1, -1) which indicates that wxWidgets should generate a default size for the window." />
    <property name="minimum_size" type="wxSize"
        help="Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size." />
    <property name="maximum_size" type="wxSize"
        help="Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum allowable size." />
    <property name="variant" type="option">
        <option name="normal"
            help="Normal size" />
        <option name="small"
            help="About 25% smaller than normal." />
        <option name="mini"
            help="About 33% smaller than normal." />
        <option name="large"
            help="About 35% larger than normal." />
      normal
      </property>
    <property name="window_style" type="bitlist">
        <option name="wxBORDER_DEFAULT"
            help="The window class will decide the kind of border to show, if any." />
        <option name="wxBORDER_SIMPLE"
            help="Displays a thin border around the window. wxSIMPLE_BORDER is the old name for this style." />
        <option name="wxBORDER_SUNKEN"
            help="Displays a sunken border. wxSUNKEN_BORDER is the old name for this style." />
        <option name="wxBORDER_RAISED"
            help="Displays a raised border. wxRAISED_BORDER is the old name for this style." />
        <option name="wxBORDER_STATIC"
            help="Displays a border suitable for a static control. wxSTATIC_BORDER is the old name for this style. Windows only." />
        <option name="wxBORDER_THEME"
            help="Displays a native border suitable for a control, on the current platform. On Windows XP or Vista, this will be a themed border; on most other platforms a sunken border will be used. For more information for themed borders on Windows, please see Themed borders on Windows." />
        <option name="wxBORDER_NONE"
            help="Displays no border, overriding the default border style for the window. wxNO_BORDER is the old name for this style." />
        <option name="wxTRANSPARENT_WINDOW"
            help="The window is transparent, that is, it will not receive paint events. Windows only." />
        <option name="wxTAB_TRAVERSAL"
            help="Use this to enable tab traversal for non-dialog windows." />
        <option name="wxWANTS_CHARS"
            help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab." />
        <option name="wxVSCROLL"
            help="Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don't support scrollbars nor with top-level windows in most ports." />
        <option name="wxHSCROLL"
            help="Use this style to enable a horizontal scrollbar. The same limitations as for wxVSCROLL apply to this style." />
        <option name="wxALWAYS_SHOW_SB"
            help="If a window has scrollbars, disable them instead of hiding them when they are not needed (i.e. when the size of the window is big enough to not require the scrollbars to navigate it). This style is currently implemented for wxMSW, wxGTK and wxUniversal and does nothing on the other platforms." />
        <option name="wxCLIP_CHILDREN"
            help="Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only." />
        <option name="wxFULL_REPAINT_ON_RESIZE"
            help="Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms." />
        <option name="wxNO_FULL_REPAINT_ON_RESIZE"
            help="On Windows, this style used to disable repainting the window completely when its size is changed. Since this behaviour is now the default, the style is now obsolete and no longer has an effect." />
      </property>
    <property name="window_extra_style" type="bitlist">
        <option name="wxWS_EX_VALIDATE_RECURSIVELY"
            help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows." />
        <option name="wxWS_EX_BLOCK_EVENTS"
            help="wxCommandEvents and the objects of the derived classes are forwarded to the parent window and so on recursively by default. Using this flag for the given window allows to block this propagation at this window, i.e. prevent the events from being propagated further upwards. Dialogs have this flag on by default." />
        <option name="wxWS_EX_TRANSIENT"
            help="Don't use this window as an implicit parent for the other windows: this must be used with transient windows as otherwise there is the risk of creating a dialog/frame with this window as a parent which would lead to a crash if the parent is destroyed before the child." />
        <option name="wxWS_EX_CONTEXTHELP"
            help="Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a wxEVT_HELP event if the user clicked on an application window. This style cannot be used (because of the underlying native behaviour) together with wxMAXIMIZE_BOX or wxMINIMIZE_BOX, so these two styles are automatically turned off if this one is used." />
        <option name="wxWS_EX_PROCESS_IDLE"
            help="This window should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED." />
        <option name="wxWS_EX_PROCESS_UI_UPDATES"
            help="This window should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is wxUPDATE_UI_PROCESS_SPECIFIED." />
      </property>
    <property name="tooltip" type="string_edit_escapes"
        help="Attach a tooltip to the window." />
    <property name="disabled" type="bool"
        help="Disable the window for user input. Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is.">
      0
      </property>
    <property name="hidden" type="bool"
        help="Shows or hides the window.">
      0
      </property>
    <property name="font" type="wxFont"
        help="Sets the font for this window. This should not be use for a parent window if you don't want its font to be inherited by its children" />
    <property name="foreground_colour" type="wxColour"
        help="Sets the foreground colour of the window. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list." />
    <property name="background_colour" type="wxColour"
        help="Sets the background colour of the window. Use &quot;Window&quot; to let wxWidgets choose the color, otherwise specify one of the system colors in the list." />
    <property name="context_help" type="string_escapes"
        help="Sets the help text to be used as context-sensitive help for this window." />
    <property name="window_name" type="string_escapes"
        help="The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows." />
    <property name="base_class_name" type="string"
        help="If you have derived a class from a wxWidget class and you want this component to inherit from your derived class, then specify that class name here. You will need to add the header file for your class to the base_hdr_includes property." />
</gen>

<gen class="Window Events" type="interface">
    <category name="Focus Events" type="interface">
        <event name="wxEVT_KILL_FOCUS" class="wxFocusEvent" />
        <event name="wxEVT_SET_FOCUS" class="wxFocusEvent" />
    </category>
    <category name="General Events" type="interface">
        <event name="wxEVT_CONTEXT_MENU" class="wxContextMenuEvent" />
        <event name="wxEVT_ERASE_BACKGROUND" class="wxEraseEvent" />
        <event name="wxEVT_HELP" class="wxHelpEvent" />
        <event name="wxEVT_PAINT" class="wxPaintEvent" />
        <event name="wxEVT_SIZE" class="wxSizeEvent" />
        <event name="wxEVT_UPDATE_UI" class="wxUpdateUIEvent" />
    </category>
    <category name="Keyboard Events" type="interface">
        <event name="wxEVT_CHAR" class="wxKeyEvent" />
        <event name="wxEVT_CHAR_HOOK" class="wxKeyEvent"
            help="Unlike all the other key events, this event is propagated upwards the window hierarchy which allows intercepting it in the parent window of the focused window to which it is sent initially (if there is no focused window, this event is sent to the wxApp global object). It is also generated before any other key events and so gives the parent window an opportunity to modify the keyboard handling of its children, e.g. it is used internally by wxWidgets in some ports to intercept pressing Esc key in any child of a dialog to close the dialog itself when it's pressed. By default, if this event is handled, i.e. the handler doesn't call wxEvent::Skip(), neither wxEVT_KEY_DOWN nor wxEVT_CHAR events will be generated (although wxEVT_KEY_UP still will be), i.e. it replaces the normal key events. However by calling the special DoAllowNextEvent() method you can handle wxEVT_CHAR_HOOK and still allow normal events generation. This is something that is rarely useful but can be required if you need to prevent a parent wxEVT_CHAR_HOOK handler from running without suppressing the normal key events. Finally notice that this event is not generated when the mouse is captured as it is considered that the window which has the capture should receive all the keyboard events too without allowing its parent wxTopLevelWindow to interfere with their processing." />
        <event name="wxEVT_KEY_DOWN" class="wxKeyEvent"
            help="Generated when any key has been pressed. If this event is handled and not skipped, wxEVT_CHAR will not be generated at all for this key press (but wxEVT_KEY_UP will be)." />
        <event name="wxEVT_KEY_UP" class="wxKeyEvent"
            help="Generated when any key has been released." />
    </category>
    <category name="Mouse Events" type="interface">
        <event name="wxEVT_ENTER_WINDOW" class="wxMouseEvent" />
        <event name="wxEVT_LEAVE_WINDOW" class="wxMouseEvent" />
        <event name="wxEVT_LEFT_DCLICK" class="wxMouseEvent" />
        <event name="wxEVT_LEFT_DOWN" class="wxMouseEvent" />
        <event name="wxEVT_LEFT_UP" class="wxMouseEvent" />
        <event name="wxEVT_MIDDLE_DCLICK" class="wxMouseEvent" />
        <event name="wxEVT_MIDDLE_DOWN" class="wxMouseEvent" />
        <event name="wxEVT_MIDDLE_UP" class="wxMouseEvent" />
        <event name="wxEVT_RIGHT_DCLICK" class="wxMouseEvent" />
        <event name="wxEVT_RIGHT_DOWN" class="wxMouseEvent" />
        <event name="wxEVT_RIGHT_UP" class="wxMouseEvent" />
        <event name="wxEVT_AUX1_DCLICK" class="wxMouseEvent" />
        <event name="wxEVT_AUX1_DOWN" class="wxMouseEvent" />
        <event name="wxEVT_AUX1_UP" class="wxMouseEvent" />
        <event name="wxEVT_AUX2_DCLICK" class="wxMouseEvent" />
        <event name="wxEVT_AUX2_DOWN" class="wxMouseEvent" />
        <event name="wxEVT_AUX2_UP" class="wxMouseEvent" />
        <event name="wxEVT_MOTION" class="wxMouseEvent" />
        <event name="wxEVT_MOUSEWHEEL" class="wxMouseEvent" />
    </category>
</gen>

<gen class="wxTreeCtrlBase" type="interface">
    <event name="wxEVT_TREE_BEGIN_DRAG" class="wxTreeEvent"
        help="Generated when beginning to drag with the left mouse button." />
    <event name="wxEVT_TREE_BEGIN_RDRAG" class="wxTreeEvent"
        help="Generated when beginning to drag with the right mouse button." />
    <event name="wxEVT_TREE_END_DRAG" class="wxTreeEvent"
        help="Generated when ending dragging with the left or right mouse button." />
    <event name="wxEVT_TREE_BEGIN_LABEL_EDIT" class="wxTreeEvent"
        help="This can be prevented by calling Veto()." />
    <event name="wxEVT_TREE_END_LABEL_EDIT" class="wxTreeEvent"
        help="This can be prevented by calling Veto()." />
    <event name="wxEVT_TREE_DELETE_ITEM" class="wxTreeEvent" />
    <event name="wxEVT_TREE_ITEM_ACTIVATED" class="wxTreeEvent" />
    <event name="wxEVT_TREE_ITEM_COLLAPSED" class="wxTreeEvent" />
    <event name="wxEVT_TREE_ITEM_COLLAPSING" class="wxTreeEvent"
        help="This can be prevented by calling Veto()." />
    <event name="wxEVT_TREE_ITEM_EXPANDED" class="wxTreeEvent" />
    <event name="wxEVT_TREE_ITEM_EXPANDING" class="wxTreeEvent"
        help="This can be prevented by calling Veto()." />
    <event name="wxEVT_TREE_ITEM_RIGHT_CLICK" class="wxTreeEvent" />
    <event name="wxEVT_TREE_ITEM_MIDDLE_CLICK" class="wxTreeEvent" />
    <event name="wxEVT_TREE_SEL_CHANGED" class="wxTreeEvent" />
    <event name="wxEVT_TREE_SEL_CHANGING" class="wxTreeEvent"
        help="This can be prevented by calling Veto()." />
    <event name="wxEVT_TREE_KEY_DOWN" class="wxTreeEvent" />
    <event name="wxEVT_TREE_ITEM_MENU" class="wxTreeEvent"
        help="Generated when the context menu for the selected item has been requested, either by a right click or by using the menu key." />
</gen>

<gen class="Bitmaps" type="interface">
    <property name="bitmap" type="image"
        help="This is the bitmap shown in the default state. It will also be used for all other bitmaps if they are not explicitly set." />
    <property name="disabled_bmp" type="image"
        help="Bitmap shown when the button is disabled." />
    <property name="pressed_bmp" type="image"
        help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)." />
    <property name="focus" type="image"
        help="Bitmap shown when the button has keyboard focus but is not pressed." />
    <property name="current" type="image"
        help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for hover state as well. This makes it possible to set focus bitmap only to get reasonably good behaviour on all platforms." />
    <property name="position" type="option">
        <option name="" />
        <option name="wxLEFT"
            help="Positions the bitmap at the left" />
        <option name="wxRIGHT"
            help="Positions the bitmap at the right" />
        <option name="wxTOP"
            help="Positions the bitmap at the top" />
        <option name="wxBOTTOM"
            help="Positions the bitmap at the bottom" />
      </property>
    <property name="margins" type="wxSize"
        help="The margins between the bitmap and the text of the button. This is currently only implemented under MSW. If it is not specified, a default margin is used around the bitmap." />
</gen>

<!-- wxCommandLink needs a special version because position and margins are not used. -->
<gen class="Command Bitmaps" type="interface">
    <property name="bitmap" type="image"
        help="This is the bitmap shown in the default state. It will also be used for all other bitmaps if they are not explicitly set." />
    <property name="disabled_bmp" type="image"
        help="Bitmap shown when the button is disabled." />
    <property name="pressed_bmp" type="image"
        help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)." />
    <property name="focus" type="image"
        help="Bitmap shown when the button has keyboard focus but is not pressed." />
    <property name="current" type="image"
        help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for hover state as well. This makes it possible to set focus bitmap only to get reasonably good behaviour on all platforms." />
</gen>

<gen class="AUI" type="interface">
    <property name="aui_name" type="string_escapes"
        help="Sets the internal name of the pane." />
    <property name="caption_visible" type="bool"
        help="Indicates that a pane caption should be visible.">1</property>
    <property name="caption" type="string_escapes"
        help="Sets the caption of the pane." />
    <property name="close_button" type="bool"
        help="Indicates that a close button should be drawn for the pane.">
      1
      </property>
    <property name="maximize_button" type="bool"
        help="Indicates that a maximize button should be drawn for the pane.">
      0
      </property>
    <property name="minimize_button" type="bool"
        help="Indicates that a minimize button should be drawn for the pane.">
      0
      </property>
    <property name="pin_button" type="bool"
        help="Indicates that a pin button should be drawn for the pane.">
      1
      </property>
    <property name="pane_border" type="bool"
        help="Indicates that a border should be drawn for the pane.">
      1
      </property>
    <property name="show" type="bool"
        help="Indicates that a pane should be shown.">
      1
      </property>
    <property name="gripper" type="bool"
        help="Indicates that a gripper should be drawn for the pane.">
      0
      </property>
    <property name="center_pane" type="bool"
        help="Specifies that the pane should adopt the default center pane settings. Centre panes usually do not have caption bars. This function provides an easy way of preparing a pane to be displayed in the center dock position.">
      0
      </property>
    <property name="default_pane" type="bool"
        help="Specifies that the pane should adopt the default pane settings.">
      0
      </property>
    <property name="toolbar_pane" type="bool"
        help="Specifies that the pane should adopt the default toolbar pane settings.">
      0
      </property>
    <property name="moveable" type="bool"
        help="Indicates whether a frame can be moved.">
      1
      </property>
    <property name="resize" type="option">
        <option name="Resizable"
            help="Allows a pane to be resized if the parameter is true, and forces it to be a fixed size if the parameter is false." />
        <option name="Fixed"
            help="Forces a pane to be fixed size so that it cannot be resized." />
      Resizable
      </property>
    <property name="pane_size" type="wxSize"
        help="Sets the size of the floating pane." />
    <property name="best_size" type="wxSize"
        help="Sets the ideal size for the pane." />
    <property name="min_size" type="wxSize"
        help="Sets the minimum size of the pane." />
    <property name="max_size" type="wxSize"
        help="Sets the maximum size of the pane." />
    <property name="dock" type="option">
        <option name="Dock"
            help="Indicates that a pane should be docked." />
        <option name="Float"
            help="Indicates that a pane should be floated." />
      Dock
      </property>
    <property name="dock_fixed" type="bool"
        help="Causes the containing dock to have no resize sash. This is useful for creating panes that span the entire width or height of a dock, but should not be resizable in the other direction.">
      0
      </property>
    <property name="floatable" type="bool"
        help="Sets whether the user will be able to undock a pane and turn it into a floating window.">
      1
      </property>
    <property name="BottomDockable" type="bool"
        help="Indicates whether a pane can be docked at the bottom of the frame.">
      1
      </property>
    <property name="TopDockable" type="bool"
        help="Indicates whether a pane can be docked at the top of the frame.">
      1
      </property>
    <property name="LeftDockable" type="bool"
        help="Indicates whether a pane can be docked on the left of the frame.">
      1
      </property>
    <property name="RightDockable" type="bool"
        help="Indicates whether a pane can be docked on the right of the frame.">
      1
      </property>
    <property name="docking" type="option"
        help="Determines the direction of the docked pane.">
        <option name="Top" />
        <option name="Bottom" />
        <option name="Left" />
        <option name="Center" />
        <option name="Right" />
      Left
      </property>
    <property name="pane_position" type="wxPoint"
        help="Sets the position of the floating pane." />
    <property name="aui_position" type="uint"
        help="Determines the position of the docked pane." />
    <property name="aui_row" type="uint"
        help="Determines the row of the docked pane." />
    <property name="aui_layer" type="uint"
        help="Determines the layer of the docked pane. The dock layer is similar to an onion, the inner-most layer being layer 0. Each shell moving in the outward direction has a higher layer number. This allows for more complex docking layout formation." />
</gen>

<gen class="sizer_child" type="interface">
    <property name="alignment" type="bitlist">
        <option name="wxALIGN_LEFT"
            help="Align the item to the left of the space allotted to it by the sizer, adjusted for the border if any." />
        <option name="wxALIGN_TOP"
            help="Align the item to the top of the space allotted to it by the sizer, adjusted for the border if any." />
        <option name="wxALIGN_RIGHT"
            help="Align the item to the right of the space allotted to it by the sizer, adjusted for the border if any." />
        <option name="wxALIGN_BOTTOM"
            help="Align the item to the bottom of the space allotted to it by the sizer, adjusted for the border if any." />
        <option name="wxALIGN_CENTER"
            help="Align the item to the center of the space allotted to it by the sizer, adjusted for the border if any." />
        <option name="wxALIGN_CENTER_HORIZONTAL"
            help="Align the item to the horizontal center of the space allotted to it by the sizer, adjusted for the border if any." />
        <option name="wxALIGN_CENTER_VERTICAL"
            help="Align the item to the vertical center of the space allotted to it by the sizer, adjusted for the border if any." />
      </property>
    <property name="borders" type="bitlist">
        <option name="wxALL"
            help="Enable all borders" />
        <option name="wxLEFT"
            help="Enable the left border" />
        <option name="wxRIGHT"
            help="Enable the right border" />
        <option name="wxTOP"
            help="Enable the top border" />
        <option name="wxBOTTOM"
            help="Enable the bottom border" />
      wxALL
      </property>
    <property name="border_size" type="uint"
        help="Sets the border size, if the flag parameter is set to include any border flag. The default value of 5 will be scaled on high DPI displayes.">
      5
      </property>
    <property name="flags" type="bitlist">
        <option name="wxEXPAND"
            help="The item will be expanded to fill the space assigned to the item." />
        <option name="wxSHAPED"
            help="The item will be expanded as much as possible while also maintaining its aspect ratio." />
        <option name="wxFIXED_MINSIZE"
            help="Normally wxSizers will use GetAdjustedBestSize to determine what the minimal size of window items should be, and will use that size to calculate the layout. This allows layouts to adjust when an item changes and its best size becomes different. If you would rather have a window item stay the size it started with then use wxFIXED_MINSIZE." />
        <option name="wxRESERVE_SPACE_EVEN_IF_HIDDEN"
            help="Normally wxSizers don't allocate space for hidden windows or other items. This flag overrides this behaviour so that sufficient space is allocated for the window even if it isn't visible. This makes it possible to dynamically show and hide controls without resizing the parent window." />
      </property>
    <property name="proportion" type="uint"
        help="How much this control will stretch in proportion to the other controls in the same sizer. Set to 0 to prevent stretching.">
      0
      </property>
    <property name="row" type="int"
        help="Row for the item.">0</property>
    <property name="column" type="int"
        help="Column for the item.">0</property>
    <property name="rowspan" type="int"
        help="The number of rows that the item spans.">1</property>
    <property name="colspan" type="int"
        help="The number of columns that the item spans.">1</property>
</gen>

<gen class="Code Generation" type="interface">
    <property name="base_file" type="file"
        help="The filename of the base class.">
        filename_base
        </property>
    <property name="base_src_includes" type="string_edit"
        help="This preamble is added in addition to any src_preamble specified for the entire project. It will be placed unchanged at the top of the generated base src file after any (optional) precompiled header file. It is typically used to add header files needed for lambdas used as event handlers." />
    <property name="base_hdr_includes" type="string_edit"
        help="This preamble is placed unchanged in the generated base file after all wx/ include files. It is normally used to include additional header files." />
    <property name="derived_class_name" type="string"
        help="The name of the derived class.">
        DerivedClass
        </property>
    <property name="derived_file" type="file"
        help="The filename of the derived class." />
    <property name="generate_ids" type="bool"
        help="If checked, any non-wxWidgets ids will be created as an enumerated list. If you want to use your own id values, uncheck this and add the header file containing the ids to either base_src_includes or base_hdr_includes.">
        1
        </property>
</gen>

<gen class="Text Validator" type="interface">
    <property name="validator_variable" type="string"
        help="Name of a member variable associated with the validator" />
    <property name="validator_type" type="option"
        hidden="1"
        help="Type of a validator assigned to the window">
        <option name="wxTextValidator"
            help="Use this to transfer data to/from a wxString variable." />
        <option name="wxGenericValidator"
            help="Use this if you need to use something besides a wxString." />
      wxTextValidator
      </property>
    <property name="validator_data_type" type="option"
        hidden="1"
        help="Data type of the member variable">
        <option name="wxString"
            help="String value." />
        <option name="wxFileName"
            help="Only use this with a wxGenericValidator type." />
        <option name="int"
            help="Only use this with a wxGenericValidator type." />
        <option name="double"
            help="Only use this with a wxGenericValidator type." />
        <option name="float"
            help="Only use this with a wxGenericValidator type." />
    wxString
      </property>
    <property name="get_function" type="string"
        help="Function name to get the value of the variable." />
    <property name="set_function" type="string"
        help="Function name to set the value of the variable." />
    <property name="validator_style" type="bitlist"
        help="Data filtering style for wxTextValidator or wxGenericValidator.">
        <option name="wxFILTER_NONE"
            help="No filtering takes place." />
        <option name="wxFILTER_ASCII"
            help="Non-ASCII characters are filtered out." />
        <option name="wxFILTER_ALPHA"
            help="Non-alpha characters are filtered out." />
        <option name="wxFILTER_ALPHANUMERIC"
            help="Non-alphanumeric characters are filtered out." />
        <option name="wxFILTER_DIGITS"
            help="Non-numeric characters are filtered out. Uses isdigit() to perform the check." />
        <option name="wxFILTER_NUMERIC"
            help="Non-numeric characters are filtered out, but allows decimal points, minus/plus signs and the 'e' or 'E' character." />
        <option name="wxFILTER_INCLUDE_LIST"
            help="Use an include list. The validator checks if the user input is on the list, complaining if not. See wxTextValidator::SetIncludes." />
        <option name="wxFILTER_EXCLUDE_LIST"
            help="Use an exclude list. The validator checks if the user input is on the list, complaining if it is. See wxTextValidator::SetExcludes." />
        <option name="wxFILTER_INCLUDE_CHAR_LIST"
            help="Use an include list. The validator checks if each input character is in the list (one character per list element), complaining if not. See wxTextValidator::SetIncludes." />
        <option name="wxFILTER_EXCLUDE_CHAR_LIST"
            help="Use an include list. The validator checks if each input character is in the list (one character per list element), complaining if it is. See wxTextValidator::SetExcludes." />
      wxFILTER_NONE
      </property>
</gen>

<gen class="Boolean Validator" type="interface">
    <property name="validator_variable" type="string"
        help="Name of a member variable associated with the validator" />
    <property name="validator_data_type" type="option"
        hidden="1"
        help="Data type of the member variable">
        <option name="bool"
            help="Boolean value." />
    bool
      </property>
    <property name="get_function" type="string"
        help="Function name to get the value of the variable." />
    <property name="set_function" type="string"
        help="Function name to set the value of the variable." />
</gen>

<gen class="Integer Validator" type="interface">
    <property name="validator_variable" type="string"
        help="Name of a member variable associated with the validator" />
    <property name="validator_data_type" type="option"
        hidden="1"
        help="Data type of the member variable">
        <option name="int"
            help="Integer value." />
    int
      </property>
    <property name="get_function" type="string"
        help="Function name to get the value of the variable." />
    <property name="set_function" type="string"
        help="Function name to set the value of the variable." />
</gen>

<gen class="Choice Validator" type="interface">
    <property name="validator_variable" type="string"
        help="Name of a member variable associated with the validator" />
    <property name="validator_data_type" type="option"
        hidden="1"
        help="Data type of the member variable">
        <option name="wxString"
            help="String value." />
        <option name="int"
            help="Integer value." />
    wxString
      </property>
    <property name="get_function" type="string"
        help="Function name to get the value of the variable." />
    <property name="set_function" type="string"
        help="Function name to set the value of the variable." />
</gen>

<gen class="String Validator" type="interface">
    <property name="validator_variable" type="string"
        help="Name of a member variable associated with the validator" />
    <property name="validator_data_type" type="option"
        hidden="1"
        help="Data type of the member variable">
        <option name="wxString"
            help="String value." />
    wxString
      </property>
    <property name="get_function" type="string"
        help="Function name to get the value of the variable." />
    <property name="set_function" type="string"
        help="Function name to set the value of the variable." />
</gen>

<gen class="List Validator" type="interface">
    <property name="validator_variable" type="string"
        help="Name of a member variable associated with the validator" />
    <property name="validator_data_type" type="option"
        hidden="1"
        help="Data type of the member variable">
        <option name="wxArrayInt"
            help="Integer value." />
    wxArrayInt
      </property>
    <property name="get_function" type="string"
        help="Function name to get the value of the variable." />
    <property name="set_function" type="string"
        help="Function name to set the value of the variable." />
</gen>
</GeneratorDefinitions>
