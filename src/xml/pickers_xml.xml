inline const char* pickers_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="wxFilePickerCtrl" image="filePicker" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_filePicker</property>
		<property name="initial_path" type="path" />
		<property name="message" type="string_escapes" />
		<property name="wildcard" type="string_escapes" />
		<property name="style" type="bitlist">
			<option name="wxFLP_USE_TEXTCTRL"
				help="Creates a text control to the left of the picker button which is completely managed by the wxFilePickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control." />
			<option name="wxFLP_OPEN"
				help="Creates a picker which allows the user to select a file to open." />
			<option name="wxFLP_SAVE"
				help="Creates a picker which allows the user to select a file to save." />
			<option name="wxFLP_OVERWRITE_PROMPT"
				help="Can be combined with wxFLP_SAVE only: ask confirmation to the user before selecting a file." />
			<option name="wxFLP_FILE_MUST_EXIST"
				help="Can be combined with wxFLP_OPEN only: the selected file must be an existing file." />
			<option name="wxFLP_CHANGE_DIR"
				help="Change current working directory on each user file selection change." />
			<option name="wxFLP_SMALL"
				help="Use smaller version of the control with a small &quot;...&quot; button instead of the normal &quot;Browse&quot; one." />
			wxFLP_USE_TEXTCTRL|wxFLP_OPEN|wxFLP_FILE_MUST_EXIST
		</property>
		<property name="focus" type="bool"
			help="When checked, this control will be set to receive keyboard input when the parent form is first created.">0</property>
		<event name="wxEVT_FILEPICKER_CHANGED" class="wxFileDirPickerEvent"
			help="Generated when the user changes the file selected in the control either using the button or using text control (see wxFLP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing file path if wxFLP_FILE_MUST_EXIST was given)." />
	</gen>

	<gen class="wxDirPickerCtrl" image="dirPicker" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_dirPicker</property>
		<property name="initial_path" type="path" />
		<property name="message" type="string_escapes" />
		<property name="style" type="bitlist">
			<option name="wxDIRP_DEFAULT_STYLE"
				help="The default style is wxDIRP_DIR_MUST_EXIST and wxDIRP_USE_TEXTCTRL." />
			<option name="wxDIRP_USE_TEXTCTRL"
				help="Creates a text control to the left of the picker button which is completely managed by the wxDirPickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control." />
			<option name="wxDIRP_DIR_MUST_EXIST"
				help="Creates a picker which allows to select only existing directories. wxGTK control always adds this flag internally as it does not support its absence." />
			<option name="wxDIRP_CHANGE_DIR"
				help="Change current working directory on each user directory selection change." />
			<option name="wxDIRP_SMALL"
				help="Use smaller version of the control with a small &quot;...&quot; button instead of the normal &quot;Browse&quot; one." />
			wxDIRP_DEFAULT_STYLE
		</property>
		<property name="focus" type="bool"
			help="When checked, this control will be set to receive keyboard input when the parent form is first created.">0</property>
		<event name="wxEVT_DIRPICKER_CHANGED" class="wxFileDirPickerEvent"
			help="Generated when the user changes the directory selected in the control either using the button or using text control (see wxDIRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing directory path)." />
	</gen>

	<gen class="wxFontPickerCtrl" image="fontPicker" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_fontPicker</property>
		<property name="initial_font" type="wxFont" />
		<property name="min_point_size" type="uint"
			help="Sets the minimum point size value allowed for the user-chosen font">0</property>
		<property name="max_point_size" type="uint"
			help="Sets the maximum point size value allowed for the user-chosen font. The default value is 100. Note that big fonts can require a lot of memory and CPU time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see wxFNTP_USE_TEXTCTRL), it's a good idea to put a limit to the maximum font size when huge fonts do not make much sense.">100</property>
		<property name="style" type="bitlist">
			<option name="wxFNTP_USE_TEXTCTRL"
				help="Creates a text control to the left of the picker button which is completely managed by the wxFontPickerCtrl and which can be used by the user to specify a font (see SetSelectedFont). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control." />
			<option name="wxFNTP_FONTDESC_AS_LABEL"
				help="Keeps the label of the button updated with the fontface name and the font size. E.g. choosing &quot;Times New Roman bold, italic with size 10&quot; from the fontdialog, will update the label (overwriting any previous label) with the &quot;Times New Roman, 10&quot; text." />
			<option name="wxFNTP_USEFONT_FOR_LABEL"
				help="Uses the currently selected font to draw the label of the button." />
			wxFNTP_FONTDESC_AS_LABEL|wxFNTP_USEFONT_FOR_LABEL
		</property>
		<event name="wxEVT_FONTPICKER_CHANGED" class="wxFontPickerEvent"
			help="Generated when the user changs the font selected in the control either using the button or using text control (see wxFNTP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)." />
	</gen>

	<gen class="wxColourPickerCtrl" image="colourPickerIcon" type="widget">
		<inherits class="wxWindow">
			<hide name="variant" />
		</inherits>
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_colourPicker</property>
		<property name="colour" type="wxColour" help="Sets the initial colour." />
		<property name="style" type="bitlist">
			<option name="wxCLRP_USE_TEXTCTRL"
				help="Creates a text control to the left of the picker button which is completely managed by the wxColourPickerCtrl and which can be used by the user to specify a colour. The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control." />
			<option name="wxCLRP_SHOW_LABEL"
				help="Shows the colour in HTML form (AABBCC) as colour button label (instead of no label at all)." />
			<option name="wxCLRP_SHOW_ALPHA"
				help="Allows selecting opacity in the colour-chooser (effective under wxGTK and wxOSX). " />
		</property>
		<event name="wxEVT_COLOURPICKER_CHANGED" class="wxColourPickerEvent"
			help="Generated when the user changes the colour selected in the control either using the button or the text control (see wxCLRP_USE_TEXTCTRL. Note that in this case the event is fired only if the user's input is valid)." />
		<event name="wxEVT_COLOURPICKER_CURRENT_CHANGED" class="wxColourPickerEvent"
			help="Generated when the user changes the currently selected colour in the dialog associated with the control. Requires wxWidgets 3.1.3 or later, and currently only works on Windows." />
		<event name="EVT_COLOURPICKER_DIALOG_CANCELLED" class="wxColourPickerEvent"
			help="Generated if the user cancles the dialog associated with the control. Requires wxWidgets 3.1.3 or later, and currently only works on Windows." />
	</gen>

	<gen class="wxDatePickerCtrl" image="datepicker" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_datePicker</property>
		<property name="style" type="bitlist">
			<option name="wxDP_SPIN"
				help="Creates a control without a month calendar drop down but with spin-control-like arrows to change individual date components. This style is not supported by the generic version." />
			<option name="wxDP_DROPDOWN"
				help="Creates a control with a month calendar drop-down part from which the user can select a date. This style is not supported in OSX/Cocoa native version." />
			<option name="wxDP_SHOWCENTURY"
				help="Forces display of the century in the default date format. Without this style the century could be displayed, or not, depending on the default date representation in the system. This style is not supported in OSX/Cocoa native version currently." />
			<option name="wxDP_ALLOWNONE"
				help="With this style, the control allows the user to not enter any valid date at all. Without it - the default - the control always has some valid date. This style is not supported in OSX/Cocoa native version." />
			<option name="wxDP_DEFAULT"
				help="Creates a control with the style that is best supported for the current platform (currently wxDP_SPIN under Windows and OSX/Cocoa and wxDP_DROPDOWN elsewhere)." />
			wxDP_DEFAULT|wxDP_SHOWCENTURY
		</property>
		<property name="null_text" type="string"
			help="If wxDP_ALLOWNONE style is set, this will set the string displayed when the control doesn't have any valid value. Currently this is only actually used under MSW, where it can be used to override the previous value which is still displayed by the control in this case, and ignored elsewhere.\n\nNotably, text can be empty to completely hide the date if no valid date is specified."
		></property>
		<event name="wxEVT_DATE_CHANGED" class="wxDateEvent"
			help="Generated when the user changes the current selection in the control." />
	</gen>

	<gen class="wxTimePickerCtrl" image="timepicker" type="widget">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_timePicker</property>
		<property name="style" type="bitlist">
			<option name="wxTP_DEFAULT"
				help="Currently no special styles are defined for wxTimePickerCtrl." />
			wxTP_DEFAULT
		</property>
		<event name="wxEVT_TIME_CHANGED" class="wxDateEvent"
			help="Generated when the user changes the current selection in the control." />
	</gen>
</GeneratorDefinitions>)===";
