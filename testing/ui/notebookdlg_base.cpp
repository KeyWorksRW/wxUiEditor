////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////

#include "pch.h"

#include <wx/panel.h>
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/sizer.h>
#include <wx/statbox.h>
#include <wx/valgen.h>

#include "notebookdlg_base.h"

NotebookDlgBase::NotebookDlgBase(wxWindow* parent, wxWindowID id, const wxString& title,
		const wxPoint& pos, const wxSize& size, long style) :
	wxDialog(parent, id, title, pos, size, style)
{
    SetSizeHints(wxDefaultSize);

    auto parent_sizer = new wxBoxSizer(wxVERTICAL);

    m_notebook = new wxNotebook(this, wxID_ANY);
    parent_sizer->Add(m_notebook, wxSizerFlags(1).Expand().Border(wxALL));

    auto page = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_THEME|wxTAB_TRAVERSAL);
    m_notebook->AddPage(page, wxString::FromUTF8("Pickers"), true);

    auto parent_sizer2 = new wxBoxSizer(wxVERTICAL);

    auto static_box = new wxStaticBoxSizer(wxVERTICAL, page, wxString::FromUTF8("Pickers"));
    parent_sizer2->Add(static_box, wxSizerFlags().Expand().Border(wxALL));

    m_filePicker = new wxFilePickerCtrl(static_box->GetStaticBox(), wxID_ANY, wxEmptyString, wxFileSelectorPromptStr, 
    wxString::FromUTF8("BMP files|*.bmp"), wxDefaultPosition, wxDefaultSize,
    wxFLP_USE_TEXTCTRL|wxFLP_OPEN|wxFLP_FILE_MUST_EXIST);
    static_box->Add(m_filePicker, wxSizerFlags().Border(wxALL));

    m_dirPicker = new wxDirPickerCtrl(static_box->GetStaticBox(), wxID_ANY, wxString::FromUTF8("."),  wxDirSelectorPromptStr, wxDefaultPosition, wxDefaultSize,
    wxDIRP_DEFAULT_STYLE|wxDIRP_SMALL);
    static_box->Add(m_dirPicker, wxSizerFlags().Border(wxALL));

    m_colourPicker = new wxColourPickerCtrl(static_box->GetStaticBox(), wxID_ANY, *wxBLACK);
    static_box->Add(m_colourPicker, wxSizerFlags().Border(wxALL));

    m_datePicker = new wxDatePickerCtrl(static_box->GetStaticBox(), wxID_ANY, wxDefaultDateTime);
    static_box->Add(m_datePicker, wxSizerFlags().Border(wxALL));

    m_timePicker = new wxTimePickerCtrl(static_box->GetStaticBox(), wxID_ANY, wxDefaultDateTime);
    static_box->Add(m_timePicker, wxSizerFlags().Border(wxALL));

    m_fontPicker = new wxFontPickerCtrl(static_box->GetStaticBox(), wxID_ANY, 
    wxFont(wxNORMAL_FONT->GetPointSize(), wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, "Comic Sans MS"), wxDefaultPosition, wxDefaultSize,
    wxFNTP_DEFAULT_STYLE|wxFNTP_USE_TEXTCTRL);
    static_box->Add(m_fontPicker, wxSizerFlags().Border(wxALL));

    page->SetSizerAndFit(parent_sizer2);

    auto m_panel2 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_RAISED|wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel2, wxString::FromUTF8("Spinners"));

    auto parent_sizer3 = new wxBoxSizer(wxVERTICAL);

    m_scrollBar = new wxScrollBar(m_panel2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSB_HORIZONTAL);
    m_scrollBar->SetScrollbar(0, 1, 100, 1);
    parent_sizer3->Add(m_scrollBar, wxSizerFlags().Expand().Border(wxALL));

    m_spinCtrl = new wxSpinCtrl(m_panel2, wxID_ANY, wxEmptyString,
    wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 10, 4);
    m_spinCtrl->SetValidator(wxGenericValidator(&m_spinValidate));
    parent_sizer3->Add(m_spinCtrl, wxSizerFlags().Border(wxALL));

    m_spinCtrlDouble = new wxSpinCtrlDouble(m_panel2);
    m_spinCtrlDouble->SetDigits(0);
    parent_sizer3->Add(m_spinCtrlDouble, wxSizerFlags().Border(wxALL));

    m_spinBtn = new wxSpinButton(m_panel2);
    parent_sizer3->Add(m_spinBtn, wxSizerFlags().Border(wxALL));

    m_panel2->SetSizerAndFit(parent_sizer3);

    auto m_panel3 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel3, wxString::FromUTF8("HTML"), true);

    auto parent_sizer4 = new wxBoxSizer(wxVERTICAL);

    m_htmlWin = new wxHtmlWindow(m_panel3);
    parent_sizer4->Add(m_htmlWin, wxSizerFlags().Border(wxALL));

    m_panel3->SetSizerAndFit(parent_sizer4);

    auto m_panel4 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel4, wxString::FromUTF8("RTF"));

    auto parent_sizer5 = new wxBoxSizer(wxVERTICAL);

    m_richText = new wxRichTextCtrl(m_panel4, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxVSCROLL | wxHSCROLL | wxNO_BORDER | wxWANTS_CHARS);
    parent_sizer5->Add(m_richText, wxSizerFlags(1).Expand().Border(wxALL));

    m_panel4->SetSizerAndFit(parent_sizer5);

    auto m_panel5 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel5, wxString::FromUTF8("Scintilla"));

    auto parent_sizer6 = new wxBoxSizer(wxVERTICAL);

    m_scintilla = new wxStyledTextCtrl(m_panel5, wxID_ANY);
	{
		m_scintilla->SetProperty("fold", "1");
		m_scintilla->SetMarginType(1, wxSTC_MARGIN_SYMBOL);
		m_scintilla->SetMarginMask(1, wxSTC_MASK_FOLDERS);
		m_scintilla->SetMarginWidth(1, 16);
		m_scintilla->SetMarginSensitive(1, true);
		m_scintilla->SetFoldFlags(wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED | wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED);
		m_scintilla->SetMarginType(0, wxSTC_MARGIN_NUMBER);
		m_scintilla->SetMarginWidth(0, m_scintilla->TextWidth(wxSTC_STYLE_LINENUMBER, "_99999"));
		m_scintilla->SetBackSpaceUnIndents(true);
	}
    parent_sizer6->Add(m_scintilla, wxSizerFlags(1).Expand().Border(wxALL));

    m_panel5->SetSizerAndFit(parent_sizer6);

    auto m_panel6 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panel6, wxString::FromUTF8("Misc"));

    auto parent_sizer7 = new wxBoxSizer(wxVERTICAL);

    auto box_sizer = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer7->Add(box_sizer, wxSizerFlags().Expand().Border(wxALL));

    m_toggleBtn = new wxToggleButton(m_panel6, wxID_ANY, wxString::FromUTF8("Toggle"));
    box_sizer->Add(m_toggleBtn, wxSizerFlags().Border(wxALL));

    m_hyperlink = new wxHyperlinkCtrl(m_panel6, wxID_ANY, wxString::FromUTF8("GitHub Website"), wxString::FromUTF8("https://github.com/"), wxDefaultPosition, wxDefaultSize,
    wxHL_DEFAULT_STYLE);
    box_sizer->Add(m_hyperlink, wxSizerFlags().Center().Border(wxALL));

    m_searchCtrl = new wxSearchCtrl(m_panel6, wxID_ANY, wxString::FromUTF8("Search for something..."));
    m_searchCtrl->ShowSearchButton(true);
    box_sizer->Add(m_searchCtrl, wxSizerFlags(1).Border(wxALL));

    auto box_sizer2 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer7->Add(box_sizer2, wxSizerFlags(1).Expand().Border(wxALL));

    m_calendar = new wxCalendarCtrl(m_panel6, wxID_ANY);
    box_sizer2->Add(m_calendar, wxSizerFlags().Border(wxALL));

    m_genericDirCtrl = new wxGenericDirCtrl(m_panel6, wxID_ANY, wxDirDialogDefaultFolderStr, wxDefaultPosition, wxDefaultSize, wxDIRCTRL_3D_INTERNAL|wxSUNKEN_BORDER);
    box_sizer2->Add(m_genericDirCtrl, wxSizerFlags(1).Expand().Border(wxALL));

    m_panel6->SetSizerAndFit(parent_sizer7);

    SetSizerAndFit(parent_sizer);

    Centre(wxBOTH);

    SetName("NotebookDlgBase");
    wxPersistentRegisterAndRestore(this);
}
