///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/radiobut.h>
#include <wx/sizer.h>
#include <wx/stattext.h>
#include <wx/valgen.h>

#include "node_search_dlg.h"

#include "../panels/nav_panel.h"
#include "mainframe.h"
#include "node.h"
#include "project_handler.h"
#include "unused_gen_dlg.h"

bool NodeSearchDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto* box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_3->SetMinSize(500, -1);

    auto* radioBtn_Generators = new wxRadioButton(this, wxID_ANY, "&Generators", wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    radioBtn_Generators->SetValue(true);
    radioBtn_Generators->SetValidator(wxGenericValidator(&m_search_generators));
    box_sizer_3->Add(radioBtn_Generators, wxSizerFlags().Border(wxALL));

    auto* radio_variables = new wxRadioButton(this, wxID_ANY, "&Variables");
    radio_variables->SetValidator(wxGenericValidator(&m_search_varnames));
    box_sizer_3->Add(radio_variables, wxSizerFlags().Border(wxALL));

    auto* radioBtn_Labels = new wxRadioButton(this, wxID_ANY, "&Labels");
    radioBtn_Labels->SetValidator(wxGenericValidator(&m_search_labels));
    box_sizer_3->Add(radioBtn_Labels, wxSizerFlags().Border(wxALL));

    auto* radioBtn_IDs = new wxRadioButton(this, wxID_ANY, "&IDs");
    radioBtn_IDs->SetValidator(wxGenericValidator(&m_search_ids));
    box_sizer_3->Add(radioBtn_IDs, wxSizerFlags().Border(wxALL));

    auto* btn = new wxButton(this, wxID_ANY, "Unused...");
    box_sizer_3->Add(btn, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    dlg_sizer->Add(box_sizer_3, wxSizerFlags().Expand().Border(wxALL));

    auto* box_sizer = new wxBoxSizer(wxHORIZONTAL);

    m_text_search = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    m_text_search->SetHint("Enter item to search for");
    box_sizer->Add(m_text_search, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    dlg_sizer->Add(box_sizer, wxSizerFlags().Border(wxALL));

    auto* box_sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_4->SetMinSize(500, -1);

    auto* box_sizer_5 = new wxBoxSizer(wxVERTICAL);

    auto* staticText = new wxStaticText(this, wxID_ANY, "&Located:");
    box_sizer_5->Add(staticText, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_listbox = new wxListBox(this, wxID_ANY);
    m_listbox->SetMinSize(FromDIP(wxSize(240, 250)));
    box_sizer_5->Add(m_listbox, wxSizerFlags(1).Expand().Border(wxALL));

    box_sizer_4->Add(box_sizer_5, wxSizerFlags(1).Expand().Border(wxALL));

    auto* box_sizer_6 = new wxBoxSizer(wxVERTICAL);

    auto* staticText_2 = new wxStaticText(this, wxID_ANY, "&Forms:");
    box_sizer_6->Add(staticText_2, wxSizerFlags().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    m_listbox_forms = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxLB_SINGLE|wxLB_SORT);
    m_listbox_forms->SetMinSize(FromDIP(wxSize(-1, 250)));
    box_sizer_6->Add(m_listbox_forms, wxSizerFlags(1).Expand().Border(wxALL));

    box_sizer_4->Add(box_sizer_6, wxSizerFlags(1).Expand().Border(wxALL));

    dlg_sizer->Add(box_sizer_4, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    m_text_search->SetFocus();

    Centre(wxBOTH);

    wxPersistentRegisterAndRestore(this, "NodeSearchDlg");

    // Event handlers
    Bind(wxEVT_BUTTON, &NodeSearchDlg::OnOK, this, wxID_OK);
    btn->Bind(wxEVT_BUTTON, &NodeSearchDlg::OnUnused, this);
    Bind(wxEVT_INIT_DIALOG, &NodeSearchDlg::OnInit, this);
    m_listbox->Bind(wxEVT_LISTBOX, &NodeSearchDlg::OnSelectLocated, this);
    radioBtn_Generators->Bind(wxEVT_RADIOBUTTON, &NodeSearchDlg::OnGenerators, this);
    radioBtn_IDs->Bind(wxEVT_RADIOBUTTON, &NodeSearchDlg::OnIDs, this);
    radioBtn_Labels->Bind(wxEVT_RADIOBUTTON, &NodeSearchDlg::OnLabels, this);
    radio_variables->Bind(wxEVT_RADIOBUTTON, &NodeSearchDlg::OnVariables, this);
    m_text_search->Bind(wxEVT_TEXT, &NodeSearchDlg::OnSearchText, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Author:    Ralph Walden
// Copyright: Copyright (c) 2022-2023 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

Node* FindNodeByClassName(Node* node_start, const std::string& classname)
{
    for (const auto& child_form: node_start->getChildNodePtrs())
    {
        if (child_form->isGen(gen_Images) || child_form->isGen(gen_Data))
            continue;

        if (child_form->hasValue(prop_class_name) && child_form->as_string(prop_class_name) == classname)
            return child_form.get();

        if (child_form->isGen(gen_folder) || child_form->isGen(gen_sub_folder))
        {
            if (auto result = FindNodeByClassName(child_form.get(), classname); result)
            {
                return result;
            }
        }
    }

    return nullptr;
}

Node* FindNodeByGenerator(Node* node, GenEnum::GenName getGenName)
{
    if (node->isGen(getGenName))
        return node;

    for (auto& child: node->getChildNodePtrs())
    {
        auto result = FindNodeByGenerator(child.get(), getGenName);
        if (result)
            return result;
    }

    return nullptr;
}

void MainFrame::OnFindWidget(wxCommandEvent& WXUNUSED(event))
{
    NodeSearchDlg dlg(this);
    if (dlg.ShowModal() == wxID_OK && dlg.GetForm())
    {
        // Recursively search for the first Node* containing a property with a specific value.
        auto FindNodeByProp = [&](Node* node, GenEnum::PropName prop, const std::string& label_name,
                                  auto&& FindNodeByProp) -> Node*
        {
            if (node->hasValue(prop) && node->as_string(prop) == label_name)
                return node;

            for (auto& child: node->getChildNodePtrs())
            {
                auto result = FindNodeByProp(child.get(), prop, label_name, FindNodeByProp);
                if (result)
                    return result;
            }

            return nullptr;
        };

        if (dlg.isSearchGenerators())
        {
            auto* node = FindNodeByGenerator(dlg.GetForm(), rmap_GenNames[dlg.GetNameChoice()]);
            if (node)
            {
                SelectNode(node);
                m_nav_panel->SetFocus();
            }
            else
            {
                wxMessageBox(wxString() << "Unable to find " << dlg.GetName());
            }
        }
        else if (dlg.isSearchVarnames())
        {
            auto node = FindNodeByProp(dlg.GetForm(), prop_var_name, dlg.GetNameChoice(), FindNodeByProp);
            if (node)
            {
                SelectNode(node);
                m_nav_panel->SetFocus();
            }
            else
            {
                wxMessageBox(wxString() << "Unable to find " << dlg.GetNameChoice());
            }
        }
        else if (dlg.isSearchLabels())
        {
            auto node = FindNodeByProp(dlg.GetForm(), prop_label, dlg.GetNameChoice(), FindNodeByProp);
            if (node)
            {
                SelectNode(node);
                m_nav_panel->SetFocus();
            }
            else
            {
                wxMessageBox(wxString() << "Unable to find " << dlg.GetNameChoice());
            }
        }
        else if (dlg.isSearchIDs())
        {
            auto node = FindNodeByProp(dlg.GetForm(), prop_id, dlg.GetNameChoice(), FindNodeByProp);
            if (node)
            {
                SelectNode(node);
                m_nav_panel->SetFocus();
            }
            else
            {
                wxMessageBox(wxString() << "Unable to find " << dlg.GetNameChoice());
            }
        }
        else
        {
            wxMessageBox("No selected node, or search criteria selected");
        }
    }
}

void NodeSearchDlg::FindGenerators(Node* node)
{
    if (node->isGen(gen_Images) || node->isGen(gen_Data))
        return;

    if (!node->isGen(gen_folder) && !node->isGen(gen_sub_folder))
    {
        if (!m_map_found.contains(map_GenNames[node->getGenName()]))
        {
            std::set<Node*> list;
            if (!node->isForm())
            {
                list.emplace(node->getForm());
            }
            else
            {
                auto* parent = node->getParent();
                if (parent->isGen(gen_folder) || parent->isGen(gen_sub_folder))
                {
                    list.emplace(node->getForm());
                }
                else
                {
                    list.emplace(Project.getProjectNode());
                }
            }
            m_map_found[map_GenNames[node->getGenName()]] = list;
        }
        else if (!node->isForm())
        {
            auto& list = m_map_found.at(map_GenNames[node->getGenName()]);
            list.emplace(node->isForm() ? node->getParent() : node->getForm());
        }
    }

    if (node->getChildCount())
    {
        for (auto& child: node->getChildNodePtrs())
        {
            FindGenerators(child.get());
        }
    }
}

void NodeSearchDlg::FindVariables(Node* node)
{
    if (node->isGen(gen_Images) || node->isGen(gen_Data))
        return;

    if (node->hasProp(prop_var_name) && node->hasValue(prop_var_name) && !node->isGen(gen_folder) &&
        !node->isGen(gen_sub_folder))
    {
        if (!m_map_found.contains(node->as_string(prop_var_name)))
        {
            std::set<Node*> form_list;
            if (!node->isForm())
            {
                form_list.emplace(node->getForm());
            }
            else
            {
                auto* parent = node->getParent();
                if (parent->isGen(gen_folder) || parent->isGen(gen_sub_folder))
                {
                    form_list.emplace(node->getForm());
                }
                else
                {
                    form_list.emplace(Project.getProjectNode());
                }
            }
            m_map_found[node->as_string(prop_var_name)] = form_list;
        }
        else if (!node->isForm())
        {
            auto& form_list = m_map_found.at(node->as_string(prop_var_name));
            form_list.emplace(node->isForm() ? node->getParent() : node->getForm());
        }
    }

    if (node->getChildCount())
    {
        for (auto& child: node->getChildNodePtrs())
        {
            FindVariables(child.get());
        }
    }
}

void NodeSearchDlg::FindLabels(Node* node)
{
    if (node->isGen(gen_Images) || node->isGen(gen_Data))
        return;

    if (node->hasProp(prop_label) && node->hasValue(prop_label) && !node->isGen(gen_folder) && !node->isGen(gen_sub_folder))
    {
        if (!m_map_found.contains(node->as_string(prop_label)))
        {
            std::set<Node*> form_list;
            if (!node->isForm())
            {
                form_list.emplace(node->getForm());
            }
            else
            {
                auto* parent = node->getParent();
                if (parent->isGen(gen_folder) || parent->isGen(gen_sub_folder))
                {
                    form_list.emplace(node->getForm());
                }
                else
                {
                    form_list.emplace(Project.getProjectNode());
                }
            }
            m_map_found[node->as_string(prop_label)] = form_list;
        }
        else if (!node->isForm())
        {
            auto& form_list = m_map_found.at(node->as_string(prop_label));
            form_list.emplace(node->isForm() ? node->getParent() : node->getForm());
        }
    }

    if (node->getChildCount())
    {
        for (auto& child: node->getChildNodePtrs())
        {
            FindLabels(child.get());
        }
    }
}

void NodeSearchDlg::OnGenerators(wxCommandEvent& WXUNUSED(event))
{
    m_map_found.clear();
    m_listbox->Clear();
    m_listbox_forms->Clear();

    if (auto cur_sel = wxGetFrame().getSelectedNode(); cur_sel)
    {
        if (cur_sel->isGen(gen_Project) || cur_sel->isGen(gen_folder) || cur_sel->isGen(gen_sub_folder))
        {
            for (auto& child: cur_sel->getChildNodePtrs())
            {
                FindGenerators(child.get());
            }
        }
        else
        {
            FindGenerators(wxGetFrame().getSelectedNode());
        }
        for (auto& iter: m_map_found)
        {
            m_listbox->Append(iter.first);
        }
    }
}

void NodeSearchDlg::OnVariables(wxCommandEvent& WXUNUSED(event))
{
    m_map_found.clear();
    m_listbox->Clear();
    m_listbox_forms->Clear();

    if (auto cur_sel = wxGetFrame().getSelectedNode(); cur_sel)
    {
        if (cur_sel->isGen(gen_Project) || cur_sel->isGen(gen_folder) || cur_sel->isGen(gen_sub_folder))
        {
            for (auto& child: cur_sel->getChildNodePtrs())
            {
                FindVariables(child.get());
            }
        }
        else
        {
            FindVariables(wxGetFrame().getSelectedNode());
        }
        for (auto& iter: m_map_found)
        {
            m_listbox->Append(iter.first);
        }
    }
}

void NodeSearchDlg::OnLabels(wxCommandEvent& WXUNUSED(event))
{
    m_map_found.clear();
    m_listbox->Clear();
    m_listbox_forms->Clear();

    if (auto cur_sel = wxGetFrame().getSelectedNode(); cur_sel)
    {
        if (cur_sel->isGen(gen_Project) || cur_sel->isGen(gen_folder) || cur_sel->isGen(gen_sub_folder))
        {
            for (auto& child: cur_sel->getChildNodePtrs())
            {
                FindLabels(child.get());
            }
        }
        else
        {
            FindLabels(wxGetFrame().getSelectedNode());
        }
        for (auto& iter: m_map_found)
        {
            m_listbox->Append(iter.first);
        }
    }
}

void NodeSearchDlg::OnIDs(wxCommandEvent& WXUNUSED(event))
{
    m_map_found.clear();
    m_listbox->Clear();
    m_listbox_forms->Clear();

    auto FindIDs = [&](Node* node, auto&& FindIDs) -> void
    {
        if (node->isGen(gen_Images) || node->isGen(gen_Data))
            return;

        if (!node->isNonWidget() && node->hasProp(prop_id) && node->hasValue(prop_id) &&
            !node->as_string(prop_id).starts_with("wxID_ANY"))
        {
            if (!m_map_found.contains(node->as_string(prop_id)))
            {
                std::set<Node*> form_list;
                if (!node->isForm())
                {
                    form_list.emplace(node->getForm());
                }
                else
                {
                    auto* parent = node->getParent();
                    if (parent->isGen(gen_folder) || parent->isGen(gen_sub_folder))
                    {
                        form_list.emplace(node->getForm());
                    }
                    else
                    {
                        form_list.emplace(Project.getProjectNode());
                    }
                }
                m_map_found[node->as_string(prop_id)] = form_list;
            }
            else if (!node->isForm())
            {
                auto& form_list = m_map_found.at(node->as_string(prop_id));
                form_list.emplace(node->isForm() ? node->getParent() : node->getForm());
            }
        }

        if (node->getChildCount())
        {
            for (auto& child: node->getChildNodePtrs())
            {
                FindIDs(child.get(), FindIDs);
            }
        }
    };

    if (auto cur_sel = wxGetFrame().getSelectedNode(); cur_sel)
    {
        if (cur_sel->isGen(gen_Project) || cur_sel->isGen(gen_folder) || cur_sel->isGen(gen_sub_folder))
        {
            for (auto& child: cur_sel->getChildNodePtrs())
            {
                FindIDs(child.get(), FindIDs);
            }
        }
        else
        {
            FindIDs(wxGetFrame().getSelectedNode(), FindIDs);
        }
        for (auto& iter: m_map_found)
        {
            m_listbox->Append(iter.first);
        }
    }
}

void NodeSearchDlg::OnInit(wxInitDialogEvent& event)
{
    wxCommandEvent dummy;
    OnGenerators(dummy);

    m_text_search->SetFocus();

    event.Skip();
}

void NodeSearchDlg::OnOK(wxCommandEvent& event)
{
    if (m_listbox->GetCount() > 0)
    {
        m_name = m_listbox->GetStringSelection().ToStdString();
        if (m_listbox_forms->GetCount() > 0)
        {
            if (auto class_name = m_listbox_forms->GetStringSelection().ToStdString(); class_name.size())
            {
                m_form = FindNodeByClassName(Project.getProjectNode(), class_name);
            }
            else
            {
                m_form = wxGetFrame().getSelectedNode();
            }
        }
        else if (wxGetFrame().getSelectedNode()->isForm())
        {
            m_form = wxGetFrame().getSelectedNode();
        }
        else
        {
            m_form = wxGetFrame().getSelectedNode()->getForm();
        }
    }

    event.Skip();
}

void NodeSearchDlg::OnSelectLocated(wxCommandEvent& WXUNUSED(event))
{
    auto name = m_listbox->GetStringSelection().utf8_string();
    if (m_map_found.contains(name))
    {
        auto& list = m_map_found.at(name);
        m_listbox_forms->Clear();
        for (auto& iter: list)
        {
            m_listbox_forms->Append(iter->as_string(prop_class_name).make_wxString());
        }
        if (m_listbox_forms->GetCount() > 0)
        {
            m_listbox_forms->SetSelection(0);
        }
    }
}

void NodeSearchDlg::OnUnused(wxCommandEvent& WXUNUSED(event))
{
    UnusedGenerators dlg(this);
    dlg.ShowModal();
}

void NodeSearchDlg::OnSearchText(wxCommandEvent& WXUNUSED(event))
{
    auto search_text = m_text_search->GetValue().ToStdString();
    for (auto& iter: m_map_found)
    {
        if (iter.first.starts_with(search_text))
        {
            m_listbox->SetSelection(m_listbox->FindString(iter.first));
            wxCommandEvent dummy_event;
            OnSelectLocated(dummy_event);
            break;
        }
    }
}
