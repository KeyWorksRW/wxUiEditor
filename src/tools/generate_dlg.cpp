///////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor - see https://github.com/KeyWorksRW/wxUiEditor/
//
// Do not edit any code above the "End of generated code" comment block.
// Any changes before that block will be lost if it is re-generated!
///////////////////////////////////////////////////////////////////////////////

// clang-format off

#include <wx/button.h>

#include "generate_dlg.h"

bool GenerateDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    // Scaling of pos and size are handled after the dialog
    // has been created and controls added.
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
    {
        return false;
    }

    auto* dlg_sizer = new wxBoxSizer(wxVERTICAL);

    m_staticText = new wxStaticText(this, wxID_ANY, "Choose the code you want to generate:");
    dlg_sizer->Add(m_staticText, wxSizerFlags().Border(wxALL));

    m_grid_sizer = new wxGridSizer(2, 0, 0);

    dlg_sizer->Add(m_grid_sizer, wxSizerFlags().Border(wxALL));

    auto* stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    dlg_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    if (pos != wxDefaultPosition)
    {
        // Now that the dialog is created, set the scaled position
        SetPosition(FromDIP(pos));
    }
    if (size == wxDefaultSize)
    {
        // If default size let the sizer set the dialog's size
        // so that it is large enough to fit it's child controls.
        SetSizerAndFit(dlg_sizer);
    }
    else
    {
        SetSizer(dlg_sizer);
        if (size.x == wxDefaultCoord || size.y == wxDefaultCoord)
        {
            // Use the sizer to calculate the missing dimension
            Fit();
        }
        SetSize(FromDIP(size));
        Layout();
    }
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &GenerateDlg::OnInit, this);

    return true;
}

// ************* End of generated code ***********
// DO NOT EDIT THIS COMMENT BLOCK!
//
// Code below this comment block will be preserved
// if the code for this class is re-generated.
//
// clang-format on
// ***********************************************

/////////////////// Non-generated Copyright/License Info ////////////////////
// Purpose:   Dialog for choosing and generating specific language file(s)
// Author:    Ralph Walden
// Copyright: Copyright (c) 2021-2024 KeyWorks Software (Ralph Walden)
// License:   Apache License -- see ../../LICENSE
/////////////////////////////////////////////////////////////////////////////

#include <wx/config.h>  // wxConfig base header

#include "gen_base.h"         // BaseCodeGenerator -- Generate Src and Hdr files for Base Class
#include "gen_common.h"       // Common component functions
#include "gen_results.h"      // Code generation file writing functions
#include "image_handler.h"    // ImageHandler class
#include "mainapp.h"          // App -- Main application class
#include "mainframe.h"        // MainFrame -- Main window frame
#include "node.h"             // Node class
#include "project_handler.h"  // ProjectHandler class

#include "../wxui/dlg_gen_results.h"

static bool gen_base_code = false;
static bool gen_derived_code = false;
static bool gen_perl_code = false;
static bool gen_python_code = false;
static bool gen_ruby_code = false;
static bool gen_rust_code = false;
static bool gen_xrc_code = false;

// This generates the base class files. For the derived class files, see OnGenInhertedClass()
// in generate/gen_codefiles.cpp
void MainFrame::OnGenerateCode(wxCommandEvent&)
{
    ProjectImages.UpdateEmbedNodes();
    bool code_generated = false;
    GenResults results;

    // This looks for
    auto output_type = Project.get_OutputType();

    if (output_type == OUTPUT_XRC)
    {
        GenerateLanguageFiles(results, nullptr, GEN_LANG_XRC);
        code_generated = true;
    }
    else if (output_type == OUTPUT_CPLUS)
    {
        GenerateLanguageFiles(results, nullptr, GEN_LANG_CPLUSPLUS);
        code_generated = true;
    }
    else if (output_type == OUTPUT_DERIVED)
    {
        GenInhertedClass(results);
        code_generated = true;
    }
    else if (output_type == OUTPUT_PYTHON)
    {
        GenerateLanguageFiles(results, nullptr, GEN_LANG_PYTHON);
        code_generated = true;
    }
    else if (output_type == OUTPUT_RUBY)
    {
        GenerateLanguageFiles(results, nullptr, GEN_LANG_RUBY);
        code_generated = true;
    }

    if (!code_generated)
    {
        GenerateDlg dlg(this);
        if (dlg.ShowModal() == wxID_OK)
        {
            // Always generate XRC files first in case the XRC files need to be added to a gen_Data
            // section of the other languages.
            gen_xrc_code = dlg.is_gen_xrc();
            if (gen_xrc_code)
            {
                GenerateLanguageFiles(results, nullptr, GEN_LANG_XRC);
                code_generated = true;
            }

            gen_base_code = dlg.is_gen_base();
            if (gen_base_code)
            {
                GenerateLanguageFiles(results, nullptr, GEN_LANG_CPLUSPLUS);
                code_generated = true;
            }

            gen_derived_code = dlg.is_gen_inherited();
            if (gen_derived_code)
            {
                GenInhertedClass(results);
                code_generated = true;
            }

            gen_perl_code = dlg.is_gen_perl();
            if (gen_perl_code)
            {
                GenerateLanguageFiles(results, nullptr, GEN_LANG_PERL);
                code_generated = true;
            }

            gen_python_code = dlg.is_gen_python();
            if (gen_python_code)
            {
                GenerateLanguageFiles(results, nullptr, GEN_LANG_PYTHON);
                code_generated = true;
            }

            gen_ruby_code = dlg.is_gen_ruby();
            if (gen_ruby_code)
            {
                GenerateLanguageFiles(results, nullptr, GEN_LANG_RUBY);
                code_generated = true;
            }

            gen_rust_code = dlg.is_gen_rust();
            if (gen_rust_code)
            {
                GenerateLanguageFiles(results, nullptr, GEN_LANG_RUST);
                code_generated = true;
            }

            if (wxGetApp().isTestingMenuEnabled())
            {
                auto* config = wxConfig::Get();
                config->SetPath("/preferences");
                config->Write("gen_xrc_code", gen_xrc_code);
                config->Write("gen_base_code", gen_base_code);
                config->Write("gen_derived_code", gen_derived_code);
                config->Write("gen_perl_code", gen_perl_code);
                config->Write("gen_python_code", gen_python_code);
                config->Write("gen_ruby_code", gen_ruby_code);
                config->Write("gen_rust_code", gen_rust_code);

                config->SetPath("/");
            }
        }
    }

    if (code_generated)
    {
        if ((results.updated_files.size() || results.msgs.size()))
        {
            GeneratedResultsDlg results_dlg;
            results_dlg.Create(this);
            for (auto& iter: results.updated_files)
            {
                iter.make_relative(Project.get_ProjectPath());
                results_dlg.m_lb_files->Append(iter);
            }

            if (results.updated_files.size() == 1)
                results.msgs.emplace_back("1 file was updated");
            else
                results.msgs.emplace_back()
                    << results.updated_files.size() << " files were updated";

            for (auto& iter: results.msgs)
            {
                results_dlg.m_lb_info->Append(iter);
            }

            results_dlg.ShowModal();
        }
        else if (results.file_count)
        {
            tt_string msg;
            msg << '\n' << "All " << results.file_count << " generated files are current";
            wxMessageBox(msg, "Code Generation", wxOK, this);
        }
    }

    UpdateWakaTime();
}

void GenerateDlg::OnInit(wxInitDialogEvent& event)
{
    auto languages = Project.get_GenerateLanguages();

    switch (Project.get_CodePreference())
    {
        case GEN_LANG_CPLUSPLUS:
            gen_base_code = true;
            break;
        case GEN_LANG_PERL:
            gen_perl_code = true;
            break;
        case GEN_LANG_PYTHON:
            gen_python_code = true;
            break;
        case GEN_LANG_RUBY:
            gen_ruby_code = true;
            break;
        case GEN_LANG_RUST:
            gen_rust_code = true;
            break;
        case GEN_LANG_XRC:
            gen_xrc_code = true;
            break;

        default:
            break;
    }

    if (languages & GEN_LANG_CPLUSPLUS || gen_base_code || gen_derived_code)
    {
        m_gen_base_code = gen_base_code;
        m_checkBaseCode = new wxCheckBox(this, wxID_ANY, "C++ &Base");
        m_checkBaseCode->SetValidator(wxGenericValidator(&m_gen_base_code));
        m_grid_sizer->Add(m_checkBaseCode, wxSizerFlags().Border(wxALL));

        m_gen_inherited_code = gen_derived_code;
        m_checkDerived = new wxCheckBox(this, wxID_ANY, "C++ &Derived");
        m_checkDerived->SetValidator(wxGenericValidator(&m_gen_inherited_code));
        m_checkDerived->SetToolTip("Generate any derived files that don\'t currently exist");
        m_grid_sizer->Add(m_checkDerived, wxSizerFlags().Border(wxALL));
    }
    if (languages & GEN_LANG_PERL && gen_perl_code)
    {
        m_gen_perl_code = gen_perl_code;
        m_checkPerl = new wxCheckBox(this, wxID_ANY, "Perl");
        m_checkPerl->SetValidator(wxGenericValidator(&m_gen_perl_code));
        m_grid_sizer->Add(m_checkPerl, wxSizerFlags().Border(wxALL));
        if (gen_perl_code)
            m_checkPerl->SetValue(true);
    }
    if (languages & GEN_LANG_PYTHON || gen_python_code)
    {
        m_gen_python_code = gen_python_code;
        m_checkPython = new wxCheckBox(this, wxID_ANY, "Python");
        m_checkPython->SetValidator(wxGenericValidator(&m_gen_python_code));
        m_grid_sizer->Add(m_checkPython, wxSizerFlags().Border(wxALL));
        if (gen_python_code)
            m_checkPython->SetValue(true);
    }
    if (languages & GEN_LANG_RUBY || gen_ruby_code)
    {
        m_gen_ruby_code = gen_ruby_code;
        m_checkRuby = new wxCheckBox(this, wxID_ANY, "Ruby");
        m_checkRuby->SetValidator(wxGenericValidator(&m_gen_ruby_code));
        m_grid_sizer->Add(m_checkRuby, wxSizerFlags().Border(wxALL));
        if (gen_ruby_code)
            m_checkRuby->SetValue(true);
    }
    if (languages & GEN_LANG_RUST || gen_rust_code)
    {
        m_gen_rust_code = gen_rust_code;
        m_checkRust = new wxCheckBox(this, wxID_ANY, "RUST");
        m_checkRust->SetValidator(wxGenericValidator(&m_gen_rust_code));
        m_grid_sizer->Add(m_checkRust, wxSizerFlags().Border(wxALL));
        if (gen_rust_code)
            m_checkRust->SetValue(true);
    }
    if (languages & GEN_LANG_XRC || gen_xrc_code)
    {
        m_gen_xrc_code = gen_xrc_code;
        m_checkXRC = new wxCheckBox(this, wxID_ANY, "XRC");
        m_checkXRC->SetValidator(wxGenericValidator(&m_gen_xrc_code));
        m_grid_sizer->Add(m_checkXRC, wxSizerFlags().Border(wxALL));
        if (gen_xrc_code)
            m_checkXRC->SetValue(true);
    }

    // You have to reset minimum size to allow the window to shrink
    SetMinSize(wxSize(-1, -1));
    Fit();

    event.Skip();
}
