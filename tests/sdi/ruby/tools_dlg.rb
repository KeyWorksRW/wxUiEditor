###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

WX_GLOBAL_CONSTANTS = true unless defined? WX_GLOBAL_CONSTANTS

require 'wx/core'
require 'wx/aui'
require 'wx/rbn'

$rbn_tool1 = 6000
$rbn_tool2 = 6001
$rbn_tool3 = 6002
$rbn_tool_art = 6003
$rbn_tool_list = 6004
$rbn_tool_svg = 6005

require 'zlib'
require 'base64'
require 'stringio'
require_relative 'images'

class ToolBarsDialog < Wx::Dialog
  def initialize(parent, id = Wx::ID_ANY, title = 'Test Dialog',
                 pos = Wx::DEFAULT_POSITION, size = Wx::DEFAULT_SIZE,
                 style = Wx::DEFAULT_DIALOG_STYLE)

    super(parent, id, title, pos, size, style)

    box_sizer = Wx::BoxSizer.new(Wx::VERTICAL)

    @tool_bar = Wx::ToolBar.new(self, Wx::ID_ANY, Wx::DEFAULT_POSITION,
      Wx::DEFAULT_SIZE, Wx::TB_HORIZONTAL)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    @tool_svg = @tool_svg = @tool_bar.add_tool(Wx::ID_ANY, '', Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)))

    @tool_bar.add_tool(Wx::ID_ANY, '', Wx::ArtProvider.get_bitmap_bundle(
      Wx::ART_CUT, Wx::ART_TOOLBAR))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($undo_png))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($redo_png, $redo_2x_png))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png))

    @tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($fontPicker_png, $fontPicker_1_25x_png,
      $fontPicker_1_5x_png))

    @tool_bar.realize
    box_sizer.add(@tool_bar, Wx::SizerFlags.new.border(Wx::ALL))

    @aui_tool_bar = Wx::AUI::AuiToolBar.new(self, Wx::ID_ANY,
      Wx::DEFAULT_POSITION, Wx::DEFAULT_SIZE, Wx::AUI::AUI_TB_PLAIN_BACKGROUND|
      Wx::AUI::AUI_TB_DEFAULT_STYLE)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    @aui_tool_svg = @aui_tool_bar.add_tool(Wx::ID_ANY, '', Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', Wx::ArtProvider.get_bitmap_bundle(
      Wx::ART_CUT, Wx::ART_TOOLBAR))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($redo_png, $redo_2x_png))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png))
    @aui_tool_bar.add_tool(Wx::ID_ANY, '', wxue_get_bundle($fontPicker_png, $fontPicker_1_25x_png,
      $fontPicker_1_5x_png))
    @aui_tool_bar.realize
    box_sizer.add(@aui_tool_bar, Wx::SizerFlags.new.border(Wx::ALL))

    @rbnBar = Wx::RBN::RibbonBar.new(self, Wx::ID_ANY)

    @rbnBar.set_art_provider(Wx::RBN::RibbonDefaultArtProvider.new)
    box_sizer.add(@rbnBar, Wx::SizerFlags.new.border(Wx::ALL))

    rbnPage = Wx::RBN::RibbonPage.new(@rbnBar, Wx::ID_ANY, 'Page 1')

    rbnPanel = Wx::RBN::RibbonPanel.new(rbnPage, Wx::ID_ANY, 'Page 1, panel 1')

    rbnToolBar = Wx::RBN::RibbonToolBar.new(rbnPanel, Wx::ID_ANY)
    _svg_string_ = Zlib::Inflate.inflate(Base64.decode64($left_svg))
    rbnToolBar.add_tool($rbn_tool_svg, Wx::BitmapBundle.from_svg(_svg_string_,
      Wx::Size.new(24, 24)).get_bitmap(Wx::DEFAULT_SIZE), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool_art, Wx::ArtProvider.get_bitmap(Wx::ART_CUT,
      Wx::ART_TOOLBAR), '', Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool1, wxue_get_bundle($undo_png).get_bitmap(
        Wx::Size.new(from_dip(24), from_dip(24))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool2, wxue_get_bundle($redo_png, $redo_2x_png)
      .get_bitmap(
        Wx::Size.new(from_dip(24), from_dip(24))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool3, wxue_get_bundle($wxPython_png, $wxPython_1_5x_png,
      $wxPython_2x_png).get_bitmap(
        Wx::Size.new(from_dip(16), from_dip(16))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.add_tool($rbn_tool_list, wxue_get_bundle($fontPicker_png, $fontPicker_1_25x_png,
      $fontPicker_1_5x_png).get_bitmap(
        Wx::Size.new(from_dip(22), from_dip(22))), '',
      Wx::RBN::RIBBON_BUTTON_NORMAL)
    rbnToolBar.realize

    set_sizer(box_sizer)
    set_min_size(convert_dialog_to_pixels(Wx::Size.new(200, -1)))
    fit
    centre(Wx::BOTH)

    # Event handlers
    evt_init_dialog(:on_init)
    evt_tool(@tool_svg.get_id, :OnTool)
  end

  # Loads image(s) from a string and returns a Wx::BitmapBundle object.
  def wxue_get_bundle(image_name1, image_name2 = nil, image_name3 = nil)
    image1 = Wx::Image.new
    image1.load_stream(StringIO.new(image_name1))
    if (image_name2)
      image2 = Wx::Image.new
      image2.load_stream(StringIO.new(image_name2))
      if (image_name3)
        image3 = Wx::Image.new
        image3.load_stream(StringIO.new(image_name3))
        bitmaps = [Wx::Bitmap.new(image1),
                   Wx::Bitmap.new(image2),
                   Wx::Bitmap.new(image3)]
        bundle = Wx::BitmapBundle.from_bitmaps(bitmaps)
        return bundle
      else
        bundle = Wx::BitmapBundle.from_bitmaps(Wx::Bitmap.new(image1),
                                               Wx::Bitmap.new(image2))
        return bundle
      end
    end
    bundle = Wx::BitmapBundle.from_image(image1)
    return bundle
  end
end

$left_svg = (
  'eNqFlU1zmzAQhvtTNPTSztgbrSQkcOyc20OvPeRGw4eZYOMBmtb99V0hEgMytjwwyLt6tNLu' +
  'K23bt+Jpm2Z5y8p0F9gP1MiDh6dtwcrja/uSnLJN0dS/T4c6zXZBlZyzJriYquRXVu2C74ek' +
  'yIKeURBABP34vicjKQPWNcmxzevmsAsOSdeUf78gcINKRHrF6Ue92IQaV2sE+29o+s9Y6EjE' +
  '8ivxTkm3Z213riiKtGxPFMmmPFblMXvMy6rafObU8vyx7Zr6NVv/KdNuv0Gg6QXNT6H8YGIl' +
  'ItCSmmI/mTAgNDXDvjEJMu4bUxBZ24ef5BOzYM/sQE7CzsZxxWcgA5rFwJ3VB1mzfh88oNCh' +
  'CfXGaMnSofYMQfXPDLK3Tsq9/rlYvChQwzAFGp8wsSuK6HkBI7gLFZlAcvMwFztGtG2LGAVq' +
  'wITXdndkl8sQGuOcJL+C+LDaMT2Er9a0t9ZVAi5RFISOQpHFdzhIeV3icFADB2mFdzgK4gUO' +
  '5UU6DuXN3OK81xdyiJZgAkRPYygpe8sw3tefza8GY2E68mkR4BBaDOFQPFeQVmRElG5i2hno' +
  'gVdFdvELqUjvqmxEmqtsTrotszFrLLMpZVFnozg8nc0DuSW0EccT2pxzS2ljzlxpHmdRamPK' +
  'NPMeY5Zzd+zb4xnpQPfvhrTuWnuh3D3A89xi+866PiUvZXfe4PQ858CFirS6nOi0wyIcyoDi' +
  'c/Vja0lwI4w0FL5CFSqjnL4GZ2EmTtNlyBCNv44mS+0yHorhsVfnp/8jr5kh')

$undo_png = Base64.decode64(
  'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwY' +
  'AAADdElEQVRIx+2VT2hdRRTGf2dm3n33vveCtkqERGsTUzTd1IYuBMVautSlINiFUFDBohQp' +
  'VFGhOxWhlG4siApiQchCUJdKaUGKbkqKQpW26Z8YaVOTtEnz3r13Zo6Lm6QJSY3WleCBYc5l' +
  '5nzf/c6cOQP/dZO1Ngwfn1CdC2hQVBUFUMAImhme33mf3BHBR9+MqZmjAtWlM8u/Ad8Q9j67' +
  'Qf42waEvLmuY9fMAt4BWgM/7MYJpOd7ZvVHWJDjw6ajGaV8Bzg8UQvSI2FtEUYkLZLGaZV3C' +
  'wVcektsSvHh4RBvXE5Al4CI80F1QlIHfJ7Nlfx+XgMdQ+cW9JUf3bV3EdcvYZlNuzJUVgQgI' +
  '9Pd49ux6mEOfn2Umj/igtPNIJw/kRaQsFV9GQlAkKvWpZFlGFgl2vHVKJ690wAgYiAoDvZ7X' +
  'XxgkSxPOjnc4NuIpfKVNFYiKxnkVIVaVdrnNlndHdeTNPlmh4MKVnJtFZK6I9PdE3n5piCxN' +
  'UFU+eHWAoiwBCBFGxzt8eWKC4eNtSm/QYFAfiV6ZG7+5UsGlScf1q7OYmkGcwSSG0pfkebXu' +
  'QyAEXTy5rY+sY9vme3hyyxivfTiJ9wb1gvi4eorECbZuMTWDqRl+vWbYc/gXDr68kayesO/j' +
  'UU5esIuB3c2C93d189RQNzsenebYz4ZYClIuL0yz4NhEMHWLTS02c9jM8eNvKXs/ucj0jVlI' +
  'LK6V4rpSXCvlD7o48t0keZEztCldjLGpW11BvdbG1i22biqixGISw+nphP3DVwkx4FoOkaqG' +
  'NSq55JRlibGKazhiEQjmNgpOv7dNbGqxqcNlDtewuIbDNRxn8rs5F9dTa9Wq0VWj1nJsH1DK' +
  'ouT8VMA13HysXV0BQFdfi3yyqNJUt9jM0t+a4fH7FZHq0i1YbzMw9GAXY9dmOTmR4RoOMULS' +
  '02Dkjb7VL9pPBzbJ4P4zalOHzSwuc2xYLzyzOV3Rr0of+OHiDEfPN/HNBs4GxAh39SV/3Yse' +
  'O3JO21OmkpxZ0lpJs1ZinME4qVSoMhcshWkS8kDoBHzbkzY93+/ukzW76ROfXdKiU+XfNWuL' +
  'hy81gxiBqESvhCIQ2oHQ9lhbcOK5XvlHD872r6bVJgbbcLjUYeoVgUYllpHQCcQ88O3Oltzx' +
  'iwbw9KlSxRnESVWmVB3060Ej/G//1v4EvrC4VZwjYRAAAAAASUVORK5CYII=')

$redo_png = Base64.decode64(
  'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsTAAALEwEAmpwY' +
  'AAADY0lEQVRIx+2VTWgdVRTHf+fcO/Pe5IO0hQgtVWxNQaiQJrsitAqFbvxAoSAEBBdKRRCp' +
  'i2xEilLqQkEsSEUsbiqI7sRlEUHRRbFQhNDWJLUxkaatiTXvvcybufe4mNfXpE2s1pXghcsM' +
  'w5n/757PC//1JXcy+OTUZZNWhGgg1Q8igjhBehwH9g7KXQHe/fyS+aZ1BDuiwoot3Wfsgecf' +
  '2yp/G/DmiYsWl0pUbxVe8X4DTPXN9XleeeZeuSPg0PuTZgvtSqwDUAFR6QqbBZz6myHrbN3g' +
  'OfzcNlkXMPb2GUuvJoiCOulC9BYvNm9qkSaOmfkUzLoADJoDbT58ebir61cCZi5AvtjAVHBO' +
  '8ImSJEItVeo1R1ZTvBO2+ISXxoZ45+NzTM15MBAzMEhcfe0QDR+dtktf/FxVhxPEaRUiFeiE' +
  'B4TUC/tGPR+9PkqzlfPG8Ql+mvWoABGIxrW+yFdHRmSVB825Bpo61AviFXFC4iMH9mY8tWeQ' +
  'bVvqOK1s0yTBzMjqKa+98CBPvvoDU3NKT6r0pkp/X8KaIXJ1Rb0iXvHeeO/FQfbv3kqIkcXr' +
  'TUKo7EoN5HkOQFEWaKosm9BqBK4sFgxszNYB1ByaKJooj+6MPDJ6D6cnLjN+cp75Rtq1231/' +
  '4NjBIVp5m0MfXOT81RRfj8RCqmrzsp4HHk0rwOgOJW/nHD/1G9fox/fdqFEgXWbx+hLjJ3/l' +
  '9Gwdl0XER8QFUMGl6wIcrqZVLlygKApyUZLepEq2gJnRCiXjn81zdrEf3xuJ7UhoB0Sr7qsl' +
  'rbUBPnNo6nB1x9RCm6JdsHfImDzvkU6GzYzJsIlYSFc8+oA4IYiABM6+NXJ7H1w49pAMH522' +
  '9u9tXOb47krG01eX2L+zn8G+BWYb7uZJzDCDb38Rppb6CVoJA/RsyVb1wSoPBranLJyLuJqj' +
  'rNc4cqbJ2PY/2LW5zi7vbptZM82cGavCJ6469I+Hd8hfzqKHT0zbcsPjM9/JiSONDXpcqGaF' +
  'GbE0YhlpFAnLRUJoBcpmSbYx8v3BB+SO03TPp7MWQorLPC5zuE4DooJFw4pIyCMhD5SNgrJZ' +
  'ktZLvnn2PvlHF86+U0umtSrpmijSAcQ8Ui6XlM2S2I58/cQGuesbDeDxiWgisiLHRlwOfDmS' +
  'CP+vf7v+BCTXR/QXGtTnAAAAAElFTkSuQmCC')

# redo@2x.png
$redo_2x_png = Base64.decode64(
  'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwY' +
  'AAAEoklEQVRo3u2YXUwcVRTHf7Ozyy7Q3aUsiJQlLVBtmgpK0JhCYqAvpIoxfoUXbWoTPxIT' +
  '01LaBPpgUrGtLV9Fjba2NW2sWE1Imxhj1fhkiKkNEhvjR2MbilILCWxZ2I9ZlvHh3q2zE0aI' +
  'KSbu7nn575mZe2/2/z/3nHOvwjKbt9D/GcBrHV2bAV55sVm5nfPb+J+bfbkXeKCufgVADIIA' +
  'LXu6RwC6X29ZnVHgv1DArio2gNpNm90A318YVAF2tHWOAfTsb12VUWA5zaaIpHMzNAdAQXlN' +
  'DkBurlsF2N52aBygd/+uOzIKLI8CqmJUYjY6D4Cz8C4nwMb6FXkAuq5PAhw+sLtADp3PKLBE' +
  '8wB4fMVNAKVl65oAKqvuuxvgwdracqGAZExSFokJgtXsOx0ADzU2eeV8AalEofSjKa3Av+5L' +
  'cr1FDQDNzz53CmDLtpdKALLdeYpgWHwX0gTT0+E4ANqcDkB8XuBcXKL0V6pBHWDw/LmwUGJX' +
  'sVxyOrMHAMrWV/cAHOzqeQFgVUV1jsjzguHgdDyZYZlLdH1hySeCMYzjf7c5FYC6h5/OEXtG' +
  'uQHQs691jRxyIz0VKCipeB6g752TLwM480sdAEEZ26qkQpccSwEA8UOWgVuYyEIJ5hOW2Ath' +
  '3QVAVpZTBcj2eFYDhKen00+BbIDtO3buNTIflQzaRaG9FeO6/KHryZOY/Ynp2IKLbShxAnDp' +
  '6080gDe799RJ5i+mZxYqXnPPIdHPNxUBBCKJmFeS8rhN+nk5YkqHXb6PRkSsa+L52JSW1BMl' +
  'rNIvmB/+8mMNoLer/X6A2OzspfTuhR59/Ml6AM3mVkR+n0vOTl6HiOk/fosAHD3y4WWA4aHv' +
  'RgF8vvz1AO0HT5QBXA9oSfWg0p8FwNAXZ6IAfW/srgKIadqvmW4UYG15eR5AMDInK6x4XuQV' +
  'QwdOH7kOcOLY2y0AU2MjHxnHP/LU1m8A/gxoZQAhGftVfqHcxfOC+a6OtnVihDaSOZEZ37k9' +
  '7hxj3s+yi/985afhEMC7hzu3AMzeHP9qoUlmZmbixi70Xr9Y8sLnZyLyfqhCfjqWORObzAkQ' +
  'DIXnAdwybXhlnn//g+M//hPzZqsoUAE41386LLrLnYmbuYnMvZCFzQL8/MPQKMDamkafyEJi' +
  'LwQCk6NLWWByclIFONt/MgTQu6/VL19N3ZZbj5SvA98ODvYBNDWPdwNEHbkOAIdN0Yy3EoBq' +
  'IkUB2NTQWC6Z32B6v1Ji3IRzJoyn7a1ElpHhjs73BgCqNzb4AAb6j00AHH/rwFaTAqppbiXp' +
  'aPY3WjGfOChoFr6WsgrYjPnfjB6PrxSgu+/oqwAutzsfYNszT3QBaOGZa6Z9pVooYMW4memo' +
  'hZ/ASMop4LRAV7JvzwNobd/7GMDlX66oAJ+ePTUEEI9rQdMeUk3Ma0thdgnP01aBZKypqfGJ' +
  'ijvjBbh67aq8/NQ0096Km2LdHONWzFspMJtyCigWjGdZ+GZ0ALhcLgdAJBJRLOpBzEIRbYl7' +
  'JGQcl9KVWDUpksS0Ae0mtC1SJOdNaO55EuvOmFAz1ZPU74UWU8Zu0QMt2JUuwPxiXaieFueB' +
  'vwBx6KjY2o3M3gAAAABJRU5ErkJggg==')

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

def OnTool(event)
  event.skip
end

def on_init(event)
  event.skip
end
