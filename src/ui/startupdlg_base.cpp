////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include <wx/artprov.h>
#include <wx/bmpbndl.h>
#include <wx/button.h>
#include <wx/icon.h>
#include <wx/statbmp.h>
#include <wx/statline.h>

#include "startupdlg_base.h"

#include <wx/mstream.h>  // memory stream classes

// Convert a data array into a wxImage
inline wxImage wxueImage(const unsigned char* data, size_t size_data)
{
    wxMemoryInputStream strm(data, size_data);
    wxImage image;
    image.LoadFile(strm);
    return image;
};

namespace wxue_img
{
    extern const unsigned char logo16_png[639];
    extern const unsigned char logo64_png[1718];
    extern const unsigned char pagectrl_png[601];
}

bool StartupDlg::Create(wxWindow* parent, wxWindowID id, const wxString& title,
        const wxPoint& pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    if (!wxImage::FindHandler(wxBITMAP_TYPE_PNG))
        wxImage::AddHandler(new wxPNGHandler);

    SetIcon(wxBitmapBundle::FromBitmap(wxueImage(wxue_img::logo16_png, sizeof(wxue_img::logo16_png))).GetIconFor(this));

    auto dlg_sizer = new wxBoxSizer(wxVERTICAL);

    auto box_sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    dlg_sizer->Add(box_sizer_6, wxSizerFlags(1).Expand().Border(wxALL));

    auto bmp_4 = new wxStaticBitmap(this, wxID_ANY, wxBitmapBundle::FromBitmap(wxueImage(wxue_img::logo64_png, sizeof(wxue_img::logo64_png))));
    box_sizer_6->Add(bmp_4, wxSizerFlags().Border(wxALL));

    box_sizer_6->AddSpacer(10 + wxSizerFlags::GetDefaultBorder());

    m_name_version = new wxStaticText(this, wxID_ANY, "wxUiEditor");
    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_X_LARGE);
        m_name_version->SetFont(font);
    }
    box_sizer_6->Add(m_name_version, wxSizerFlags(1).Center().Border(wxALL));

    auto box_sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    dlg_sizer->Add(box_sizer_8, wxSizerFlags().Border(wxALL));

    auto box_sizer = new wxBoxSizer(wxVERTICAL);
    box_sizer_8->Add(box_sizer, wxSizerFlags().Border(wxALL));

    auto staticText = new wxStaticText(this, wxID_ANY, "Recent");
    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_X_LARGE);
        font.SetWeight(wxFONTWEIGHT_SEMIBOLD);
        staticText->SetFont(font);
    }
    box_sizer->Add(staticText, wxSizerFlags().Border(wxALL));

    m_staticTextRecentProjects = new wxStaticText(this, wxID_ANY, "Recent projects you have opened will appear here");
    m_staticTextRecentProjects->Wrap(200);
    box_sizer->Add(m_staticTextRecentProjects, wxSizerFlags().Border(wxALL));

    m_recent_flex_grid = new wxFlexGridSizer(2, 0, 0);
    {
        m_recent_flex_grid->AddGrowableCol(1, 1);
        m_recent_flex_grid->SetFlexibleDirection(wxHORIZONTAL);
    }
    box_sizer->Add(m_recent_flex_grid, wxSizerFlags().Border(wxALL));

    auto static_line_2 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_VERTICAL);
    box_sizer_8->Add(static_line_2, wxSizerFlags().Expand().Border(wxALL, 20));

    auto box_sizer_2 = new wxBoxSizer(wxVERTICAL);
    box_sizer_8->Add(box_sizer_2, wxSizerFlags().Border(wxLEFT|wxRIGHT, 15));

    auto staticText_2 = new wxStaticText(this, wxID_ANY, "Start");
    {
        wxFont font(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
        font.SetSymbolicSize(wxFONTSIZE_X_LARGE);
        font.SetWeight(wxFONTWEIGHT_SEMIBOLD);
        staticText_2->SetFont(font);
    }
    box_sizer_2->Add(staticText_2, wxSizerFlags().Border(wxALL));

    auto box_sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_2->Add(box_sizer_4, wxSizerFlags().Border(wxALL));

    auto bmp_2 = new wxStaticBitmap(this, wxID_ANY, wxArtProvider::GetBitmapBundle(wxART_FILE_OPEN, wxART_TOOLBAR));
    box_sizer_4->Add(bmp_2, wxSizerFlags().Border(wxALL));

    auto hyperlink_2 = new wxGenericHyperlinkCtrl(this, wxID_ANY, "Open...", wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxHL_DEFAULT_STYLE);
    hyperlink_2->SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
    hyperlink_2->SetHoverColour(hyperlink_2->GetNormalColour());
    box_sizer_4->Add(hyperlink_2, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_2->Add(box_sizer_3, wxSizerFlags().Border(wxALL));

    auto bmp = new wxStaticBitmap(this, wxID_ANY, wxBitmapBundle::FromBitmap(wxueImage(wxue_img::pagectrl_png, sizeof(wxue_img::pagectrl_png))));
    box_sizer_3->Add(bmp, wxSizerFlags().Border(wxALL));

    auto hyperlink = new wxGenericHyperlinkCtrl(this, wxID_ANY, "Import...", wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxHL_DEFAULT_STYLE);
    hyperlink->SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
    hyperlink->SetHoverColour(hyperlink->GetNormalColour());
    box_sizer_3->Add(hyperlink, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    box_sizer_2->Add(box_sizer_5, wxSizerFlags().Border(wxALL));

    auto bmp_3 = new wxStaticBitmap(this, wxID_ANY, wxArtProvider::GetBitmapBundle(wxART_NEW, wxART_TOOLBAR));
    box_sizer_5->Add(bmp_3, wxSizerFlags().Border(wxALL));

    auto hyperlink_3 = new wxGenericHyperlinkCtrl(this, wxID_ANY, "New", wxEmptyString, wxDefaultPosition, wxDefaultSize,
        wxHL_DEFAULT_STYLE);
    hyperlink_3->SetFont(wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT));
    hyperlink_3->SetHoverColour(hyperlink_3->GetNormalColour());
    box_sizer_5->Add(hyperlink_3, wxSizerFlags().Center().Border(wxALL));

    auto box_sizer_7 = new wxBoxSizer(wxVERTICAL);
    dlg_sizer->Add(box_sizer_7, wxSizerFlags().Expand().Border(wxALL));

    auto static_line = new wxStaticLine(this);
    box_sizer_7->Add(static_line, wxSizerFlags().Expand().Border(wxALL));

    auto stdBtn = CreateStdDialogButtonSizer(wxCANCEL|wxNO_DEFAULT);
    stdBtn->GetCancelButton()->SetDefault();
    box_sizer_7->Add(stdBtn, wxSizerFlags(1).Center().Border(wxALL));

    SetSizerAndFit(dlg_sizer);
    Centre(wxBOTH);

    // Event handlers
    Bind(wxEVT_INIT_DIALOG, &StartupDlg::OnInit, this);
    hyperlink_2->Bind(wxEVT_HYPERLINK, &StartupDlg::OnOpen, this);
    hyperlink->Bind(wxEVT_HYPERLINK, &StartupDlg::OnImport, this);
    hyperlink_3->Bind(wxEVT_HYPERLINK, &StartupDlg::OnNew, this);

    return true;
}
