inline const char* ribbon_xml = R"===(<?xml version="1.0"?>
<!DOCTYPE GeneratorDefinitions SYSTEM "gen.dtd">
<GeneratorDefinitions>
	<gen class="wxRibbonBar" image="ribbon_bar" type="ribbonbar">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<inherits class="sizer_child" />
		<property name="var_name" type="string">m_rbnBar</property>
		<property name="theme" type="option"
			help="Select the RibbonBar theme.">
			<option name="Default"
				help="Use Default theme." />
			<option name="Generic"
				help="Use Generic theme." />
			<option name="MSW"
				help="Use MSW theme." />
			Default
		</property>
		<property name="style" type="bitlist">
			<option name="wxRIBBON_BAR_DEFAULT_STYLE"
				help="Defined as wxRIBBON_BAR_FLOW_HORIZONTAL | wxRIBBON_BAR_SHOW_PAGE_LABELS | wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS | wxRIBBON_BAR_SHOW_TOGGLE_BUTTON | wxRIBBON_BAR_SHOW_HELP_BUTTON." />
			<option name="wxRIBBON_BAR_FOLDBAR_STYLE"
				help="Defined as wxRIBBON_BAR_FLOW_VERTICAL | wxRIBBON_BAR_SHOW_PAGE_ICONS | wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS | wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS." />
			<option name="wxRIBBON_BAR_SHOW_PAGE_LABELS"
				help="Causes labels to be shown on the tabs in the ribbon bar." />
			<option name="wxRIBBON_BAR_SHOW_PAGE_ICONS"
				help="Causes icons to be shown on the tabs in the ribbon bar." />
			<option name="wxRIBBON_BAR_FLOW_HORIZONTAL"
				help="Causes panels within pages to stack horizontally." />
			<option name="wxRIBBON_BAR_FLOW_VERTICAL"
				help="Causes panels within pages to stack vertically." />
			<option name="wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS"
				help="Causes extension buttons to be shown on panels (where the panel has such a button)." />
			<option name="wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS"
				help="Causes minimise buttons to be shown on panels (where the panel has such a button)." />
			<option name="wxRIBBON_BAR_SHOW_TOGGLE_BUTTON"
				help="Causes a toggle button to appear on the ribbon bar at top-right corner." />
			<option name="wxRIBBON_BAR_SHOW_HELP_BUTTON"
				help="Causes a help button to appear on the ribbon bar at the top-right corner." />
			wxRIBBON_BAR_DEFAULT_STYLE
		</property>
		<event name="wxEVT_RIBBONBAR_PAGE_CHANGED" class="wxRibbonBarEvent"
			help="Triggered after the transition from one page being active to a different page being active." />
		<event name="wxEVT_RIBBONBAR_PAGE_CHANGING" class="wxRibbonBarEvent"
			help="Triggered prior to the transition from one page being active to a different page being active, and can veto the change." />
		<event name="wxEVT_RIBBONBAR_TAB_MIDDLE_DOWN" class="wxRibbonBarEvent"
			help="Triggered when the middle mouse button is pressed on a tab." />
		<event name="wxEVT_RIBBONBAR_TAB_MIDDLE_UP" class="wxRibbonBarEvent"
			help="Triggered when the middle mouse button is released on a tab." />
		<event name="wxEVT_RIBBONBAR_TAB_RIGHT_DOWN" class="wxRibbonBarEvent"
			help="Triggered when the right mouse button is pressed on a tab." />
		<event name="wxEVT_RIBBONBAR_TAB_RIGHT_UP" class="wxRibbonBarEvent"
			help="Triggered when the right mouse button is released on a tab." />
		<event name="wxEVT_RIBBONBAR_TAB_LEFT_DCLICK" class="wxRibbonBarEvent"
			help="Triggered when the left mouse button is double clicked on a tab." />
		<event name="wxEVT_RIBBONBAR_TOGGLED" class="wxRibbonBarEvent"
			help="Triggered when the button triggering the ribbon bar is clicked." />
		<event name="wxEVT_RIBBONBAR_HELP_CLICKED" class="wxRibbonBarEvent"
			help="Triggered when the help button is clicked." />
	</gen>

	<gen class="wxRibbonPage" image="ribbon_page" type="ribbonpage">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="var_name" type="string">rbnPage</property>
		<property name="label" type="string_escapes">MyRibbonPage</property>
		<property name="bitmap" type="image"
			help="wxRibbonPage bitmap." />
		<property name="select" type="bool"
			help="Select this ribbon page when adding.">0</property>
	</gen>

	<gen class="wxRibbonPanel" image="ribbon_panel" type="ribbonpanel">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="var_name" type="string">rbnPanel</property>
		<property name="label" type="string_escapes">MyRibbonPanel</property>
		<property name="bitmap" type="image"
			help="wxRibbonPanel bitmap." />
		<property name="style" type="bitlist">
			<option name="wxRIBBON_PANEL_DEFAULT_STYLE"
				help="Defined as no other flags set." />
			<option name="wxRIBBON_PANEL_NO_AUTO_MINIMISE"
				help="Prevents the panel from automatically minimising to conserve screen space." />
			<option name="wxRIBBON_PANEL_EXT_BUTTON"
				help="Causes an extension button to be shown in the panel's chrome (if the bar in which it is contained has wxRIBBON_BAR_SHOW_PANEL_EXT_BUTTONS set). The behaviour of this button is application controlled, but typically will show an extended drop-down menu relating to the panel." />
			<option name="wxRIBBON_PANEL_MINIMISE_BUTTON"
				help="Causes a (de)minimise button to be shown in the panel's chrome (if the bar in which it is contained has the wxRIBBON_BAR_SHOW_PANEL_MINIMISE_BUTTONS style set). This flag is typically combined with wxRIBBON_PANEL_NO_AUTO_MINIMISE to make a panel which the user always has manual control over when it minimises." />
			<option name="wxRIBBON_PANEL_STRETCH"
				help="Stretches a single panel to fit the parent page." />
			<option name="wxRIBBON_PANEL_FLEXIBLE"
				help="Allows the panel to size in both directions; currently only useful when a single wxRibbonToolBar is the child of the panel, particularly in vertical orientation where the number of rows is dependent on the amount of horizontal space available. Set the minimum and maximum toolbar rows to take full advantage of this wrapping behaviour." />
			wxRIBBON_PANEL_DEFAULT_STYLE
		</property>
		<event name="wxEVT_RIBBONPANEL_EXTBUTTON_ACTIVATED" class="wxRibbonPanelEvent"
			help="Triggered when the user activate the panel extension button." />
	</gen>

	<gen class="wxRibbonButtonBar" image="ribbon_buttonbar" type="ribbonbuttonbar">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="var_name" type="string">rbnBtnBar</property>
		<event name="EVT_RIBBONBUTTONBAR_CLICKED" class="wxRibbonToolBarEvent"
			help="Triggered when the normal (non-dropdown) region of a button on the button bar is clicked." />
		<event name="EVT_RIBBONBUTTONBAR_DROPDOWN_CLICKED" class="wxRibbonToolBarEvent"
			help="Triggered when the dropdown region of a button on the button bar is clicked. wxRibbonButtonBarEvent::PopupMenu() should be called by the event handler if it wants to display a popup menu (which is what most dropdown buttons should be doing)." />
	</gen>

	<gen class="ribbonButton" image="ribbon_button" type="ribbonbutton">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="label" type="string_escapes">MyRibbonButton</property>
		<property name="bitmap" type="image"
			help="ribbonButton bitmap." />
		<property name="help" type="string_escapes"
			help="ribbonButton" />
		<property name="kind" type="option">
			<option name="wxRIBBON_BUTTON_NORMAL"
				help="Normal button or tool with a clickable area which causes some generic action." />
			<option name="wxRIBBON_BUTTON_DROPDOWN"
				help="Dropdown button or tool with a clickable area which typically causes a dropdown menu." />
			<option name="wxRIBBON_BUTTON_HYBRID"
				help="Button or tool with two clickable areas - one which causes a dropdown menu, and one which causes a generic action." />
			<option name="wxRIBBON_BUTTON_TOGGLE"
				help="Normal button or tool with a clickable area which toggles the button between a pressed and unpressed state." />
			wxRIBBON_BUTTON_NORMAL
		</property>
		<event name="wxEVT_RIBBONBUTTON_CLICKED" class="wxRibbonButtonBarEvent"
			help="Triggered when the normal (non-dropdown) region of a button on the button bar is clicked." />
		<event name="wxEVT_RIBBONBUTTON_DROPDOWN_CLICKED" class="wxRibbonButtonBarEvent"
			help="Triggered when the dropdown region of a button on the button bar is clicked. wxRibbonButtonBarEvent::PopupMenu() should be called by the event handler if it wants to display a popup menu (which is what most dropdown buttons should be doing)." />
	</gen>

	<gen class="wxRibbonToolBar" image="ribbon_buttonbar" type="ribbontoolbar">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="var_name" type="string">rbnToolBar</property>
		<property name="min_rows" type="int"
			help="Minimum number of rows.">1</property>
		<property name="max_rows" type="int"
			help="Maximum number of rows. -1 defaults to minimum number of rows.">-1</property>
		<event name="wxEVT_RIBBONTOOLBAR_CLICKED" class="wxRibbonToolBarEvent"
			help="Triggered when the normal (non-dropdown) region of a tool on the tool bar is clicked." />
		<event name="wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED" class="wxRibbonToolBarEvent"
			help="Triggered when the dropdown region of a tool on the tool bar is clicked. wxRibbonToolBarEvent::PopupMenu() should be called by the event handler if it wants to display a popup menu (which is what most dropdown tools should be doing)." />
	</gen>

	<gen class="ribbonTool" image="ribbon_button" type="ribbontool">
		<property name="id" type="id"
			help="The identifier of the tool (used for event callbacks). When generating Python code, a non wx.Widgets id will be global unless prefixed with self." />
		<property name="bitmap" type="image"
			help="ribbonTool bitmap." />
		<property name="help" type="string_escapes"
			help="ribbonTool" />
		<property name="kind" type="option">
			<option name="wxRIBBON_BUTTON_NORMAL"
				help="Normal button or tool with a clickable area which causes some generic action." />
			<option name="wxRIBBON_BUTTON_DROPDOWN"
				help="Dropdown button or tool with a clickable area which typically causes a dropdown menu." />
			<option name="wxRIBBON_BUTTON_HYBRID"
				help="Button or tool with two clickable areas - one which causes a dropdown menu, and one which causes a generic action." />
			<option name="wxRIBBON_BUTTON_TOGGLE"
				help="Normal button or tool with a clickable area which toggles the button between a pressed and unpressed state." />
			wxRIBBON_BUTTON_NORMAL
		</property>
		<event name="wxEVT_RIBBONTOOLBAR_CLICKED" class="wxRibbonToolBarEvent"
			help="Triggered when the normal (non-dropdown) region of a tool on the tool bar is clicked." />
		<event name="wxEVT_RIBBONTOOLBAR_DROPDOWN_CLICKED" class="wxRibbonToolBarEvent"
			help="Triggered when the dropdown region of a tool on the tool bar is clicked. wxRibbonToolBarEvent::PopupMenu() should be called by the event handler if it wants to display a popup menu (which is what most dropdown tools should be doing)." />
	</gen>

	<gen class="wxRibbonGallery" image="ribbon_gallery" type="ribbongallery">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="var_name" type="string">rbnGallery</property>
		<event name="wxEVT_RIBBONGALLERY_SELECTED" class="wxRibbonGalleryEvent"
			help="Triggered when the user selects an item from the gallery." />
		<event name="wxEVT_RIBBONGALLERY_CLICKED" class="wxRibbonGalleryEvent"
			help="Similar to EVT_RIBBONGALLERY_SELECTED but triggered every time a gallery item is clicked, even if it is already selected." />
		<event name="wxEVT_RIBBONGALLERY_HOVER_CHANGED" class="wxRibbonGalleryEvent"
			help="Triggered when the item being hovered over by the user changes. The item in the event will be the new item being hovered, or NULL if there is no longer an item being hovered." />
		<event name="wxEVT_BUTTON" class="wxCommandEvent"
			help="Triggered when the extension button of the gallery is pressed." />
	</gen>

	<gen class="ribbonGalleryItem" image="ribbon_gallery_item" type="ribbongalleryitem">
		<inherits class="wxWindow" />
		<inherits class="Window Events" />
		<property name="bitmap" type="image"
			help="The bitmap to display for the item. Note that all items must have equally sized bitmaps. " />
	</gen>

	<gen class="ribbonSeparator" image="toolspacer" type="ribbontool" />
</GeneratorDefinitions>)===";
