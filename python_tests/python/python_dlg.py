###############################################################################
# Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
#
# Do not edit any code above the "End of generated code" comment block.
# Any changes before that block will be lost if it is re-generated!
###############################################################################

import wx
import wx.aui

import images
import zlib
import base64

class PythonDlg(wx.Dialog):
    def __init__(self, parent, id=wx.ID_ANY, title="Hello Python Dialog!",
                pos=wx.DefaultPosition, size=wx.DefaultSize,
                style=wx.DEFAULT_DIALOG_STYLE, name=wx.DialogNameStr):
        wx.Dialog.__init__(self)

        if not self.Create(parent, id, title, pos, size, style, name):
            return

        bSizer1 = wx.BoxSizer(wx.VERTICAL)

        box_sizer = wx.BoxSizer(wx.VERTICAL)

        self.auiToolBar = wx.aui.AuiToolBar(self, wx.ID_ANY, wx.DefaultPosition,
            wx.DefaultSize, wx.aui.AUI_TB_PLAIN_BACKGROUND|wx.aui.AUI_TB_DEFAULT_STYLE)
        self.auiToolBar.AddLabel(wx.ID_ANY, "Label")
        self.auiToolBar.AddTool(wx.ID_ANY, "Search", wx.BitmapBundle.FromBitmap(
            images.fontPicker_png.Bitmap))
        self.auiToolBar.AddSpacer(self.auiToolBar.FromDIP(10))

        self.spinCtrl = wx.SpinCtrl(self.auiToolBar)
        self.auiToolBar.AddControl(self.spinCtrl)
        self.auiToolBar.Realize()
        box_sizer.Add(self.auiToolBar, wx.SizerFlags().Border(wx.ALL))

        self.m_staticText = wx.StaticText(self, wx.ID_ANY,
            "wxPython est g√©nial n\'est-ce pas?",
            self.ConvertDialogToPixels(wx.Point(50, 100)),
            self.ConvertDialogToPixels(wx.Size(150, 32)), wx.ALIGN_CENTER_HORIZONTAL,
            "my_text")
        self.m_staticText.SetWindowVariant(wx.WINDOW_VARIANT_LARGE)
        self.m_staticText.SetForegroundColour(wx.Colour(0, 128, 0))
        box_sizer.Add(self.m_staticText, wx.SizerFlags().Center().Border(wx.ALL))

        _svg_string_ = zlib.decompress(base64.b64decode(images.face_smile_svg))
        bmp = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapBundle.FromSVG(_svg_string_,
            wx.Size(32, 32)))
        box_sizer.Add(bmp, wx.SizerFlags().Border(wx.ALL))

        bSizer1.Add(box_sizer, wx.SizerFlags().Expand().Border(wx.ALL))

        if "wxMac" not in wx.PlatformInfo:
            stdBtn_line = wx.StaticLine(self, wx.ID_ANY, wx.DefaultPosition, wx.Size(20, -1))
            bSizer1.Add(stdBtn_line, wx.SizerFlags().Expand().Border(wx.ALL))

        stdBtn = wx.StdDialogButtonSizer()
        stdBtn_OK = wx.Button(self, wx.ID_OK)
        stdBtn.SetAffirmativeButton(stdBtn_OK)
        stdBtn_Cancel = wx.Button(self, wx.ID_CANCEL)
        stdBtn.SetCancelButton(stdBtn_Cancel)
        stdBtn_OK.SetDefault()
        stdBtn.Realize()
        bSizer1.Add(stdBtn, wx.SizerFlags().Expand().Border(wx.ALL))

        self.SetSizerAndFit(bSizer1)
        self.Centre(wx.BOTH)

        # Bind Event handlers
        self.Bind(wx.EVT_INIT_DIALOG, self.OnInit)

    # Unimplemented Event handler functions
    # Copy any listed and paste them below the comment block, or to your inherited class.
    """
    """

# ************* End of generated code ***********
# DO NOT EDIT THIS COMMENT BLOCK!
#
# Code below this comment block will be preserved
# if the code for this class is re-generated.
# ***********************************************

    # Event handler functions
    def OnInit(self, event):
        # self.m_staticText.SetLabel("Hello Python!")
        event.Skip()
